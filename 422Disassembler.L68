00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/11/2014 1:02:47 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Convert ASCII to hex
00000000                             3  * Written by : Kaley & Cole & Abby
00000000                             4  * Date       : 11/11/14
00000000                             5  * Description: Small piece of disassembler project
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  *--------------------- HEX FOR OUTPUT ---------------------*
00000000                             9                  OPT         CRE
00000000  =0000000D                 10  CR              EQU         $0D
00000000  =0000000A                 11  LF              EQU         $0A
00000000  =00008000                 12  STACK           EQU         $8000
00001000                            13                  ORG         $1000
00001000  =00000000                 14  minaddress      EQU         $00000000   
00001000  =00FFFFFF                 15  maxaddress      EQU         $00FFFFFF                   
00001000  =0000000F                 16  NMASK           EQU         %00001111
00001000                            17              
00001000                            18  *----------------------------------------------------------*
00001000                            19  *Mode Masks
00001000                            20  * SRC 
00001000  =00000038                 21  EA_MODE         EQU         %00111000  
00001000  =00000007                 22  EA_REG          EQU         %00000111    
00001000                            23      
00001000                            24  * DST
00001000  =00000038                 25  DEST_MODE       EQU         %00111000
00001000  =00000007                 26  DEST_REG        EQU         %00000111
00001000                            27  
00001000                            28  *----------------------------------------------------------*
00001000                            29  START:          
00001000  207C 00000000             30                  MOVE.L      #$00000000,A0
00001006  227C 00000000             31                  MOVE.L      #$00000000,A1
0000100C  247C 00000000             32                  MOVE.L      #$00000000,A2
00001012  267C 00000000             33                  MOVE.L      #$00000000,A3
00001018  287C 00000000             34                  MOVE.L      #$00000000,A4
0000101E  2A7C 00000000             35                  MOVE.L      #$00000000,A5
00001024  2C7C 00000000             36                  MOVE.L      #$00000000,A6
0000102A  2E7C 00000000             37                  MOVE.L      #$00000000,A7       ; clear all address registers
00001030                            38                  * For testing  
00001030                            39                  ******************************* BRA TESTING *************************** 6000 - 603A
00001030  31FC 60AA 6000            40                  MOVE.W      #$60AA,$6000       BRA ADDRESS+AA
00001036  31FC 6000 6002            41                  MOVE.W      #$6000,$6002       BRA ADDRESS+AAAA
0000103C  31FC AAAA 6004            42                  MOVE.W      #$AAAA,$6004       AAAA following
00001042  31FC 60FF 6006            43                  MOVE.W      #$60FF,$6006       BRA ADDRESS+AAAAAAAA
00001048  31FC AAAA 6008            44                  MOVE.W      #$AAAA,$6008
0000104E  31FC AAAA 600A            45                  MOVE.W      #$AAAA,$600A       AAAAAAAA following
00001054                            46                  
00001054  31FC 65AA 600C            47                  MOVE.W      #$65AA,$600C       BCS ADDRESS+AA
0000105A  31FC 6500 600E            48                  MOVE.W      #$6500,$600E       BCS ADDRESS+AAAA
00001060  31FC AAAA 6010            49                  MOVE.W      #$AAAA,$6010       AAAA following
00001066  31FC 65FF 6012            50                  MOVE.W      #$65FF,$6012       BCS ADDRESS+AAAAAAAA
0000106C  31FC AAAA 6014            51                  MOVE.W      #$AAAA,$6014
00001072  31FC AAAA 6016            52                  MOVE.W      #$AAAA,$6016       AAAAAAAA following
00001078                            53                  
00001078  31FC 6CAA 6018            54                  MOVE.W      #$6CAA,$6018       BGE ADDRESS+AA
0000107E  31FC 6C00 601A            55                  MOVE.W      #$6C00,$601A       BGE ADDRESS+AAAA
00001084  31FC AAAA 601C            56                  MOVE.W      #$AAAA,$601C       AAAA following
0000108A  31FC 6CFF 601E            57                  MOVE.W      #$6CFF,$601E       BGE ADDRESS+AAAAAAAA
00001090  31FC AAAA 6020            58                  MOVE.W      #$AAAA,$6020
00001096  31FC AAAA 6022            59                  MOVE.W      #$AAAA,$6022       AAAAAAAA following
0000109C                            60                  
0000109C  31FC 6DAA 6024            61                  MOVE.W      #$6DAA,$6024       BLT ADDRESS+AA
000010A2  31FC 6D00 6026            62                  MOVE.W      #$6D00,$6026       BLT ADDRESS+AAAA
000010A8  31FC AAAA 6028            63                  MOVE.W      #$AAAA,$6028       AAAA following
000010AE  31FC 6DFF 602A            64                  MOVE.W      #$6DFF,$602A       BLT ADDRESS+AAAAAAAA
000010B4  31FC AAAA 602C            65                  MOVE.W      #$AAAA,$602C
000010BA  31FC AAAA 602E            66                  MOVE.W      #$AAAA,$602E       AAAAAAAA following
000010C0                            67                  
000010C0  31FC 68AA 6030            68                  MOVE.W      #$68AA,$6030       BVC ADDRESS+AA
000010C6  31FC 6800 6032            69                  MOVE.W      #$6800,$6032       BVC ADDRESS+AAAA
000010CC  31FC AAAA 6034            70                  MOVE.W      #$AAAA,$6034       AAAA following
000010D2  31FC 68FF 6036            71                  MOVE.W      #$68FF,$6036       BVC ADDRESS+AAAAAAAA
000010D8  31FC AAAA 6038            72                  MOVE.W      #$AAAA,$6038
000010DE  31FC AAAA 603A            73                  MOVE.W      #$AAAA,$603A       AAAAAAAA following
000010E4                            74                  ***********************************************************************
000010E4                            75  
000010E4                            76                  *********************NEG TESTING************************ 603C - 6076
000010E4  31FC 4401 603C            77                  MOVE.W      #$4401,$603C       NEG.B D1
000010EA  31FC 4441 603E            78                  MOVE.W      #$4441,$603E       NEG.W D1
000010F0  31FC 4481 6040            79                  MOVE.W      #$4481,$6040       NEG.L D1
000010F6                            80                  
000010F6  31FC 4409 6042            81                  MOVE.W      #$4409,$6042       DATA (mode 1)
000010FC  31FC 4449 6044            82                  MOVE.W      #$4449,$6044       DATA (mode 1)
00001102  31FC 4489 6046            83                  MOVE.W      #$4489,$6046       DATA (mode 1)
00001108                            84                  
00001108  31FC 4411 6048            85                  MOVE.W      #$4411,$6048       NEG.B (A1)
0000110E  31FC 4451 604A            86                  MOVE.W      #$4451,$604A       NEG.W (A1)
00001114  31FC 4491 604C            87                  MOVE.W      #$4491,$604C       NEG.L (A1)
0000111A                            88                
0000111A  31FC 4419 604E            89                  MOVE.W      #$4419,$604E       NEG.B (A1)+
00001120  31FC 4459 6050            90                  MOVE.W      #$4459,$6050       NEG.W (A1)+
00001126  31FC 4499 6052            91                  MOVE.W      #$4499,$6052       NEG.L (A1)+
0000112C                            92                  
0000112C  31FC 4421 6054            93                  MOVE.W      #$4421,$6054       NEG.B -(A1)
00001132  31FC 4461 6056            94                  MOVE.W      #$4461,$6056       NEG.W -(A1)
00001138  31FC 44A1 6058            95                  MOVE.W      #$44A1,$6058       NEG.L -(A1)
0000113E                            96                 
0000113E  31FC 4438 605A            97                  MOVE.W      #$4438,$605A       NEG.B $AAAA 
00001144  31FC AAAA 605C            98                  MOVE.W      #$AAAA,$605C
0000114A  31FC 4478 605E            99                  MOVE.W      #$4478,$605E       NEG.W $AAAA
00001150  31FC AAAA 6060           100                  MOVE.W      #$AAAA,$6060
00001156  31FC 44B8 6062           101                  MOVE.W      #$44B8,$6062       NEG.L $AAAA
0000115C  31FC AAAA 6064           102                  MOVE.W      #$AAAA,$6064
00001162                           103                  
00001162  31FC 4439 6066           104                  MOVE.W      #$4439,$6066       NEG.B $AAAAAAAA
00001168  31FC AAAA 6068           105                  MOVE.W      #$AAAA,$6068
0000116E  31FC AAAA 606A           106                  MOVE.W      #$AAAA,$606A
00001174  31FC 4479 606C           107                  MOVE.W      #$4479,$606C       NEG.W $AAAAAAAA
0000117A  31FC AAAA 606E           108                  MOVE.W      #$AAAA,$606E
00001180  31FC AAAA 6070           109                  MOVE.W      #$AAAA,$6070
00001186  31FC 44B9 6072           110                  MOVE.W      #$44B9,$6072       NEG.L $AAAAAAAA
0000118C  31FC AAAA 6074           111                  MOVE.W      #$AAAA,$6074
00001192  31FC AAAA 6076           112                  MOVE.W      #$AAAA,$6076
00001198                           113                  ********************************************************
00001198                           114                  
00001198                           115                  *** 60A4 TO 6114 EMPTY IN MEMORY - OPEN FOR TESTING ***
00001198                           116                  ************************** OR TESTING ************************ 6078 - 611E
00001198                           117                  ** EA Source ** .B
00001198  31FC 8A03 6078           118                  MOVE.W      #$8A03,$6078       OR.B D3,D5
0000119E  31FC 8A0B 607A           119                  MOVE.W      #$8A0B,$607A       OR.B A3,D5 ---- INVALID, DATA
000011A4  31FC 8A13 607C           120                  MOVE.W      #$8A13,$607C       OR.B (A3),D5
000011AA  31FC 8A1B 607E           121                  MOVE.W      #$8A1B,$607E       OR.B (A3)+,D5
000011B0  31FC 8A23 6080           122                  MOVE.W      #$8A23,$6080       OR.B -(A3),D5
000011B6  31FC 8A2B 6082           123                  MOVE.W      #$8A2B,$6082       OR.B (D16,AN) --- INVALID, DATA
000011BC  31FC 8A33 6084           124                  MOVE.W      #$8A33,$6084       OR.B (D8,AN,XN) --- INVALID, DATA
000011C2  31FC 8A38 6086           125                  MOVE.W      #$8A38,$6086
000011C8  31FC AAAA 6088           126                  MOVE.W      #$AAAA,$6088       OR.B $AAAA,D5
000011CE  31FC 8A39 608A           127                  MOVE.W      #$8A39,$608A
000011D4  31FC AAAA 608C           128                  MOVE.W      #$AAAA,$608C       OR.B $AAAAAAAA,D5
000011DA  31FC AAAA 608E           129                  MOVE.W      #$AAAA,$608E
000011E0  31FC 8A3C 6090           130                  MOVE.W      #$8A3C,$6090
000011E6  31FC ABCD 6092           131                  MOVE.W      #$ABCD,$6092       OR.B #$ABCD,D5              
000011EC                           132                  
000011EC                           133                  ** EA Destination ** .B
000011EC  31FC 8A03 6094           134                  MOVE.W      #$8A03,$6094       OR.B D5,D3 ---- INVALID, DATA
000011F2  31FC 8B0B 6096           135                  MOVE.W      #$8B0B,$6096       OR.B D5,A3 ---- INVALID, DATA
000011F8  31FC 8B13 6098           136                  MOVE.W      #$8B13,$6098       OR.B D5,(A3)
000011FE  31FC 8B1B 609A           137                  MOVE.W      #$8B1B,$609A       OR.B D5,(A3)+
00001204  31FC 8B23 609C           138                  MOVE.W      #$8B23,$609C       OR.B D5,-(A3)
0000120A  31FC 8B2B 609E           139                  MOVE.W      #$8B2B,$609E       OR.B (D16,AN) --- INVALID, DATA
00001210  31FC 8B33 60A0           140                  MOVE.W      #$8B33,$60A0       OR.B (D8,AN,XN) --- INVALID, DATA
00001216  31FC 8B38 60A2           141                  MOVE.W      #$8B38,$60A2
0000121C  31FC AAAA 60A4           142                  MOVE.W      #$AAAA,$60A4       OR.B D5,#$AAAA
00001222  31FC 8B39 60A6           143                  MOVE.W      #$8B39,$60A6
00001228  31FC AAAA 60A8           144                  MOVE.W      #$AAAA,$60A8       OR.B D5,#$AAAAAAAA
0000122E  31FC AAAA 60AA           145                  MOVE.W      #$AAAA,$60AA
00001234  31FC 8B3C 60AC           146                  MOVE.W      #$8B3C,$60AC       OR.B D5,#$XXXX ---- INVALID, DATA
0000123A                           147                  
0000123A                           148                  ** EA Source ** .W
0000123A  31FC 8A43 60B0           149                  MOVE.W      #$8A43,$60B0       OR.W D3,D5
00001240  31FC 8A4B 60B2           150                  MOVE.W      #$8A4B,$60B2       OR.W A3,D5 ---- INVALID, DATA
00001246  31FC 8A53 60B4           151                  MOVE.W      #$8A53,$60B4       OR.W (A3),D5
0000124C  31FC 8A5B 60B6           152                  MOVE.W      #$8A5B,$60B6       OR.W (A3)+,D5
00001252  31FC 8A63 60B8           153                  MOVE.W      #$8A63,$60B8       OR.W -(A3),D5
00001258  31FC 8A6B 60BA           154                  MOVE.W      #$8A6B,$60BA       OR.W (D16,AN) --- INVALID, DATA
0000125E  31FC 8A73 60BC           155                  MOVE.W      #$8A73,$60BC       OR.W (D8,AN,XN) --- INVALID, DATA
00001264  31FC 8A78 60BE           156                  MOVE.W      #$8A78,$60BE
0000126A  31FC AAAA 60C0           157                  MOVE.W      #$AAAA,$60C0       OR.W #$AAAA,D5
00001270  31FC 8A79 60C2           158                  MOVE.W      #$8A79,$60C2
00001276  31FC AAAA 60C4           159                  MOVE.W      #$AAAA,$60C4       OR.W #$AAAAAAAA,D5
0000127C  31FC AAAA 60C6           160                  MOVE.W      #$AAAA,$60C6
00001282  31FC 8A7C 60C8           161                  MOVE.W      #$8A7C,$60C8
00001288  31FC ABCD 60CA           162                  MOVE.W      #$ABCD,$60CA       OR.W #$ABCD,D5 ...???                
0000128E                           163                  
0000128E                           164                  ** EA Destination ** .W
0000128E  31FC 8B43 60CC           165                  MOVE.W      #$8B43,$60CC       OR.W D5,D3 ---- INVALID, DATA
00001294  31FC 8B4B 60CE           166                  MOVE.W      #$8B4B,$60CE       OR.W D5,A3 ---- INVALID, DATA
0000129A  31FC 8B53 60D0           167                  MOVE.W      #$8B53,$60D0       OR.W D5,(A3)
000012A0  31FC 8B5B 60D2           168                  MOVE.W      #$8B5B,$60D2       OR.W D5,(A3)+
000012A6  31FC 8B63 60D4           169                  MOVE.W      #$8B63,$60D4       OR.W D5,-(A3)
000012AC  31FC 8B6B 60D6           170                  MOVE.W      #$8B6B,$60D6       OR.W (D16,AN) --- INVALID, DATA
000012B2  31FC 8B73 60D8           171                  MOVE.W      #$8B73,$60D8       OR.W (D8,AN,XN) --- INVALID, DATA
000012B8  31FC 8B78 60DA           172                  MOVE.W      #$8B78,$60DA
000012BE  31FC AAAA 60DC           173                  MOVE.W      #$AAAA,$60DC       OR.W D5,#$AAAA
000012C4  31FC 8B79 60DE           174                  MOVE.W      #$8B79,$60DE
000012CA  31FC AAAA 60E0           175                  MOVE.W      #$AAAA,$60E0       OR.W D5,#$AAAAAAAA
000012D0  31FC AAAA 60E2           176                  MOVE.W      #$AAAA,$60E2
000012D6  31FC 8B7C 60E4           177                  MOVE.W      #$8B7C,$60E4       OR.W D5,#$XXXX ---- INVALID, DATA
000012DC  31FC AAAA 60E6           178                  MOVE.W      #$AAAA,$60E6
000012E2                           179                  
000012E2                           180                  ** EA Source ** .L
000012E2  31FC 8A83 60E8           181                  MOVE.W      #$8A83,$60E8       OR.W D3,D5
000012E8  31FC 8A8B 60EA           182                  MOVE.W      #$8A8B,$60EA       OR.W A3,D5 ---- INVALID, DATA
000012EE  31FC 8A93 60EC           183                  MOVE.W      #$8A93,$60EC       OR.W (A3),D5
000012F4  31FC 8A9B 60EE           184                  MOVE.W      #$8A9B,$60EE       OR.W (A3)+,D5
000012FA  31FC 8AA3 60F0           185                  MOVE.W      #$8AA3,$60F0       OR.W -(A3),D5
00001300  31FC 8AAB 60F2           186                  MOVE.W      #$8AAB,$60F2       OR.W (D16,AN) --- INVALID, DATA
00001306  31FC 8AB3 60F4           187                  MOVE.W      #$8AB3,$60F4       OR.W (D8,AN,XN) --- INVALID, DATA
0000130C  31FC 8AB8 60F6           188                  MOVE.W      #$8AB8,$60F6
00001312  31FC AAAA 60F8           189                  MOVE.W      #$AAAA,$60F8       OR.W $AAAA,D5
00001318  31FC 8AB9 60FA           190                  MOVE.W      #$8AB9,$60FA
0000131E  31FC AAAA 60FC           191                  MOVE.W      #$AAAA,$60FC       OR.W $AAAAAAAA,D5
00001324  31FC AAAA 60FE           192                  MOVE.W      #$AAAA,$60FE
0000132A  31FC 8ABC 6100           193                  MOVE.W      #$8ABC,$6100
00001330  31FC ABCD 6102           194                  MOVE.W      #$ABCD,$6102       OR.W #$ABCD,D5               
00001336                           195                  
00001336                           196                  ** EA Destination ** .L
00001336  31FC 8B83 6104           197                  MOVE.W      #$8B83,$6104       OR.W D5,D3 ---- INVALID, DATA
0000133C  31FC 8B8B 6106           198                  MOVE.W      #$8B8B,$6106       OR.W D5,A3 ---- INVALID, DATA
00001342  31FC 8B93 6108           199                  MOVE.W      #$8B93,$6108       OR.W D5,(A3)
00001348  31FC 8B9B 610A           200                  MOVE.W      #$8B9B,$610A       OR.W D5,(A3)+
0000134E  31FC 8BA3 610C           201                  MOVE.W      #$8BA3,$610C       OR.W D5,-(A3)
00001354  31FC 8BAB 610E           202                  MOVE.W      #$8BAB,$610E       OR.W (D16,AN) --- INVALID, DATA
0000135A  31FC 8BB3 6110           203                  MOVE.W      #$8BB3,$6110       OR.W (D8,AN,XN) --- INVALID, DATA
00001360  31FC 8BB8 6112           204                  MOVE.W      #$8BB8,$6112
00001366  31FC AAAA 6114           205                  MOVE.W      #$AAAA,$6114       OR.W D5,$AAAA
0000136C  31FC 8BB9 6116           206                  MOVE.W      #$8BB9,$6116
00001372  31FC AAAA 6118           207                  MOVE.W      #$AAAA,$6118       OR.W D5,$AAAAAAAA
00001378  31FC AAAA 611A           208                  MOVE.W      #$AAAA,$611A
0000137E  31FC 8BBC 611C           209                  MOVE.W      #$8BBC,$611C       OR.W D5,#$XXXX ---- INVALID, DATA
00001384  31FC AAAA 611E           210                  MOVE.W      #$AAAA,$611E
0000138A                           211                  *****************************************************************
0000138A                           212                  
0000138A                           213                  **********************LSL/LSR TESTING******************* 6120 - 6166
0000138A                           214                  *** NO EA ***
0000138A                           215                  * LSL COUNT *
0000138A  31FC E70D 6120           216                  MOVE.W      #$E70D,$6120       LSL.B #3,D5
00001390  31FC E74D 6122           217                  MOVE.W      #$E74D,$6122       LSL.W #3,D5
00001396  31FC E78D 6124           218                  MOVE.W      #$E78D,$6124       LSL.L #3,D5
0000139C                           219                  * LSL REGISTER *
0000139C  31FC E72D 6126           220                  MOVE.W      #$E72D,$6126       LSL.B D3,D5
000013A2  31FC E76D 6128           221                  MOVE.W      #$E76D,$6128       LSL.W D3,D5
000013A8  31FC E7AD 612A           222                  MOVE.W      #$E7AD,$612A       LSL.L D3,D5
000013AE                           223                  * LSR COUNT *
000013AE  31FC E60D 612C           224                  MOVE.W      #$E60D,$612C       LSR.B #3,D5
000013B4  31FC E64D 612E           225                  MOVE.W      #$E64D,$612E       LSR.W #3,D5
000013BA  31FC E68D 6130           226                  MOVE.W      #$E68D,$6130       LSR.L #3,D5
000013C0                           227                  * LSR REGISTER *
000013C0  31FC E62D 6132           228                  MOVE.W      #$E62D,$6132       LSR.B D3,D5
000013C6  31FC E66D 6134           229                  MOVE.W      #$E66D,$6134       LSR.W D3,D5
000013CC  31FC E6AD 6136           230                  MOVE.W      #$E6AD,$6136       LSR.L D3,D5
000013D2                           231                  
000013D2                           232                  *** EA MODES ***
000013D2  31FC E2C5 6138           233                  MOVE.W      #$E2C5,$6138       * LSR Dn * -- INVALID, DATA
000013D8  31FC E3C5 613A           234                  MOVE.W      #$E3C5,$613A       * LSL Dn * -- INVALID, DATA
000013DE  31FC E2CD 613C           235                  MOVE.W      #$E2CD,$613C       * LSR An * -- INVALID, DATA
000013E4  31FC E3CD 613E           236                  MOVE.W      #$E3CD,$613E       * LSL An * -- INVALID, DATA
000013EA  31FC E2D5 6140           237                  MOVE.W      #$E2D5,$6140       * LSR (An) *
000013F0  31FC E3D5 6142           238                  MOVE.W      #$E3D5,$6142       * LSL (An) *
000013F6  31FC E2DD 6144           239                  MOVE.W      #$E2DD,$6144       * LSR (An)+ *
000013FC  31FC E3DD 6146           240                  MOVE.W      #$E3DD,$6146       * LSL (An)+ *
00001402  31FC E2E5 6148           241                  MOVE.W      #$E2E5,$6148       * LSR -(An) *
00001408  31FC E3E5 614A           242                  MOVE.W      #$E3E5,$614A       * LSL -(An) *
0000140E  31FC E2ED 614C           243                  MOVE.W      #$E2ED,$614C       * LSR (d16,An) * INVALID, DATA
00001414  31FC E3ED 614E           244                  MOVE.W      #$E3ED,$614E       * LSL (d16,An) * INVALID, DATA
0000141A  31FC E2F5 6150           245                  MOVE.W      #$E2F5,$6150       * LSR (d8,An,Xn) * INVALID, DATA
00001420  31FC E3F5 6152           246                  MOVE.W      #$E3F5,$6152       * LSL (d8,An,Xn) * INVALID, DATA
00001426  31FC E2F8 6154           247                  MOVE.W      #$E2F8,$6154       * LSR (xxx).W *
0000142C  31FC AAAA 6156           248                  MOVE.W      #$AAAA,$6156
00001432  31FC E3F8 6158           249                  MOVE.W      #$E3F8,$6158       * LSL (xxx).W *
00001438  31FC AAAA 615A           250                  MOVE.W      #$AAAA,$615A
0000143E  31FC E2F9 615C           251                  MOVE.W      #$E2F9,$615C       * LSR (xxx).L *
00001444  31FC AAAA 615E           252                  MOVE.W      #$AAAA,$615E
0000144A  31FC AAAA 6160           253                  MOVE.W      #$AAAA,$6160
00001450  31FC E3F9 6162           254                  MOVE.W      #$E3F9,$6162       * LSL #$XXXX *
00001456  31FC AAAA 6164           255                  MOVE.W      #$AAAA,$6164
0000145C  31FC AAAA 6166           256                  MOVE.W      #$AAAA,$6166
00001462                           257                  *******************************************************
00001462                           258                  
00001462                           259                  **********************ASL/ASR TESTING******************* 6168 - 61AE
00001462                           260                  *** NO EA ***
00001462                           261                  * ASL COUNT *
00001462  31FC E705 6168           262                  MOVE.W      #$E705,$6168       ASL.B #3,D5
00001468  31FC E745 616A           263                  MOVE.W      #$E745,$616A       ASL.W #3,D5
0000146E  31FC E785 616C           264                  MOVE.W      #$E785,$616C       ASL.L #3,D5
00001474                           265                  * ASL REGISTER *
00001474  31FC E725 616E           266                  MOVE.W      #$E725,$616E       ASL.B D3,D5
0000147A  31FC E765 6170           267                  MOVE.W      #$E765,$6170       ASL.W D3,D5
00001480  31FC E7A5 6172           268                  MOVE.W      #$E7A5,$6172       ASL.L D3,D5
00001486                           269                  * ASR COUNT *
00001486  31FC E605 6174           270                  MOVE.W      #$E605,$6174       ASR.B #3,D5
0000148C  31FC E645 6176           271                  MOVE.W      #$E645,$6176       ASR.W #3,D5
00001492  31FC E685 6178           272                  MOVE.W      #$E685,$6178       ASR.L #3,D5
00001498                           273                  * ASR REGISTER *
00001498  31FC E625 617A           274                  MOVE.W      #$E625,$617A       ASR.B D3,D5
0000149E  31FC E665 617C           275                  MOVE.W      #$E665,$617C       ASR.W D3,D5
000014A4  31FC E6A5 617E           276                  MOVE.W      #$E6A5,$617E       ASR.L D3,D5
000014AA                           277                  
000014AA                           278                  *** EA MODES ***
000014AA  31FC E0C5 6180           279                  MOVE.W      #$E0C5,$6180        * ASR Dn * -- INVALID, DATA
000014B0  31FC E1C5 6182           280                  MOVE.W      #$E1C5,$6182        * ASL Dn * -- INVALID, DATA
000014B6  31FC E0CD 6184           281                  MOVE.W      #$E0CD,$6184        * ASR An * -- INVALID, DATA
000014BC  31FC E1CD 6186           282                  MOVE.W      #$E1CD,$6186        * ASL An * -- INVALID, DATA
000014C2  31FC E0D5 6188           283                  MOVE.W      #$E0D5,$6188        * ASR (An) *
000014C8  31FC E1D5 618A           284                  MOVE.W      #$E1D5,$618A        * ASL (An) *
000014CE  31FC E0DD 618C           285                  MOVE.W      #$E0DD,$618C        * ASR (An)+ *
000014D4  31FC E1DD 618E           286                  MOVE.W      #$E1DD,$618E        * ASL (An)+ *
000014DA  31FC E0E5 6190           287                  MOVE.W      #$E0E5,$6190        * ASR -(An) *
000014E0  31FC E1E5 6192           288                  MOVE.W      #$E1E5,$6192        * ASL -(An) *
000014E6  31FC E0ED 6194           289                  MOVE.W      #$E0ED,$6194        * ASR (d16,An) * --- INVALID, DATA
000014EC  31FC E1ED 6196           290                  MOVE.W      #$E1ED,$6196        * ASL (d16,An) * --- INVALID, DATA
000014F2  31FC E0F5 6198           291                  MOVE.W      #$E0F5,$6198        * ASR (d8,An,Xn) * --- INVALID, DATA
000014F8  31FC E1F5 619A           292                  MOVE.W      #$E1F5,$619A        * ASL (d8,An,Xn) * --- INVALID, DATA
000014FE  31FC E0F8 619C           293                  MOVE.W      #$E0F8,$619C        * ASR (xxx).W *
00001504  31FC AAAA 619E           294                  MOVE.W      #$AAAA,$619E
0000150A  31FC E1F8 61A0           295                  MOVE.W      #$E1F8,$61A0        * ASL (xxx).W *
00001510  31FC AAAA 61A2           296                  MOVE.W      #$AAAA,$61A2
00001516  31FC E0F9 61A4           297                  MOVE.W      #$E0F9,$61A4        * ASR (xxx).L *
0000151C  31FC AAAA 61A6           298                  MOVE.W      #$AAAA,$61A6
00001522  31FC AAAA 61A8           299                  MOVE.W      #$AAAA,$61A8
00001528  31FC E1F9 61AA           300                  MOVE.W      #$E1F9,$61AA        * ASL (xxx).L *
0000152E  31FC AAAA 61AC           301                  MOVE.W      #$AAAA,$61AC
00001534  31FC AAAA 61AE           302                  MOVE.W      #$AAAA,$61AE
0000153A                           303                  *******************************************************
0000153A                           304                  
0000153A                           305                  **********************ROL/ROR TESTING******************* 61B0 - 61F6
0000153A                           306                  *** NO EA ***
0000153A                           307                  * ROL COUNT *
0000153A  31FC E71D 61B0           308                  MOVE.W      #$E71D,$61B0       ROL.B #3,D5
00001540  31FC E75D 61B2           309                  MOVE.W      #$E75D,$61B2       ROL.W #3,D5
00001546  31FC E79D 61B4           310                  MOVE.W      #$E79D,$61B4       ROL.L #3,D5
0000154C                           311                  * ROL REGISTER *
0000154C  31FC E73D 61B6           312                  MOVE.W      #$E73D,$61B6       ROL.B D3,D5
00001552  31FC E77D 61B8           313                  MOVE.W      #$E77D,$61B8       ROL.W D3,D5
00001558  31FC E7BD 61BA           314                  MOVE.W      #$E7BD,$61BA       ROL.L D3,D5
0000155E                           315                  * ROR COUNT *
0000155E  31FC E61D 61BC           316                  MOVE.W      #$E61D,$61BC       ROR.B #3,D5
00001564  31FC E65D 61BE           317                  MOVE.W      #$E65D,$61BE       ROR.W #3,D5
0000156A  31FC E69D 61C0           318                  MOVE.W      #$E69D,$61C0       ROR.L #3,D5
00001570                           319                  * ROR REGISTER *
00001570  31FC E63D 61C2           320                  MOVE.W      #$E63D,$61C2       ROR.B D3,D5
00001576  31FC E67D 61C4           321                  MOVE.W      #$E67D,$61C4       ROR.W D3,D5
0000157C  31FC E6BD 61C6           322                  MOVE.W      #$E6BD,$61C6       ROR.L D3,D5
00001582                           323                  
00001582                           324                  *** EA MODES ***
00001582  31FC E6C5 61C8           325                  MOVE.W      #$E6C5,$61C8        * ROR Dn * -- INVALID, DATA
00001588  31FC E7C5 61CA           326                  MOVE.W      #$E7C5,$61CA        * ROL Dn * -- INVALID, DATA
0000158E  31FC E6CD 61CC           327                  MOVE.W      #$E6CD,$61CC        * ROR An * -- INVALID, DATA
00001594  31FC E7CD 61CE           328                  MOVE.W      #$E7CD,$61CE        * ROL An * -- INVALID, DATA
0000159A  31FC E6D5 61D0           329                  MOVE.W      #$E6D5,$61D0        * ROR (An) *
000015A0  31FC E7D5 61D2           330                  MOVE.W      #$E7D5,$61D2        * ROL (An) *
000015A6  31FC E6DD 61D4           331                  MOVE.W      #$E6DD,$61D4        * ROR (An)+ *
000015AC  31FC E7DD 61D6           332                  MOVE.W      #$E7DD,$61D6        * ROL (An)+ *
000015B2  31FC E6E5 61D8           333                  MOVE.W      #$E6E5,$61D8        * ROR -(An) *
000015B8  31FC E7E5 61DA           334                  MOVE.W      #$E7E5,$61DA        * ROL -(An) *
000015BE  31FC E6ED 61DC           335                  MOVE.W      #$E6ED,$61DC        * ROR (d16,An) * --- INVALID, DATA
000015C4  31FC E7ED 61DE           336                  MOVE.W      #$E7ED,$61DE        * ROL (d16,An) * --- INVALID, DATA
000015CA  31FC E6F5 61E0           337                  MOVE.W      #$E6F5,$61E0        * ROR (d8,An,Xn) * --- INVALID, DATA
000015D0  31FC E7F5 61E2           338                  MOVE.W      #$E7F5,$61E2        * ROL (d8,An,Xn) * --- INVALID, DATA
000015D6  31FC E6F8 61E4           339                  MOVE.W      #$E6F8,$61E4        * ROR (xxx).W *
000015DC  31FC AAAA 61E6           340                  MOVE.W      #$AAAA,$61E6
000015E2  31FC E7F8 61E8           341                  MOVE.W      #$E7F8,$61E8        * ROL (xxx).W *
000015E8  31FC AAAA 61EA           342                  MOVE.W      #$AAAA,$61EA
000015EE  31FC E6F9 61EC           343                  MOVE.W      #$E6F9,$61EC        * ROR (xxx).L *
000015F4  31FC AAAA 61EE           344                  MOVE.W      #$AAAA,$61EE
000015FA  31FC AAAA 61F0           345                  MOVE.W      #$AAAA,$61F0
00001600  31FC E7F9 61F2           346                  MOVE.W      #$E7F9,$61F2        * ROL #$XXXXXXXX *
00001606  31FC AAAA 61F4           347                  MOVE.W      #$AAAA,$61F4
0000160C  31FC AAAA 61F6           348                  MOVE.W      #$AAAA,$61F6
00001612                           349  
00001612                           350                  *******************************************************
00001612                           351  
00001612                           352                  *******************************************************     $61F8 - $620E
00001612                           353                  * JSR TESTS    
00001612                           354                  *        
00001612  31FC 4EB8 61F8           355                  MOVE.W      #$4EB8,$61F8
00001618  31FC 6000 61FA           356                  MOVE.W      #$6000,$61FA           JSR $6000
0000161E  31FC 4E91 61FC           357                  MOVE.W      #$4E91,$61FC           JSR (A1)
00001624  31FC 4E93 61FE           358                  MOVE.W      #$4E93,$61FE           JSR (A3)
0000162A  31FC 4EB9 6200           359                  MOVE.W      #$4EB9,$6200
00001630  31FC 0000 6202           360                  MOVE.W      #$0000,$6202           JSR $00008000
00001636  31FC 8000 6204           361                  MOVE.W      #$8000,$6204
0000163C  31FC 4E80 6206           362                  MOVE.W      #$4E80,$6206           Attempt JSR D0
00001642  31FC 4E88 6208           363                  MOVE.W      #$4E88,$6208           Attempt JSR A0
00001648  31FC 4E98 620A           364                  MOVE.W      #$4E98,$620A           Attempt JSR (A1)+
0000164E  31FC 4EA0 620C           365                  MOVE.W      #$4EA0,$620C           Attempt JSR -(A1)
00001654  31FC 4EBC 620E           366                  MOVE.W      #$4EBC,$620E           Attempt JSR #(DATA)
0000165A                           367                  
0000165A                           368                  *******************************************************     $6210 - $622A
0000165A                           369                  * LEA Tests
0000165A                           370                  *
0000165A  31FC 43D5 6210           371                  MOVE.W      #$43D5,$6210            LEA (A5),A1
00001660  31FC 4DF8 6212           372                  MOVE.W      #$4DF8,$6212            LEA  $4000,A6
00001666  31FC 4000 6214           373                  MOVE.W      #$4000,$6214
0000166C  31FC 49F9 6216           374                  MOVE.W      #$49F9,$6216            LEA  $8000,A4
00001672  31FC 0000 6218           375                  MOVE.W      #$0000,$6218
00001678  31FC 8000 621A           376                  MOVE.W      #$8000,$621A                                
0000167E  31FC 47F9 621C           377                  MOVE.W      #$47F9,$621C            LEA  $000505AB,A3
00001684  31FC 0005 621E           378                  MOVE.W      #$0005,$621E
0000168A  31FC 05AB 6220           379                  MOVE.W      #$05AB,$6220     
00001690  31FC 41C0 6222           380                  MOVE.W      #$41C0,$6222            Attempt LEA Dn,A0
00001696  31FC 41C8 6224           381                  MOVE.W      #$41C8,$6224            Attempt LEA An,A0
0000169C  31FC 41D8 6226           382                  MOVE.W      #$41D8,$6226            Attempt LEA (An)+,A0
000016A2  31FC 41E0 6228           383                  MOVE.W      #$41E0,$6228            Attempt LEA -(An),A0
000016A8  31FC 41FC 622A           384                  MOVE.W      #$41FC,$622A            Attempt LEA #(DATA),A0
000016AE  31FC DEAD 622C           385                  MOVE.W      #$DEAD,$622C            DEAD
000016B4                           386                  *******************************************************
000016B4                           387                  * MULS Tests
000016B4                           388                  
000016B4  31FC CBC3 622E           389                  MOVE.W      #$CBC3,$622E           MULS.W D3,D5
000016BA  31FC CBCB 6230           390                  MOVE.W      #$CBCB,$6230           MULS.W A3,D5 --- DATA INVALID INPUT
000016C0  31FC CBD3 6232           391                  MOVE.W      #$CBD3,$6232           MULS.W (A3),D5
000016C6  31FC CBDB 6234           392                  MOVE.W      #$CBDB,$6234           MULS.W (A3)+,D5
000016CC  31FC CBE3 6236           393                  MOVE.W      #$CBE3,$6236           MULS.W -(A3),D5
000016D2  31FC CBEB 6238           394                  MOVE.W      #$CBEB,$6238           MULS.W (d16,An) --- DATA, INVALID
000016D8  31FC CBF3 623A           395                  MOVE.W      #$CBF3,$623A           MULS.W (d8,An,Xn) --- DATA, INVALID
000016DE  31FC CBF8 623C           396                  MOVE.W      #$CBF8,$623C           MULS.W #$ABCD,D5
000016E4  31FC ABCD 623E           397                  MOVE.W      #$ABCD,$623E
000016EA  31FC CBF9 6240           398                  MOVE.W      #$CBF9,$6240           MULS.W #$ABCDEF00,D5
000016F0  31FC ABCD 6242           399                  MOVE.W      #$ABCD,$6242
000016F6  31FC EF00 6244           400                  MOVE.W      #$EF00,$6244
000016FC  31FC CBFC 6246           401                  MOVE.W      #$CBFC,$6246           MULS.W #$AAAA,D5
00001702  31FC AAAA 6248           402                  MOVE.W      #$AAAA,$6248
00001708  31FC AAAA 624A           403                  MOVE.W      #$AAAA,$624A
0000170E                           404                  
0000170E                           405                  *******************************************************
0000170E                           406                  * DIVS Tests
0000170E                           407                  
0000170E  31FC 8BC3 624C           408                  MOVE.W      #$8BC3,$624C           DIVS.W D3,D5
00001714  31FC 8BCB 624E           409                  MOVE.W      #$8BCB,$624E           DIVS.W A3,D5 --- DATA INVALID INPUT
0000171A  31FC 8BD3 6250           410                  MOVE.W      #$8BD3,$6250           DIVS.W (A3),D5
00001720  31FC 8BDB 6252           411                  MOVE.W      #$8BDB,$6252           DIVS.W (A3)+,D5
00001726  31FC 8BE3 6254           412                  MOVE.W      #$8BE3,$6254           DIVS.W -(A3),D5
0000172C  31FC 8BEB 6256           413                  MOVE.W      #$8BEB,$6256           DIVS.W (d16,An) --- DATA, INVALID
00001732  31FC 8BF3 6258           414                  MOVE.W      #$8BF3,$6258           DIVS.W (d8,An,Xn) --- DATA, INVALID
00001738  31FC 8BF8 625A           415                  MOVE.W      #$8BF8,$625A           DIVS.W #$ABCD,D5
0000173E  31FC ABCD 625C           416                  MOVE.W      #$ABCD,$625C
00001744  31FC 8BF9 625E           417                  MOVE.W      #$8BF9,$625E           DIVS.W #$ABCDEF00,D5
0000174A  31FC ABCD 6260           418                  MOVE.W      #$ABCD,$6260
00001750  31FC EF00 6262           419                  MOVE.W      #$EF00,$6262
00001756  31FC 8BFC 6264           420                  MOVE.W      #$8BFC,$6264           DIVS.W #$1234,D5
0000175C  31FC 1234 6266           421                  MOVE.W      #$1234,$6266
00001762  31FC AAAA 6268           422                  MOVE.W      #$AAAA,$6268
00001768                           423                  
00001768                           424   *-----------------------------------------------------------------------*
00001768                           425   *              SUBQ Testing (all modes have been tested)
00001768                           426   *            
00001768  31FC 53B8 626A           427                  MOVE.W      #$53B8,$626A
0000176E  31FC AAAA 626C           428                  MOVE.W      #$AAAA,$626C            SUBQ.L       #1,$AAAA
00001774  31FC 55B8 626E           429                  MOVE.W      #$55B8,$626E
0000177A  31FC AAAA 6270           430                  MOVE.W      #$AAAA,$6270            SUBQ.L       #2,$AAAA
00001780  31FC 57B9 6272           431                  MOVE.W      #$57B9,$6272            SUBQ.L       #3,$AAAAA
00001786  31FC 000A 6274           432                  MOVE.W      #$000A,$6274
0000178C  31FC AAAA 6276           433                  MOVE.W      #$AAAA,$6276       
00001792  31FC 59B9 6278           434                  MOVE.W      #$59B9,$6278            SUBQ.L       #4,$AAAAAAAA
00001798  31FC AAAA 627A           435                  MOVE.W      #$AAAA,$627A
0000179E  31FC AAAA 627C           436                  MOVE.W      #$AAAA,$627C
000017A4                           437                  
000017A4                           438                  *******************************************************
000017A4                           439                  * BCLR
000017A4                           440                  *
000017A4                           441                  ** Bit number Dynamic **
000017A4  31FC 0B83 627E           442                  MOVE.W      #$0B83,$627E        BCLR    D5,D3
000017AA  31FC 0B8B 6280           443                  MOVE.W      #$0B8B,$6280        BCLR    D5,A3 --- DATA, INVALID
000017B0  31FC 0B93 6282           444                  MOVE.W      #$0B93,$6282        BCLR    D5,(A3)
000017B6  31FC 0B9B 6284           445                  MOVE.W      #$0B9B,$6284        BCLR    D5,(A3)+
000017BC  31FC 0BA3 6286           446                  MOVE.W      #$0BA3,$6286        BCLR    D5,-(A3)
000017C2  31FC 0BAB 6288           447                  MOVE.W      #$0BAB,$6288        BCLR    (D16,AN) --- DATA,INVALID?
000017C8  31FC 0BB3 628A           448                  MOVE.W      #$0BB3,$628A        BCLR    (D8,AN,XN) --- DATA, INVALID?
000017CE  31FC 0BB8 628C           449                  MOVE.W      #$0BB8,$628C        BCLR    D5,$AAAA
000017D4  31FC AAAA 628E           450                  MOVE.W      #$AAAA,$628E
000017DA  31FC 0BB9 6290           451                  MOVE.W      #$0BB9,$6290        BCLR    D5,$AAAAAAAA
000017E0  31FC AAAA 6292           452                  MOVE.W      #$AAAA,$6292
000017E6  31FC AAAA 6294           453                  MOVE.W      #$AAAA,$6294
000017EC  31FC 0BBC 6296           454                  MOVE.W      #$0BBC,$6296        BCLR    D5,#$01234567
000017F2  31FC 0123 6298           455                  MOVE.W      #$0123,$6298
000017F8  31FC 4567 629A           456                  MOVE.W      #$4567,$629A
000017FE                           457                  
000017FE                           458                  ** Bit number Static **
000017FE  31FC 0883 629C           459                  MOVE.W      #$0883,$629C        BCLR    #15,D3
00001804  31FC 0015 629E           460                  MOVE.W      #$0015,$629E
0000180A  31FC 088B 62A0           461                  MOVE.W      #$088B,$62A0        BCLR    #15,A3 --- DATA, INVALID
00001810  31FC 0893 62A2           462                  MOVE.W      #$0893,$62A2        BCLR    #15,(A3)
00001816  31FC 0015 62A4           463                  MOVE.W      #$0015,$62A4
0000181C  31FC 089B 62A6           464                  MOVE.W      #$089B,$62A6        BCLR    #15,(A3)+
00001822  31FC 0015 62A8           465                  MOVE.W      #$0015,$62A8
00001828  31FC 08A3 62AA           466                  MOVE.W      #$08A3,$62AA        BCLR    #15,-(A3)
0000182E  31FC 0015 62AC           467                  MOVE.W      #$0015,$62AC
00001834  31FC 08AB 62AE           468                  MOVE.W      #$08AB,$62AE        BCLR    (D16,AN) --- DATA,INVALID
0000183A  31FC 08B3 62B0           469                  MOVE.W      #$08B3,$62B0        BCLR    (D8,AN,XN) --- DATA, INVALID
00001840  31FC 08B8 62B2           470                  MOVE.W      #$08B8,$62B2        BCLR    #15,#$AAAA
00001846  31FC 0015 62B4           471                  MOVE.W      #$0015,$62B4
0000184C  31FC AAAA 62B6           472                  MOVE.W      #$AAAA,$62B6
00001852  31FC 08B9 62B8           473                  MOVE.W      #$08B9,$62B8        BCLR    #15,#$AAAAAAAA
00001858  31FC 0015 62BA           474                  MOVE.W      #$0015,$62BA
0000185E  31FC AAAA 62BC           475                  MOVE.W      #$AAAA,$62BC
00001864  31FC AAAA 62BE           476                  MOVE.W      #$AAAA,$62BE
0000186A  31FC 08BC 62C0           477                  MOVE.W      #$08BC,$62C0        BCLR    #15,#$AAAA --- DATA, INVALID
00001870  31FC AAAA 62C2           478                  MOVE.W      #$AAAA,$62C2
00001876                           479                  
00001876                           480                  *******************************************************
00001876                           481                  * ADDA Tests
00001876                           482                  
00001876  31FC D0C9 62C4           483                  MOVE.W      #$D0C9,$62C4        ADDA.W    A1,A0     
0000187C  31FC D2C3 62C6           484                  MOVE.W      #$D2C3,$62C6        ADDA.W    D3,A1  
00001882  31FC D4D3 62C8           485                  MOVE.W      #$D4D3,$62C8        ADDA.W    (A3),A2      
00001888  31FC D6DD 62CA           486                  MOVE.W      #$D6DD,$62CA        ADDA.W    (A5)+,A3
0000188E  31FC D8E6 62CC           487                  MOVE.W      #$D8E6,$62CC        ADDA.W    -(A6),A4
00001894  31FC DAE9 62CE           488                  MOVE.W      #$DAE9,$62CE
0000189A  31FC 0190 62D0           489                  MOVE.W      #$0190,$62D0        ADDA.W    (400,A1),A5 (Attempt)  
000018A0  31FC DCF8 62D2           490                  MOVE.W      #$DCF8,$62D2
000018A6  31FC 5000 62D4           491                  MOVE.W      #$5000,$62D4        ADDA.W    $5000,A6
000018AC  31FC DEF9 62D6           492                  MOVE.W      #$DEF9,$62D6        ADDA.W    $8000,A7
000018B2  31FC 0000 62D8           493                  MOVE.W      #$0000,$62D8
000018B8  31FC 8000 62DA           494                  MOVE.W      #$8000,$62DA    
000018BE  31FC DEFC 62DC           495                  MOVE.W      #$DEFC,$62DC
000018C4  31FC 8000 62DE           496                  MOVE.W      #$8000,$62DE        ADDA.W    #$8000,A7  
000018CA  31FC D1C9 62E0           497                  MOVE.W      #$D1C9,$62E0        ADDA.L    A1,A0     
000018D0  31FC D3C3 62E2           498                  MOVE.W      #$D3C3,$62E2        ADDA.L    D3,A1  
000018D6  31FC D5D3 62E4           499                  MOVE.W      #$D5D3,$62E4        ADDA.L    (A3),A2      
000018DC  31FC D7DD 62E6           500                  MOVE.W      #$D7DD,$62E6        ADDA.L    (A5)+,A3
000018E2  31FC D9E6 62E8           501                  MOVE.W      #$D9E6,$62E8        ADDA.L    -(A6),A4
000018E8  31FC DBE9 62EA           502                  MOVE.W      #$DBE9,$62EA
000018EE  31FC 0190 62EC           503                  MOVE.W      #$0190,$62EC        ADDA.L    (400,A1),A5 (Attempt)  
000018F4  31FC DDF8 62EE           504                  MOVE.W      #$DDF8,$62EE
000018FA  31FC 5000 62F0           505                  MOVE.W      #$5000,$62F0        ADDA.L    $5000,A6
00001900  31FC DFF9 62F2           506                  MOVE.W      #$DFF9,$62F2        ADDA.L    $8000,A7
00001906  31FC 0000 62F4           507                  MOVE.W      #$0000,$62F4
0000190C  31FC 8000 62F6           508                  MOVE.W      #$8000,$62F6    
00001912  31FC DFFC 62F8           509                  MOVE.W      #$DFFC,$62F8        ADDA.L    #$8000,A7  
00001918  31FC 0000 62FA           510                  MOVE.W      #$0000,$62FA
0000191E  31FC 8000 62FC           511                  MOVE.W      #$8000,$62FC   
00001924                           512    
00001924                           513                  *******************************************************
00001924                           514                  * CMP Tests
00001924  31FC B411 62FE           515                  MOVE.W      #$B411,$62FE       CMP.B  (A1),D2
0000192A  31FC B063 6300           516                  MOVE.W      #$B063,$6300        CMP.W   -(A3),D0
00001930  31FC B449 6302           517                  MOVE.W      #$B449,$6302        CMP.W   A1,D2
00001936  31FC B489 6304           518                  MOVE.W      #$B489,$6304        CMP.L   A1,D2
0000193C  31FC B008 6306           519                  MOVE.W      #$B008,$6306       CMP.B    A0,D0     TEST CASE(Should be DATA) 
00001942  31FC B03C 6308           520                  MOVE.W      #$B03C,$6308        CMP.B   #$xx,D0 
00001948  31FC 0001 630A           521                  MOVE.W      #$0001,$630A                01
0000194E  31FC B038 630C           522                  MOVE.W      #$B038,$630C        CMP.B   $xxxx,D0
00001954  31FC 0005 630E           523                  MOVE.W      #$0005,$630E               0005
0000195A  31FC B0B9 6310           524                  MOVE.W      #$B0B9,$6310       CMP.L   $xxxxxxxx,D0
00001960  31FC 1234 6312           525                  MOVE.W      #$1234,$6312               1234
00001966  31FC 5678 6314           526                  MOVE.W      #$5678,$6314                   5678
0000196C  31FC B0BC 6316           527                  MOVE.W      #$B0BC,$6316       CMP.L   #$xxxxxxxx,D0
00001972  31FC 1234 6318           528                  MOVE.W      #$1234,$6318               1234           
00001978  31FC 5678 631A           529                  MOVE.W      #$5678,$631A                   5678       
0000197E  31FC B25A 631C           530                  MOVE.W      #$B25A,$631C       CMP.W   (A2)+,D1         
00001984  31FC B401 631E           531                  MOVE.W      #$B401,$631E       CMP.B   D1,D2 
0000198A  31FC BA7C 6320           532                  MOVE.W      #$BA7C,$6320       CMP.W   #$xxxx,A5
00001990  31FC AAAA 6322           533                  MOVE.W      #$AAAA,$6322                AAAA
00001996                           534                  *******************************************************
00001996                           535                  * MOVEM TESTS
00001996                           536                  *
00001996                           537                  *** REGISTER TO MEMORY *** .W
00001996  31FC 4885 6324           538                  MOVE.W      #$4885,$6324       MOVEM.W D1,D5 --- DATA, INVALID
0000199C  31FC AAAA 6326           539                  MOVE.W      #$AAAA,$6326
000019A2  31FC 488D 6328           540                  MOVE.W      #$488D,$6328       MOVEM.W D1,A5 --- DATA, INVALID
000019A8  31FC AAAA 632A           541                  MOVE.W      #$AAAA,$632A
000019AE  31FC 4895 632C           542                  MOVE.W      #$4895,$632C       MOVEM.W D1,(A5)
000019B4  31FC 0002 632E           543                  MOVE.W      #$0002,$632E
000019BA  31FC 489D 6330           544                  MOVE.W      #$489D,$6330       MOVEM.W D1/A1,(A5)+ --- DATA, INVALID
000019C0  31FC AAAA 6332           545                  MOVE.W      #$AAAA,$6332
000019C6  31FC 48A5 6334           546                  MOVE.W      #$48A5,$6334       MOVEM.W D1/A1,-(A5)
000019CC  31FC 4040 6336           547                  MOVE.W      #$4040,$6336
000019D2  31FC 48AD 6338           548                  MOVE.W      #$48AD,$6338       DATA, INVALID
000019D8  31FC 48B5 633A           549                  MOVE.W      #$48B5,$633A       DATA, INVALID
000019DE  31FC 48B8 633C           550                  MOVE.W      #$48B8,$633C       MOVEM.W D1/D6/A3,$1234
000019E4  31FC 0842 633E           551                  MOVE.W      #$0842,$633E
000019EA  31FC 1234 6340           552                  MOVE.W      #$1234,$6340
000019F0  31FC 48B9 6342           553                  MOVE.W      #$48B9,$6342       MOVEM.W D0/A4/A7,$00001234
000019F6  31FC 9001 6344           554                  MOVE.W      #$9001,$6344
000019FC  31FC 0000 6346           555                  MOVE.W      #$0000,$6346
00001A02  31FC 1234 6348           556                  MOVE.W      #$1234,$6348
00001A08  31FC 48BC 634A           557                  MOVE.W      #$48BC,$634A       MOVEM.W xxx,#$AAAA --- DATA, INVALID
00001A0E  31FC AAAA 634C           558                  MOVE.W      #$AAAA,$634C
00001A14  31FC AAAA 634E           559                  MOVE.W      #$AAAA,$634E
00001A1A                           560                  
00001A1A                           561                  *** REGISTER TO MEMORY *** .L
00001A1A  31FC 48C5 6350           562                  MOVE.W      #$48C5,$6350       MOVEM.W D1,D5 --- DATA, INVALID
00001A20  31FC AAAA 6352           563                  MOVE.W      #$AAAA,$6352
00001A26  31FC 48CD 6354           564                  MOVE.W      #$48CD,$6354       MOVEM.W D1,A5 --- DATA, INVALID
00001A2C  31FC AAAA 6356           565                  MOVE.W      #$AAAA,$6356
00001A32  31FC 48D5 6358           566                  MOVE.W      #$48D5,$6358       MOVEM.W D1,(A5)
00001A38  31FC 0002 635A           567                  MOVE.W      #$0002,$635A
00001A3E  31FC 48DD 635C           568                  MOVE.W      #$48DD,$635C       MOVEM.W D1/A1,(A5)+ --- DATA, INVALID
00001A44  31FC AAAA 635E           569                  MOVE.W      #$AAAA,$635E
00001A4A  31FC 48E5 6360           570                  MOVE.W      #$48E5,$6360       MOVEM.W D1/A1,-(A5)
00001A50  31FC 4040 6362           571                  MOVE.W      #$4040,$6362
00001A56  31FC 48ED 6364           572                  MOVE.W      #$48ED,$6364       DATA, INVALID
00001A5C  31FC 48B5 6366           573                  MOVE.W      #$48B5,$6366       DATA, INVALID
00001A62  31FC 48F8 6368           574                  MOVE.W      #$48F8,$6368       MOVEM.W D1/D6/A3,$1234
00001A68  31FC 0842 636A           575                  MOVE.W      #$0842,$636A
00001A6E  31FC 1234 636C           576                  MOVE.W      #$1234,$636C
00001A74  31FC 48F9 636E           577                  MOVE.W      #$48F9,$636E       MOVEM.W D0/A4/A7,$00001234
00001A7A  31FC 9001 6370           578                  MOVE.W      #$9001,$6370
00001A80  31FC 0000 6372           579                  MOVE.W      #$0000,$6372
00001A86  31FC 1234 6374           580                  MOVE.W      #$1234,$6374
00001A8C  31FC 48FC 6376           581                  MOVE.W      #$48FC,$6376       MOVEM.W xxx,#$AAAA --- DATA, INVALID
00001A92  31FC AAAA 6378           582                  MOVE.W      #$AAAA,$6378
00001A98  31FC AAAA 637A           583                  MOVE.W      #$AAAA,$637A
00001A9E                           584                  
00001A9E                           585                  *** MEMORY TO REGISTER *** .W
00001A9E  31FC 4C85 637C           586                  MOVE.W      #$4C85,$637C       MOVEM.W D5,D1 --- DATA, INVALID
00001AA4  31FC AAAA 637E           587                  MOVE.W      #$AAAA,$637E
00001AAA  31FC 4C8D 6380           588                  MOVE.W      #$4C8D,$6380       MOVEM.W A5,D1 --- DATA, INVALID
00001AB0  31FC AAAA 6382           589                  MOVE.W      #$AAAA,$6382
00001AB6  31FC 4C95 6384           590                  MOVE.W      #$4C95,$6384       MOVEM.W (A5),D1
00001ABC  31FC 0002 6386           591                  MOVE.W      #$0002,$6386
00001AC2  31FC 4C9D 6388           592                  MOVE.W      #$4C9D,$6388       MOVEM.W (A5)+,D6/A6
00001AC8  31FC 4040 638A           593                  MOVE.W      #$4040,$638A
00001ACE  31FC 4CA5 638C           594                  MOVE.W      #$4CA5,$638C       MOVEM.W -(A5),D1/A1 --- DATA, INVALID
00001AD4  31FC AAAA 638E           595                  MOVE.W      #$AAAA,$638E
00001ADA  31FC 4CAD 6390           596                  MOVE.W      #$4CAD,$6390       DATA, INVALID
00001AE0  31FC 4CB5 6392           597                  MOVE.W      #$4CB5,$6392       DATA, INVALID
00001AE6  31FC 4CB8 6394           598                  MOVE.W      #$4CB8,$6394       MOVEM.W $1234,D1/D6/A3
00001AEC  31FC 0842 6396           599                  MOVE.W      #$0842,$6396
00001AF2  31FC 1234 6398           600                  MOVE.W      #$1234,$6398
00001AF8  31FC 4CB9 639A           601                  MOVE.W      #$4CB9,$639A       MOVEM.W $00001234,D0/A4/A7
00001AFE  31FC 9001 639C           602                  MOVE.W      #$9001,$639C
00001B04  31FC 0000 639E           603                  MOVE.W      #$0000,$639E
00001B0A  31FC 1234 63A0           604                  MOVE.W      #$1234,$63A0
00001B10  31FC 4CBC 63A2           605                  MOVE.W      #$4CBC,$63A2       MOVEM.W #$AAAA,xxx --- DATA, INVALID
00001B16  31FC AAAA 63A4           606                  MOVE.W      #$AAAA,$63A4
00001B1C  31FC AAAA 63A6           607                  MOVE.W      #$AAAA,$63A6
00001B22                           608                  
00001B22                           609                  *** MEMORY TO REGISTER *** .L
00001B22  31FC 4CC5 63A8           610                  MOVE.W      #$4CC5,$63A8       MOVEM.W D5,D1 --- DATA, INVALID
00001B28  31FC AAAA 63AA           611                  MOVE.W      #$AAAA,$63AA
00001B2E  31FC 4CCD 63AC           612                  MOVE.W      #$4CCD,$63AC       MOVEM.W A5,D1 --- DATA, INVALID
00001B34  31FC AAAA 63AE           613                  MOVE.W      #$AAAA,$63AE
00001B3A  31FC 4CD5 63B0           614                  MOVE.W      #$4CD5,$63B0       MOVEM.W (A5),D1
00001B40  31FC 0002 63B2           615                  MOVE.W      #$0002,$63B2
00001B46  31FC 4CDD 63B4           616                  MOVE.W      #$4CDD,$63B4       MOVEM.W (A5)+,D6/A6
00001B4C  31FC 4040 63B6           617                  MOVE.W      #$4040,$63B6
00001B52  31FC 4CE5 63B8           618                  MOVE.W      #$4CE5,$63B8       MOVEM.W -(A5),D1/A1 --- DATA, INVALID
00001B58  31FC AAAA 63BA           619                  MOVE.W      #$AAAA,$63BA
00001B5E  31FC 4CED 63BC           620                  MOVE.W      #$4CED,$63BC       DATA, INVALID
00001B64  31FC 4CF5 63BE           621                  MOVE.W      #$4CF5,$63BE       DATA, INVALID
00001B6A  31FC 4CF8 63C0           622                  MOVE.W      #$4CF8,$63C0       MOVEM.W $1234,D1/D6/A3
00001B70  31FC 0842 63C2           623                  MOVE.W      #$0842,$63C2
00001B76  31FC 1234 63C4           624                  MOVE.W      #$1234,$63C4
00001B7C  31FC 4CF9 63C6           625                  MOVE.W      #$4CF9,$63C6       MOVEM.W $00001234,D0/A4/A7
00001B82  31FC 9001 63C8           626                  MOVE.W      #$9001,$63C8
00001B88  31FC 0000 63CA           627                  MOVE.W      #$0000,$63CA
00001B8E  31FC 1234 63CC           628                  MOVE.W      #$1234,$63CC
00001B94  31FC 4CFC 63CE           629                  MOVE.W      #$4CFC,$63CE       MOVEM.W #$AAAA,xxx --- DATA, INVALID
00001B9A  31FC AAAA 63D0           630                  MOVE.W      #$AAAA,$63D0
00001BA0  31FC AAAA 63D2           631                  MOVE.W      #$AAAA,$63D2
00001BA6                           632                  
00001BA6                           633                  * ADD & ADDA TESTS
00001BA6                           634                  *******************************************************
00001BA6                           635                  * <EA> -> Dn ADD Tests
00001BA6                           636                  *
00001BA6                           637                  * ADD.B - 000
00001BA6  31FC DA03 63D4           638                  MOVE.W      #$DA03,$63D4        ADD.B D3,D5
00001BAC  31FC DA0B 63D6           639                  MOVE.W      #$DA0B,$63D6        ADD.B A3,D5
00001BB2  31FC DA13 63D8           640                  MOVE.W      #$DA13,$63D8        ADD.B (A3),D5
00001BB8  31FC DA1B 63DA           641                  MOVE.W      #$DA1B,$63DA        ADD.B (A3)+,D5
00001BBE  31FC DA23 63DC           642                  MOVE.W      #$DA23,$63DC        ADD.B -(A3),D5
00001BC4  31FC DA2B 63DE           643                  MOVE.W      #$DA2B,$63DE        DATA
00001BCA  31FC DA33 63E0           644                  MOVE.W      #$DA33,$63E0        DATA
00001BD0  31FC DA38 63E2           645                  MOVE.W      #$DA38,$63E2        ADD.B $AAAA,D5
00001BD6  31FC AAAA 63E4           646                  MOVE.W      #$AAAA,$63E4
00001BDC  31FC DA39 63E6           647                  MOVE.W      #$DA39,$63E6        ADD.B $AAAAAAAA,D5
00001BE2  31FC AAAA 63E8           648                  MOVE.W      #$AAAA,$63E8
00001BE8  31FC AAAA 63EA           649                  MOVE.W      #$AAAA,$63EA
00001BEE  31FC DA3C 63EC           650                  MOVE.W      #$DA3C,$63EC        ADD.B #$AA,D5
00001BF4  31FC AAAA 63EE           651                  MOVE.W      #$AAAA,$63EE
00001BFA  31FC AAAA 63F0           652                  MOVE.W      #$AAAA,$63F0        DATA
00001C00                           653                     
00001C00                           654                  * ADD.W - 001
00001C00  31FC DA43 63F2           655                  MOVE.W      #$DA43,$63F2        ADD.W D3,D5
00001C06  31FC DA4B 63F4           656                  MOVE.W      #$DA4B,$63F4        ADD.W A3,D5
00001C0C  31FC DA53 63F6           657                  MOVE.W      #$DA53,$63F6        ADD.W (A3),D5
00001C12  31FC DA5B 63F8           658                  MOVE.W      #$DA5B,$63F8        ADD.W (A3)+,D5
00001C18  31FC DA63 63FA           659                  MOVE.W      #$DA63,$63FA        ADD.W -(A3),D5
00001C1E  31FC DA6B 63FC           660                  MOVE.W      #$DA6B,$63FC        DATA
00001C24  31FC DA73 63FE           661                  MOVE.W      #$DA73,$63FE        DATA
00001C2A  31FC DA78 6400           662                  MOVE.W      #$DA78,$6400        ADD.W $AAAA,D5
00001C30  31FC AAAA 6402           663                  MOVE.W      #$AAAA,$6402
00001C36  31FC DA79 6404           664                  MOVE.W      #$DA79,$6404        ADD.W $AAAAAAAA,D5
00001C3C  31FC AAAA 6406           665                  MOVE.W      #$AAAA,$6406
00001C42  31FC AAAA 6408           666                  MOVE.W      #$AAAA,$6408
00001C48  31FC DA7C 640A           667                  MOVE.W      #$DA7C,$640A        ADD.W #$AAAA,D5
00001C4E  31FC AAAA 640C           668                  MOVE.W      #$AAAA,$640C
00001C54  31FC AAAA 640E           669                  MOVE.W      #$AAAA,$640E        DATA
00001C5A                           670                  
00001C5A                           671                  * ADD.L - 010
00001C5A  31FC DA83 6410           672                  MOVE.W      #$DA83,$6410        ADD.L D3,D5
00001C60  31FC DA8B 6412           673                  MOVE.W      #$DA8B,$6412        ADD.L A3,D5
00001C66  31FC DA93 6414           674                  MOVE.W      #$DA93,$6414        ADD.L (A3),D5
00001C6C  31FC DA9B 6416           675                  MOVE.W      #$DA9B,$6416        ADD.L (A3)+,D5
00001C72  31FC DAA3 6418           676                  MOVE.W      #$DAA3,$6418        ADD.L -(A3),D5
00001C78  31FC DAAB 641A           677                  MOVE.W      #$DAAB,$641A        DATA
00001C7E  31FC DAB3 641C           678                  MOVE.W      #$DAB3,$641C        DATA
00001C84  31FC DAB8 641E           679                  MOVE.W      #$DAB8,$641E        ADD.L $AAAA,D5
00001C8A  31FC AAAA 6420           680                  MOVE.W      #$AAAA,$6420
00001C90  31FC DAB9 6422           681                  MOVE.W      #$DAB9,$6422        ADD.L $AAAAAAAA,D5
00001C96  31FC AAAA 6424           682                  MOVE.W      #$AAAA,$6424
00001C9C  31FC AAAA 6426           683                  MOVE.W      #$AAAA,$6426
00001CA2  31FC DABC 6428           684                  MOVE.W      #$DABC,$6428        ADD.L #$AAAAAAAA,D5
00001CA8  31FC AAAA 642A           685                  MOVE.W      #$AAAA,$642A
00001CAE  31FC AAAA 642C           686                  MOVE.W      #$AAAA,$642C
00001CB4                           687                  
00001CB4                           688                  *******************************************************
00001CB4                           689                  * Dn -> <EA> Tests
00001CB4                           690                  
00001CB4                           691                  * ADD.B - 100
00001CB4  31FC DB03 642E           692                  MOVE.W      #$DB03,$642E        ADD.B D5,D3 --- DATA, INVALID
00001CBA  31FC DB0B 6430           693                  MOVE.W      #$DB0B,$6430        ADD.B D5,A3 --- DATA, INVALID
00001CC0  31FC DB13 6432           694                  MOVE.W      #$DB13,$6432        ADD.B D5,(A3)
00001CC6  31FC DB1B 6434           695                  MOVE.W      #$DB1B,$6434        ADD.B D5,(A3)+
00001CCC  31FC DB23 6436           696                  MOVE.W      #$DB23,$6436        ADD.B D5,-(A3)
00001CD2  31FC DB2B 6438           697                  MOVE.W      #$DB2B,$6438        DATA, INVALID
00001CD8  31FC DB33 643A           698                  MOVE.W      #$DB33,$643A        DATA, INVALID
00001CDE  31FC DB38 643C           699                  MOVE.W      #$DB38,$643C        ADD.B D5,$AAAA
00001CE4  31FC AAAA 643E           700                  MOVE.W      #$AAAA,$643E
00001CEA  31FC DB39 6440           701                  MOVE.W      #$DB39,$6440        ADD.B D5,$AAAAAAAA
00001CF0  31FC AAAA 6442           702                  MOVE.W      #$AAAA,$6442
00001CF6  31FC AAAA 6444           703                  MOVE.W      #$AAAA,$6444
00001CFC  31FC DB3C 6446           704                  MOVE.W      #$DB3C,$6446        ADD.B D5,$AA --- DATA, INVALID
00001D02  31FC AAAA 6448           705                  MOVE.W      #$AAAA,$6448        DATA, INVALID
00001D08  31FC AAAA 644A           706                  MOVE.W      #$AAAA,$644A        DATA, INVALID
00001D0E                           707                  
00001D0E                           708                  * ADD.W - 101
00001D0E  31FC DB43 644C           709                  MOVE.W      #$DB43,$644C        ADD.W D5,D3 --- DATA, INVALID
00001D14  31FC DB4B 644E           710                  MOVE.W      #$DB4B,$644E        ADD.W D5,A3 --- DATA, INVALID
00001D1A  31FC DB53 6450           711                  MOVE.W      #$DB53,$6450        ADD.W D5,(A3)
00001D20  31FC DB5B 6452           712                  MOVE.W      #$DB5B,$6452        ADD.W D5,(A3)+
00001D26  31FC DB63 6454           713                  MOVE.W      #$DB63,$6454        ADD.W D5,-(A3)
00001D2C  31FC DB6B 6456           714                  MOVE.W      #$DB6B,$6456        DATA, INVALID
00001D32  31FC DB73 6458           715                  MOVE.W      #$DB73,$6458        DATA, INVALID
00001D38  31FC DB78 645A           716                  MOVE.W      #$DB78,$645A        ADD.W D5,$AAAA
00001D3E  31FC AAAA 645C           717                  MOVE.W      #$AAAA,$645C
00001D44  31FC DB79 645E           718                  MOVE.W      #$DB79,$645E        ADD.W D5,$AAAAAAAA
00001D4A  31FC AAAA 6460           719                  MOVE.W      #$AAAA,$6460
00001D50  31FC AAAA 6462           720                  MOVE.W      #$AAAA,$6462        
00001D56  31FC DB7C 6464           721                  MOVE.W      #$DB7C,$6464        ADD.W D5,#$AAAA
00001D5C  31FC AAAA 6466           722                  MOVE.W      #$AAAA,$6466
00001D62  31FC AAAA 6468           723                  MOVE.W      #$AAAA,$6468        DATA, INVALID
00001D68                           724                  
00001D68                           725                  * ADD.L - 110
00001D68  31FC DB83 646A           726                  MOVE.W      #$DB83,$646A        ADD.L D5,D3 --- DATA, INVALID
00001D6E  31FC DB8B 646C           727                  MOVE.W      #$DB8B,$646C        ADD.L D5,A3 --- DATA, INVALID
00001D74  31FC DB93 646E           728                  MOVE.W      #$DB93,$646E        ADD.L D5,(A3)
00001D7A  31FC DB9B 6470           729                  MOVE.W      #$DB9B,$6470        ADD.L D5,(A3)+
00001D80  31FC DBA3 6472           730                  MOVE.W      #$DBA3,$6472        ADD.L D5,-(A3)
00001D86  31FC DBAB 6474           731                  MOVE.W      #$DBAB,$6474        DATA, INVALID
00001D8C  31FC DBB3 6476           732                  MOVE.W      #$DBB3,$6476        DATA, INVALID
00001D92  31FC DBB8 6478           733                  MOVE.W      #$DBB8,$6478        ADD.L D5,$AAAA
00001D98  31FC AAAA 647A           734                  MOVE.W      #$AAAA,$647A
00001D9E  31FC DBBA 647C           735                  MOVE.W      #$DBBA,$647C        ADD.L D5,$AAAAAAAA
00001DA4  31FC AAAA 647E           736                  MOVE.W      #$AAAA,$647E
00001DAA  31FC AAAA 6480           737                  MOVE.W      #$AAAA,$6480
00001DB0  31FC DBBC 6482           738                  MOVE.W      #$DBBC,$6482        ADD.L D5,#$AAAAAAAA
00001DB6  31FC AAAA 6484           739                  MOVE.W      #$AAAA,$6484
00001DBC  31FC AAAA 6486           740                  MOVE.W      #$AAAA,$6486
00001DC2                           741                  *******************************************************
00001DC2                           742          
00001DC2                           743                  *******************************************************
00001DC2                           744                  * MOVEA.L Tests
00001DC2  31FC 264A 6488           745                  MOVE.W      #$264A,$6488       MOVEA.L     A2,A3
00001DC8  31FC 2652 648A           746                  MOVE.W      #$2652,$648A       MOVEA.L     (A2),A3
00001DCE  31FC 2459 648C           747                  MOVE.W      #$2459,$648C       MOVEA.L     (A1)+,A2
00001DD4  31FC 2461 648E           748                  MOVE.W      #$2461,$648E       MOVEA.L     -(A1),A2
00001DDA  31FC 287C 6490           749                  MOVE.W      #$287C,$6490       MOVEA.L     #$xxxxxxxx,A4
00001DE0  31FC 1234 6492           750                  MOVE.W      #$1234,$6492       MOVEA.L       1234
00001DE6  31FC 5678 6494           751                  MOVE.W      #$5678,$6494       MOVEA.L           5678
00001DEC  31FC 267C 6496           752                  MOVE.W      #$267C,$6496       MOVEA.L     #$100,A3
00001DF2  31FC 0000 6498           753                  MOVE.W      #$0000,$6498       MOVEA.L     0000
00001DF8  31FC 0100 649A           754                  MOVE.W      #$0100,$649A       MOVEA.L         0100
00001DFE  31FC 2079 649C           755                  MOVE.W      #$2079,$649C       MOVEA.L     $xxxxxxxx,A0
00001E04  31FC 1234 649E           756                  MOVE.W      #$1234,$649E       MOVEA.L      1234
00001E0A  31FC 5678 64A0           757                  MOVE.W      #$5678,$64A0       MOVEA.L          5678
00001E10                           758                  
00001E10                           759                  *******************************************************
00001E10                           760                  * MOVEA.W Tests
00001E10  31FC 364A 64A2           761                  MOVE.W      #$364A,$64A2       MOVEA.W     A2,A3
00001E16  31FC 3652 64AC           762                  MOVE.W      #$3652,$64AC       MOVEA.W     (A2),A3
00001E1C  31FC 3459 64AE           763                  MOVE.W      #$3459,$64AE       MOVEA.W     (A1)+,A2
00001E22  31FC 3461 64B0           764                  MOVE.W      #$3461,$64B0       MOVEA.W     -(A1),A2
00001E28  31FC 367C 64B2           765                  MOVE.W      #$367C,$64B2       MOVEA.W     #$xxxx,A3
00001E2E  31FC 1234 64B4           766                  MOVE.W      #$1234,$64B4       MOVEA.W       1234                              
00001E34  31FC 3078 64B6           767                  MOVE.W      #$3078,$64B6       MOVEA.W     $xxxx,A0
00001E3A  31FC 1234 64B8           768                  MOVE.W      #$1234,$64B8       MOVEA.W      1234
00001E40                           769                  *******************************************************
00001E40                           770                         
00001E40                           771  ************************** END OF TESTING *******************************************************************
00001E40  4FF9 00008000            772                  LEA         STACK,SP            * load the stack
00001E46  4EB9 0000317C            773                  JSR         PRINT_INTRO         * print the program intro
00001E4C                           774  GET_START               
00001E4C  103C 000E                775                  MOVE.B      #14,D0
00001E50  43F9 00003BE5            776                  LEA         prompt_start,A1
00001E56  4E4F                     777                  TRAP #15                        ; prompt for starting address
00001E58                           778              
00001E58  103C 0002                779                  MOVE.B      #2,D0
00001E5C  43F9 00003C87            780                  LEA         input,A1
00001E62  4E4F                     781                  TRAP #15                        ; store user input
00001E64                           782              
00001E64  4EB9 00001F7C            783                  JSR         asciiToHexS         ; convert user input from start address to hex
00001E6A                           784                  
00001E6A  B2BC 00000000            785                  CMP.L       #0, D1              * check to see if asciiToHexS reported an error
00001E70  6600 01E4                786                  BNE         INPUT_ERROR             * find wthe error message is. print it and loop to GET_START
00001E74  2043                     787                  MOVE.L      D3, A0                  * get the hex address
00001E76                           788  
00001E76  2608                     789                  MOVE.L      A0,D3                   * put the start address in a data register
00001E78  0283 FFFFFFFE            790                  ANDI.L      #$FFFFFFFE,D3           * convert the address to an even number if it already isn't
00001E7E  2040                     791                  MOVEA.L     D0,A0                   * move the even address back to A0
00001E80                           792  
00001E80  123C 0003                793                  MOVE.B      #$03, D1                * set the error code
00001E84  B1FC 00000000            794                  CMP.L       #minaddress, A0         * check to see if start address is in bounds 
00001E8A  6D00 01CA                795                  BLT         INPUT_ERROR             * find error
00001E8E                           796  
00001E8E                           797  GET_END             
00001E8E  103C 000E                798                  MOVE.B      #14,D0
00001E92  43F9 00003C05            799                  LEA         prompt_end,A1
00001E98  4E4F                     800                  TRAP        #15                 ; prompt for ending address
00001E9A  4240                     801                  CLR         D0
00001E9C  103C 0002                802                  MOVE.B      #2,D0
00001EA0  43F9 00003C87            803                  LEA         input,A1
00001EA6  4E4F                     804                  TRAP        #15                 ; store user input
00001EA8  4EB9 00001FE6            805                  JSR         asciiToHexE         ; convert user input for end address to hex
00001EAE                           806                  
00001EAE  B2BC 00000000            807                  CMP.L       #0, D1              * check to see if asciiToHexE reported an error 
00001EB4  6600 01A0                808                  BNE         INPUT_ERROR         * error found. print it and loop to GET_START
00001EB8  2644                     809                  MOVE.L      D4, A3              * move end address to A3
00001EBA                           810                  
00001EBA  123C 0004                811                  MOVE.B      #$04, D1            * set the error code
00001EBE  B7FC 00FFFFFF            812                  CMP.L       #maxaddress, A3     * check if end address is in bounds
00001EC4  6E00 0190                813                  BGT         INPUT_ERROR         * find error
00001EC8                           814        
00001EC8  558B                     815                  SUBQ.L      #2, A3              * take away 2 bytes to test distance
00001ECA  123C 0002                816                  MOVE.B      #$02, D1            * set the error code
00001ECE  B68B                     817                  CMP.L       A3, D3              * check to see if end address is greater than start address
00001ED0  6E00 0184                818                  BGT         INPUT_ERROR         * find error
00001ED4  548B                     819                  ADDQ.L      #2, A3              * return A3 back to normal
00001ED6                           820                  
00001ED6  280B                     821                  MOVE.L      A3,D4               * put the end address in a data register
00001ED8  0284 FFFFFFFE            822                  ANDI.L      #$FFFFFFFE,D4       * convert the address to an even number if it already isn't
00001EDE                           823              
00001EDE  2243                     824                  MOVE.L      D3,A1               ; move the start address into A1
00001EE0  2443                     825                  MOVE.L      D3,A2               ; also move it into A2
00001EE2  2644                     826                  MOVE.L      D4,A3               ; move the ending address into A3
00001EE4  4280                     827                  CLR.L       D0
00001EE6  4281                     828                  CLR.L       D1
00001EE8  4282                     829                  CLR.L       D2
00001EEA  4283                     830                  CLR.L       D3
00001EEC  4284                     831                  CLR.L       D4
00001EEE  4285                     832                  CLR.L       D5
00001EF0  4286                     833                  CLR.L       D6
00001EF2  4287                     834                  CLR.L       D7                  ; clear all of the registers
00001EF4                           835                  
00001EF4  33FC 0000 00009000       836                  MOVE.W      #$0000,$00009000        ; set counter to 0
00001EFC  4BF9 000090A0            837                  LEA         $000090A0,A5            ; move the starting address of the output string to A1
00001F02  49F9 00009010            838                  LEA         $00009010,A4
00001F08  2C4D                     839                  MOVE.L      A5,A6               ; move the ending address of the output string here too (empty string)
00001F0A  6000 0002                840                  BRA         loop_start          ; start the loop
00001F0E                           841                  
00001F0E                           842  loop_start
00001F0E  BAF9 0000AAAA            843                  CMP.W       $AAAA,A5
00001F14  BAFC AAAA                844                  CMP.W       #$AAAA,A5
00001F18  B5CB                     845                  CMP.L       A3,A2               ; check to see if end is reached
00001F1A  6E00 166E                846                  BGT         exit                ; nothing left, exit program
00001F1E                           847                         
00001F1E  207C 00009000            848                  MOVE.L      #$00009000, A0          ; Move address of count into A0
00001F24  5250                     849                  ADD.W       #%01,(A0)           ; increment count by one
00001F26  0C50 001E                850                  CMP.W       #$001E,(A0)         ; check to see if count is 30
00001F2A  6700 15F8                851                  BEQ         next_page           ; if over 30, go to next page
00001F2E                           852                  
00001F2E  3012                     853                  MOVE.W      (A2),D0             ; MOVEs INSTRUCTION in A1 to D0
00001F30  4EB9 0000268E            854                  JSR         print_add           ; print the address
00001F36  4EB9 00002110            855                  JSR         opcode              ; decode the opcode
00001F3C                           856              
00001F3C  6000 1612                857                  BRA         loop_exit
00001F40                           858                  
00001F40                           859  ******************************* CLEAR REGISTERS **************************
00001F40                           860  * clearTempVars  - clears all of the temporary variables starting at $00009010
00001F40                           861  * clearOutputStr - clears all of the values starting at $000090A0
00001F40  207C 00009010            862  clearTempVars   MOVE.L      #$00009010,A0           ; move the first address to A0
00001F46  6000 0002                863                  BRA         CTV_loop            ; begin the loop
00001F4A                           864                 
00001F4A  0C90 FFFFFFFF            865  CTV_loop        CMP.L       #$FFFFFFFF,(A0)     ; check if the values at address A0 are all Fs
00001F50  6700 000A                866                  BEQ         CTV_exit            ; if they are, exit
00001F54  20FC FFFFFFFF            867                  MOVE.L      #$FFFFFFFF,(A0)+    ; otherwise, set them all to Fs and increment A0
00001F5A  60EE                     868                  BRA         CTV_loop            ; loop again
00001F5C                           869                  
00001F5C  4E75                     870  CTV_exit        RTS                             ; return to where clearTempVars was called
00001F5E                           871  
00001F5E  207C 000090A0            872  clearOutputStr  MOVE.L      #$000090A0,A0           ; move the first address to A0
00001F64  6000 0002                873                  BRA         COS_loop            ; begin the loop
00001F68                           874                  
00001F68  0C90 FFFFFFFF            875  COS_loop        CMP.L       #$FFFFFFFF,(A0)     ; check if the values at address A0 are all Fs
00001F6E  6700 000A                876                  BEQ         COS_exit            ; if they are, exit
00001F72  20FC FFFFFFFF            877                  MOVE.L      #$FFFFFFFF,(A0)+    ; otherwise, set them all to Fs and increment A0
00001F78  60EE                     878                  BRA         COS_loop            ; loop again
00001F7A                           879                  
00001F7A  4E75                     880  COS_exit        RTS                             ; return to where clearOutputStr was called
00001F7C                           881                  
00001F7C                           882  
00001F7C                           883  ******************************* ASCII TO HEX *****************************
00001F7C                           884  * Convert starting address from ASCII to Hex, stores in D3
00001F7C                           885  * D0 = temp value, D1 = length of string, D2 = counter, D3 = ret val
00001F7C                           886  * A1 = memory location of beginning of the string
00001F7C  B23C 0008                887  asciiToHexS     CMP.B       #8,D1               ; check that length is <= 8
00001F80  6E00 00CE                888                  BGT         INVALID_ADD
00001F84  B23C 0000                889                  CMP.B       #0,D1               ; check that length is > 0
00001F88  6F00 00C6                890                  BLE         INVALID_ADD
00001F8C  4283                     891                  CLR.L       D3                  ; clear return value
00001F8E  5301                     892                  SUBQ.B      #1,D1               ; subtract 1 from the counter
00001F90                           893              
00001F90  E99B                     894  ATHS_loop       ROL.L       #4,D3               ; shift bits left by 4
00001F92  1019                     895                  MOVE.B      (A1)+,D0            ; copy next byte from memory to convert
00001F94  B03C 0039                896                  CMP.B       #$39,D0             ; if the value is < 39 its a number
00001F98  6E00 0012                897                  BGT         ATHS_letter         ; its its not a number process it as a letter
00001F9C  B03C 0030                898                  CMP.B       #$30,D0             ; if the value is < 30 its invalid
00001FA0  6D00 00AE                899                  BLT         INVALID_ADD
00001FA4  0400 0030                900                  SUBI.B      #$30,D0             ; its a valid number, subtract 30
00001FA8  6000 0032                901                  BRA         ATHS_done
00001FAC                           902              
00001FAC  B03C 0066                903  ATHS_letter     CMP.B       #$66,D0             ; if the value is > 66 its invalid
00001FB0  6E00 009E                904                  BGT         INVALID_ADD
00001FB4  B03C 0061                905                  CMP.B       #$61,D0             ; if the value is >= 61 its lowercase
00001FB8  6C00 001A                906                  BGE         ATHS_lower          ; process it as a lowercase letter
00001FBC  B03C 0046                907                  CMP.B       #$46,D0             ; if the value is less than 46 its invalid
00001FC0  6E00 1DC5                908                  BGT         invalidAdd
00001FC4  B03C 0041                909                  CMP.B       #$41,D0             ; if the value is less than 41 its invalid
00001FC8  6D00 0086                910                  BLT         INVALID_ADD
00001FCC  0400 0037                911                  SUBI.B      #$37,D0             ; valid letter, subtract 37
00001FD0  6000 000A                912                  BRA         ATHS_done
00001FD4                           913              
00001FD4  0400 0057                914  ATHS_lower      SUBI.B      #$57,D0             ; convert lowercase letter to hex
00001FD8  6000 0002                915                  BRA         ATHS_done
00001FDC                           916              
00001FDC  8680                     917  ATHS_done       OR.L        D0,D3               ; OR the result to the retVal
00001FDE  51C9 FFB0                918                  DBF         D1,ATHS_loop        ; decrement counter and loop while they're > 0
00001FE2  4281                     919                  CLR.L D1                        ; done
00001FE4  4E75                     920                  RTS
00001FE6                           921              
00001FE6                           922  * Convert ending address from ASCII to Hex, stores in D4
00001FE6                           923  * D0 = temp value, D1 = length of string, D2 = counter, D4 = ret val
00001FE6                           924  * A1 = memory location of beginning of the string
00001FE6  B23C 0008                925  asciiToHexE     CMP.B       #8,D1               ; check that length is <= 8
00001FEA  6E00 0064                926                  BGT         INVALID_ADD
00001FEE  B23C 0000                927                  CMP.B       #0,D1               ; check that length is > 0
00001FF2  6F00 005C                928                  BLE         INVALID_ADD
00001FF6  4284                     929                  CLR.L       D4                  ; clear return value
00001FF8  5301                     930                  SUBQ.B      #1,D1               ; subtract 1 from the counter
00001FFA                           931              
00001FFA  E99C                     932  ATHE_loop       ROL.L       #4,D4               ; shift bits left by 4
00001FFC  1019                     933                  MOVE.B      (A1)+,D0            ; copy next byte from memory to convert
00001FFE  B03C 0039                934                  CMP.B       #$39,D0             ; if the value is < 39 its a number
00002002  6E00 0012                935                  BGT         ATHE_letter         ; its its not a number process it as a letter
00002006  B03C 0030                936                  CMP.B       #$30,D0             ; if the value is < 30 its invalid
0000200A  6D00 0044                937                  BLT         INVALID_ADD
0000200E  0400 0030                938                  SUBI.B      #$30,D0             ; its a valid number, subtract 30
00002012  6000 0032                939                  BRA         ATHE_done
00002016                           940              
00002016  B03C 0066                941  ATHE_letter     CMP.B       #$66,D0             ; if the value is > 66 its invalid
0000201A  6E00 0034                942                  BGT         INVALID_ADD
0000201E  B03C 0061                943                  CMP.B       #$61,D0             ; if the value is >= 61 its lowercase
00002022  6C00 001A                944                  BGE         ATHE_lower          ; process it as a lowercase letter
00002026  B03C 0046                945                  CMP.B       #$46,D0             ; if the value is less than 46 its invalid
0000202A  6E00 0024                946                  BGT         INVALID_ADD
0000202E  B03C 0041                947                  CMP.B       #$41,D0             ; if the value is less than 41 its invalid
00002032  6D00 001C                948                  BLT         INVALID_ADD
00002036  0400 0037                949                  SUBI.B      #$37,D0             ; valid letter, subtract 37
0000203A  6000 000A                950                  BRA         ATHE_done
0000203E                           951              
0000203E  0400 0057                952  ATHE_lower      SUBI.B      #$57,D0             ; convert lowercase letter to hex
00002042  6000 0002                953                  BRA         ATHE_done
00002046                           954              
00002046  8880                     955  ATHE_done       OR.L        D0,D4               ; OR the result to the retVal
00002048  51C9 FFB0                956                  DBF         D1,ATHE_loop        ; decrement counter and loop while they're > 0
0000204C  4281                     957                  CLR.L       D1                  ; done
0000204E  4E75                     958                  RTS
00002050                           959                  
00002050                           960  INVALID_ADD
00002050  123C 0001                961                  MOVE.B      #$01,D1             * Return error in D1 (0 = success) 
00002054  4E75                     962                  RTS               
00002056                           963  *******************************************************************************************
00002056                           964  * INPUT_ERROR 
00002056                           965  * Determines what error message to print based on what D1 is before jumping here       
00002056                           966  * D1 = Error code
00002056                           967  *
00002056                           968  
00002056                           969  * compare error codes to see what type of error was caught
00002056                           970  INPUT_ERROR
00002056  B23C 0001                971                  CMP.B       #%01,D1  
0000205A  6700 0024                972                  BEQ E1                      * got to type 1 error
0000205E                           973  
0000205E  B23C 0002                974                  CMP.B       #%10,D1 
00002062  6700 0026                975                  BEQ         E2              * go to type 2 error
00002066                           976      
00002066  B23C 0003                977                  CMP.B       #%11,D1
0000206A  6700 0034                978                  BEQ E3                      * go to type 3 error    
0000206E                           979  
0000206E  B27C 0004                980                  CMP.W       #%100,D1
00002072  6700 0036                981                  BEQ E4                      * go to type 4 error
00002076                           982  
00002076  43F9 00003A7E            983                  LEA         ERROR_STR, A1   * get error message
0000207C  6000 0036                984                  BRA         PRINT_ERROR     * print default error and go to GET_START
00002080                           985  
00002080                           986  * Address entered was not valid 
00002080                           987  E1  
00002080  43F9 00003AA2            988                  LEA         ERROR_INVALID_ADD_STR, A1   * load error string
00002086  6000 002C                989                  BRA         PRINT_ERROR                 * print invalid address message
0000208A                           990  
0000208A                           991  * Start and end address are less than 2 bits apart, or start address is greater than end address    
0000208A                           992  E2  
0000208A  43F9 00003BA0            993                  LEA         ERROR_SGREATER_STR, A1      * load error string
00002090  B644                     994                  CMP         D4,D3                       * check to see if start address is greater than end address
00002092  6E00 0020                995                  BGT         PRINT_ERROR                 * print start is greater than end message
00002096  43F9 00003AC5            996                  LEA         ERROR_2BYTE_STR, A1         * load error string
0000209C  6000 0016                997                  BRA         PRINT_ERROR                 * print less than 2 bits apart message
000020A0                           998  
000020A0                           999  * the start address is less than the minimum address bound  
000020A0                          1000  E3      
000020A0  43F9 00003B13           1001                  LEA         ERROR_SBOUND_STR, A1        * load error string 
000020A6  6000 000C               1002                  BRA         PRINT_ERROR                 * display the error message
000020AA                          1003  
000020AA                          1004  * the end address is greater than the maximum bound 
000020AA                          1005  E4      
000020AA  43F9 00003B59           1006                  LEA         ERROR_EBOUND_STR, A1        * load error string
000020B0  6000 0002               1007                  BRA         PRINT_ERROR                 * print the error message
000020B4                          1008  
000020B4                          1009  * print out the error message that was loaded in on of the error types  
000020B4                          1010  PRINT_ERROR
000020B4  103C 000D               1011                  MOVE.B      #13, D0                     * print the error message                   
000020B8  4E4F                    1012                  TRAP        #15                     
000020BA  6000 FD90               1013                  BRA         GET_START                   * go to GET_START
000020BE                          1014  ******************************* HEX TO ASCII *****************************
000020BE                          1015  * Convert starting address from Hex to Ascii, stores in A0
000020BE                          1016  * D0 = value to convert, D1 = number of bytes to process, A0 = retval
000020BE                          1017  
000020BE  0281 000000FF           1018  HEXTOASCII      ANDI.L      #$000000FF,D1       ; get the byte
000020C4  B23C 0004               1019                  CMP.B       #4,D1
000020C8  6E00 0042               1020                  BGT         HTA_error           ; error if > 4 bytes
000020CC  B23C 0000               1021                  CMP.B       #0,D1
000020D0  6F00 003A               1022                  BLE         HTA_error           ; error if <= 0 bytes
000020D4  48E7 B000               1023                  MOVEM.L     D0/D2-D3,-(A7)
000020D8  E399                    1024                  ROL.L       #1,D1
000020DA  5381                    1025                  SUBQ.L      #1,D1
000020DC  2601                    1026                  MOVE.L      D1,D3
000020DE                          1027                  
000020DE  2400                    1028  HTA_loop        MOVE.L      D0,D2
000020E0  0202 000F               1029                  ANDI.B      #%00001111,D2
000020E4  B43C 0009               1030                  CMP.B       #9,D2
000020E8  6E00 000A               1031                  BGT         HTA_letter
000020EC  0642 0030               1032                  ADDI        #48,D2
000020F0  6000 0006               1033                  BRA         HTA_next
000020F4                          1034                  
000020F4  0642 0037               1035  HTA_letter      ADDI        #55,D2
000020F8                          1036  
000020F8  1F02                    1037  HTA_next        MOVE.B      D2,-(A7)
000020FA  E898                    1038                  ROR.L       #4,D0
000020FC  51C9 FFE0               1039                  DBF         D1,HTA_loop
00002100                          1040                  
00002100  10DF                    1041  HTA_string      MOVE.B      (A7)+,(A0)+
00002102  51CB FFFC               1042                  DBF         D3,HTA_string
00002106                          1043                  
00002106  4CDF 000D               1044                  MOVEM.L     (A7)+,D0/D2-D3
0000210A                          1045                  
0000210A  4E75                    1046                  RTS
0000210C                          1047                  
0000210C  6000 05BC               1048  HTA_error       BRA         op_DATA
00002110                          1049  
00002110                          1050  
00002110                          1051  
00002110                          1052  
00002110                          1053  
00002110                          1054  ******************************** OPCODE **********************************
00002110  41F9 0000214E           1055  opcode          LEA         JUMPTABLE,A0        ; load the jump table into A0
00002116  4EB9 0000212E           1056                  JSR         OC_decode           ; decode the opcode
0000211C  4281                    1057                  CLR.L       D1                  ; clear D1
0000211E  2200                    1058                  MOVE.L      D0,D1               ; move instruction into D1
00002120  143C 000C               1059                  MOVE.B      #12,D2              ; load the value 12 into D2
00002124                          1060              
00002124                          1061                         
00002124  E46F                    1062                  LSR.W       D2,D7               ; shift the original operation right by 12 bits
00002126  CEFC 0006               1063                  MULU        #6,D7               ; multiply the new value in D7 by 6
0000212A  4EB0 7000               1064                  JSR         00(A0,D7)           ; find the corresponding code in the jump table
0000212E                          1065              
0000212E  3200                    1066  OC_decode       MOVE.W      D0,D1               ; move the original operation into D1
00002130  3E00                    1067                  MOVE.W      D0,D7               ; also move it into D7               Effective Addressing BITS
00002132  0241 003F               1068                  ANDI.W      #$003F,D1
00002136  1A01                    1069                  MOVE.B      D1,D5               ; move the last 6 bits into D5
00002138                          1070              
00002138  EC58                    1071                  ROR.W       #6,D0               ; rotate the operation to the right by 6 bits
0000213A  3200                    1072                  MOVE.W      D0,D1               ; move the new op value into D1      OPMODE BITS
0000213C  0241 0007               1073                  ANDI.W      #$0007,D1
00002140  1801                    1074                  MOVE.B      D1,D4               ; move these bits into D4
00002142                          1075              
00002142  E658                    1076                  ROR.W       #3,D0               ; rotate the operation to the right by 3 bits
00002144  3200                    1077                  MOVE.W      D0,D1               ; move the new op value into D1      Register bits
00002146  0241 0007               1078                  ANDI.W      #$0007,D1
0000214A  1601                    1079                  MOVE.B      D1,D3               ; move these bits into D3
0000214C                          1080                  
0000214C  4E75                    1081                  RTS
0000214E                          1082  
0000214E  4EF9 000021AE           1083  JUMPTABLE       JMP         op0000              ORI, BCLR
00002154  4EF9 000021EA           1084                  JMP         op0001              MOVE.B
0000215A  4EF9 000021FC           1085                  JMP         op0010              MOVE.L
00002160  4EF9 00002224           1086                  JMP         op0011              MOVE.W
00002166  4EF9 0000224C           1087                  JMP         op0100              NEG, NOP, LEA, JSR, RTS
0000216C  4EF9 0000229E           1088                  JMP         op0101              SUBQ
00002172  4EF9 000022A2           1089                  JMP         op0110              BRA
00002178  4EF9 000022E0           1090                  JMP         op0111
0000217E  4EF9 000022E4           1091                  JMP         op1000              OR.X
00002184  4EF9 000022F6           1092                  JMP         op1001              SUB, SUBA
0000218A  4EF9 00002308           1093                  JMP         op1010              
00002190  4EF9 0000230C           1094                  JMP         op1011
00002196  4EF9 0000232E           1095                  JMP         op1100
0000219C  4EF9 0000233A           1096                  JMP         op1101              ADD,ADDA
000021A2  4EF9 0000233E           1097                  JMP         op1110
000021A8  4EF9 00002350           1098                  JMP         op1111
000021AE                          1099  
000021AE                          1100  *-------------------------------------------------------------------------*
000021AE                          1101  * Inclusive Or, Test a Bit and Clear, Compare Immediate
000021AE                          1102  *-------------------------------------------------------------------------* 
000021AE                          1103  op0000          *ORI
000021AE  3212                    1104                  MOVE.W      (A2),D1             ; copy instruction into D1
000021B0  0241 FF00               1105                  ANDI        #$FF00,D1
000021B4  B27C 0000               1106                  CMP.W       #$0000,D1
000021B8  6700 08B6               1107                  BEQ         op_ORI              ; check bits 8-15 for ORI
000021BC                          1108              
000021BC                          1109                  *BCLR STATIC
000021BC  3212                    1110                  MOVE.W      (A2),D1
000021BE  0241 FFC0               1111                  ANDI        #$FFC0,D1
000021C2  B27C 0880               1112                  CMP.W       #$0880,D1
000021C6  6700 090A               1113                  BEQ         op_BCLR_STAT
000021CA                          1114                  
000021CA                          1115                  *BCLR DYNAMIC
000021CA  3212                    1116                  MOVE.W      (A2),D1             ; copy instruction into D1
000021CC  0241 01C0               1117                  ANDI        #$01C0,D1
000021D0  B27C 0180               1118                  CMP.W       #$0180,D1
000021D4  6700 099A               1119                  BEQ         op_BCLR_DYN         ; check bits 9-11 for BCLR
000021D8                          1120              
000021D8                          1121                  *CMPI
000021D8  3212                    1122                  MOVE.W      (A2),D1
000021DA  0241 FF00               1123                  ANDI        #%1111111100000000,D1
000021DE  B27C 0C00               1124                  CMP.W       #%0000110000000000,D1
000021E2  6700 0B2E               1125                  BEQ         op_CMPI             ; check bits 8-15 for CMPI
000021E6                          1126              
000021E6  6000 04E2               1127                  BRA         op_DATA
000021EA                          1128  
000021EA                          1129  *-------------------------------------------------------------------------*
000021EA                          1130  * Move Byte Opmode
000021EA                          1131  *-------------------------------------------------------------------------*
000021EA  4BF9 00003DFE           1132  op0001          LEA        MOVEB_STR,A5     * Load the MOVE.B string
000021F0  1C3C 0000               1133                  MOVE.B     #%00,D6          * Set the IM-DATA size code
000021F4  6000 0A02               1134                  BRA        op_MOVE          * Branch to general move op
000021F8                          1135                  
000021F8  6000 04D0               1136                  BRA        op_DATA
000021FC                          1137  
000021FC                          1138              
000021FC                          1139  *-------------------------------------------------------------------------*
000021FC                          1140  * Move Long  : MOVEA DOESN'T NEED EXTRA SPACING, ONLY TAB
000021FC                          1141  *            : MOVE NEEDS ONE EXTRA SPACE
000021FC                          1142  *-------------------------------------------------------------------------*            
000021FC                          1143  op0010          
000021FC                          1144                  *MOVEA.L
000021FC  4BF9 00003F47           1145                  LEA         MOVEAL_STR,A5
00002202  3012                    1146                  MOVE.W      (A2),D0             ; move operation for compare
00002204  3212                    1147                  MOVE.W      (A2),D1             ; move operation for flagging
00002206  0240 01C0               1148                  ANDI.W      #$01C0,D0
0000220A  B07C 0040               1149                  CMP.W       #$0040,D0
0000220E  6700 09B8               1150                  BEQ         op_MOVEA             ; Check for MOVEA.L               
00002212                          1151                  
00002212                          1152                  
00002212                          1153                  
00002212  4BF9 00003E18           1154                  LEA         MOVEL_STR,A5        * Load the MOVE.L string
00002218  1C3C 0001               1155                  MOVE.B      #%01,D6             * Set IM-DATA size code
0000221C  6000 09DA               1156                  BRA         op_MOVE             * Branch to general move op
00002220                          1157                  
00002220  6000 04A8               1158                  BRA         op_DATA
00002224                          1159  
00002224                          1160  *-------------------------------------------------------------------------*
00002224                          1161  * Move Word  : MOVEA DOESN'T NEED EXTRA SPACING, ONLY TAB
00002224                          1162  *            : MOVE NEEDS ONE EXTRA SPACE
00002224                          1163  *-------------------------------------------------------------------------*             
00002224                          1164  op0011          
00002224                          1165                  *MOVEA.W
00002224  4BF9 00003F55           1166                  LEA         MOVEAW_STR,A5
0000222A  3012                    1167                  MOVE.W      (A2),D0             ; move operation for compare
0000222C  3212                    1168                  MOVE.W      (A2),D1             ; move operation for flagging
0000222E  0240 01C0               1169                  ANDI.W      #$01C0,D0
00002232  B07C 0040               1170                  CMP.W       #$0040,D0
00002236  6700 0990               1171                  BEQ         op_MOVEA            ; Check for MOVEA.W  
0000223A                          1172                  
0000223A                          1173                  
0000223A                          1174  
0000223A  4BF9 00003E0B           1175                  LEA         MOVEW_STR,A5        * Load the MOVE.L string
00002240  1C3C 0002               1176                  MOVE.B      #%10,D6             * Set IM-DATA size code
00002244  6000 09B2               1177                  BRA         op_MOVE             * Branch to general move op
00002248                          1178  
00002248  6000 0480               1179                  BRA         op_DATA
0000224C                          1180  
0000224C                          1181  *-------------------------------------------------------------------------*
0000224C                          1182  * Negate, No Operation, Load Effective Address, Jump to Subroutine, 
0000224C                          1183  * Return from Subroutine, Move Multiple Registers
0000224C                          1184  *-------------------------------------------------------------------------*             
0000224C                          1185  op0100          *NEG
0000224C  3212                    1186                  MOVE.W      (A2),D1             ; move operation into D1
0000224E  0241 FF00               1187                  ANDI.W      #$FF00,D1
00002252  B27C 4400               1188                  CMP.W       #$4400,D1
00002256  6700 0A3E               1189                  BEQ         op_NEG              ; Check for NEG
0000225A                          1190              
0000225A                          1191                  *NOP
0000225A  3212                    1192                  MOVE.W      (A2),D1             ; move the original operation into D1
0000225C  B27C 4E71               1193                  CMP.W       #$4E71,D1               ; compare D0 and D1
00002260  6700 0456               1194                  BEQ         op_NOP              ; if they're equal, the operation is NOP
00002264                          1195              
00002264                          1196                  *LEA
00002264  3212                    1197                  MOVE.W      (A2),D1
00002266  0241 F1C0               1198                  ANDI.W      #$F1C0,D1
0000226A  B27C 41C0               1199                  CMP.W       #$41C0,D1
0000226E  6700 062C               1200                  BEQ         op_LEA
00002272                          1201  
00002272                          1202                  *JSR
00002272  3212                    1203                  MOVE.W      (A2),D1             ; move the original operation into D1 
00002274  0241 FFC0               1204                  ANDI.W      #$FFC0,D1
00002278  B27C 4E80               1205                  CMP.W       #$4E80,D1
0000227C  6700 0698               1206                  BEQ         op_JSR              ; check bits 6-15 to compare for JSR
00002280                          1207              
00002280                          1208                  *RTS
00002280  3212                    1209                  MOVE.W      (A2),D1             ; move the original operation into D1
00002282  B27C 4E75               1210                  CMP.W       #$4E75,D1
00002286  6700 0A4C               1211                  BEQ         op_RTS              ; check for RTS
0000228A                          1212                  
0000228A                          1213                  *MOVEM
0000228A  3212                    1214                  MOVE.W      (A2),D1             * move the original operation into D1
0000228C  3412                    1215                  MOVE.W      (A2),D2             * move operation into D2 for masking
0000228E  0241 0B80               1216                  ANDI.W      #$0B80,D1           * mask MOVEM defining bits
00002292  B27C 0880               1217                  CMP.W       #$0880,D1           * compare masked bits to MOVEM bits
00002296  6700 0A94               1218                  BEQ         op_MOVEM            * go to MOVEM decode
0000229A                          1219                  
0000229A                          1220              
0000229A  6000 042E               1221                  BRA         op_DATA             ; invalid
0000229E                          1222  *-------------------------------------------------------------------------*
0000229E                          1223  * SUBI - Subtracts the immediate data (1-8) from the destination
0000229E                          1224  * operand. Only Word and Long operations can be used with Adress Registers
0000229E                          1225  * (An).      
0000229E                          1226  *
0000229E                          1227  *-------------------------------------------------------------------------*
0000229E                          1228            
0000229E  6000 0E14               1229  op0101          BRA         op_SUBQ
000022A2                          1230  
000022A2                          1231  *-------------------------------------------------------------------------*
000022A2                          1232  * Branch Subroutine, Branch Always, Branch Conditionally
000022A2                          1233  *-------------------------------------------------------------------------*             
000022A2                          1234  op0110          *BRA
000022A2  4280                    1235                  CLR.L       D0
000022A4  3012                    1236                  MOVE.W      (A2),D0
000022A6  0240 FF00               1237                  ANDI.W      #$FF00,D0
000022AA  E088                    1238                  LSR.L       #8,D0                   ; separate the first 8 bits (bits 8-15)
000022AC  4281                    1239                  CLR.L       D1
000022AE  3212                    1240                  MOVE.W      (A2),D1
000022B0  0241 00FF               1241                  ANDI.W      #$00FF,D1
000022B4  B07C 0060               1242                  CMP.W       #$60,D0                 ; standard first 8 bits of a BRA op
000022B8  6700 045C               1243                  BEQ         op_BRA                  ; if they're equal, OP code is BRA
000022BC                          1244                                              
000022BC  B07C 0065               1245                  CMP.W       #$65,D0                 * Check for BCS
000022C0  6700 0530               1246                  BEQ         op_BCS
000022C4                          1247                  
000022C4  B07C 006C               1248                  CMP.W       #$6C,D0                 * Check for BGE
000022C8  6700 053E               1249                  BEQ         op_BGE
000022CC                          1250  
000022CC  B07C 006D               1251                  CMP.W       #$6D,D0                 * Check for BLT
000022D0  6700 054C               1252                  BEQ         op_BLT
000022D4                          1253                  
000022D4  B07C 0068               1254                  CMP.W       #$68,D0                 * Check for BVC
000022D8  6700 055A               1255                  BEQ         op_BVC
000022DC                          1256  
000022DC  6000 03EC               1257                  BRA         op_DATA                 * Otherwise branch to data
000022E0                          1258              
000022E0  6000 03E8               1259  op0111          BRA         op_DATA
000022E4                          1260  
000022E4                          1261  *-------------------------------------------------------------------------*
000022E4                          1262  * Inclusive Or, Signed Divide
000022E4                          1263  *-------------------------------------------------------------------------*
000022E4                          1264  op1000          * DIVS
000022E4  B87C 0007               1265                  CMP.W       #$07,D4                 * check the opmode field
000022E8  6700 006A               1266                  BEQ         op_DIVS                 * if it is 7, the operation is DIVS
000022EC                          1267  
000022EC                          1268                  * OR
000022EC  4EB9 000029B0           1269                  JSR         op_OR                   * otherwise the operation is OR
000022F2                          1270  
000022F2  6000 03D6               1271                  BRA         op_DATA
000022F6                          1272  
000022F6                          1273  *-------------------------------------------------------------------------*
000022F6                          1274  * Subtract
000022F6                          1275  *-------------------------------------------------------------------------*             
000022F6  3212                    1276  op1001          MOVE.W      (A2),D1                 Move operation into D1 
000022F8  0241 F000               1277                  ANDI.W      #$F000,D1               MASK for SUB operation
000022FC  B27C 9000               1278                  CMP.W       #$9000,D1
00002300  6700 0BBA               1279                  BEQ         op_SUB                  
00002304                          1280  
00002304                          1281                  
00002304  6000 03C4               1282                  BRA         op_DATA
00002308                          1283  
00002308                          1284  
00002308                          1285  
00002308                          1286  *-------------------------------------------------------------------------*
00002308                          1287  *
00002308                          1288  *-------------------------------------------------------------------------*
00002308                          1289              
00002308  6000 03C0               1290  op1010          BRA         op_DATA
0000230C                          1291  
0000230C                          1292  *-------------------------------------------------------------------------*
0000230C                          1293  * Exclusive Or, Compare
0000230C                          1294  *-------------------------------------------------------------------------*             
0000230C                          1295  op1011          
0000230C                          1296                  *EOR
0000230C  3012                    1297                  MOVE.W      (A2),D0             * copy op for compare
0000230E  0240 F100               1298                  ANDI.W      #$F100,D0           * grab identifier bits
00002312  B07C B100               1299                  CMP.W       #$B100,D0           * check to see if EOR
00002316  6700 0656               1300                  BEQ         op_EOR
0000231A                          1301                  
0000231A                          1302                  *CMP
0000231A  3012                    1303                  MOVE.W      (A2),D0             * copy op for compare
0000231C  3212                    1304                  MOVE.W      (A2),D1             * copy op for testing
0000231E  0240 F100               1305                  ANDI.W      #$F100,D0           * grab identifier bits
00002322  B07C B000               1306                  CMP.W       #$B000,D0           * check to see if CMP
00002326  6700 0522               1307                  BEQ         op_CMP              
0000232A                          1308  
0000232A  6000 039E               1309                  BRA         op_DATA
0000232E                          1310  
0000232E                          1311  *-------------------------------------------------------------------------*
0000232E                          1312  * Signed Multiply
0000232E                          1313  *-------------------------------------------------------------------------*            
0000232E  B83C 0007               1314  op1100          CMP.B       #$07,D4             * check for Signed Multiply Word
00002332  6700 002C               1315                  BEQ         op_MULS
00002336                          1316                  
00002336  6000 0392               1317                  BRA         op_DATA
0000233A                          1318                  
0000233A                          1319  *-------------------------------------------------------------------------*
0000233A                          1320  * Add Address, Add
0000233A                          1321  *-------------------------------------------------------------------------*            
0000233A  6000 0BC8               1322  op1101          BRA         op_ADD  Jump to Add operation
0000233E                          1323  
0000233E                          1324  *-------------------------------------------------------------------------*
0000233E                          1325  * Arithmetic Shift Left, Arithmetic Shift Right, Logical Shift Left, 
0000233E                          1326  * Logical Shift Right, Rotate Left, Rotate Right
0000233E                          1327  *-------------------------------------------------------------------------*            
0000233E  3012                    1328  op1110          MOVE.W      (A2),D0             * move original op into D0
00002340  0240 00C0               1329                  ANDI.W      #$00C0,D0           * mask to find if it's an EA shift
00002344  B07C 00C0               1330                  CMP.W       #$00C0,D0           * check for EA shifts
00002348  6700 0058               1331                  BEQ         SHIFT_ea
0000234C                          1332  
0000234C  6000 0078               1333                  BRA         SHIFT_no_ea
00002350                          1334                              
00002350  6000 0378               1335  op1111          BRA         op_DATA
00002354                          1336  
00002354                          1337  *************************************** OPS *************************************
00002354  4BF9 00003F30           1338  op_DIVS         LEA         DIVSW_STR,A5
0000235A  2CCD                    1339                  MOVE.L      A5,(A6)+            * add the operation to the output
0000235C  6000 000E               1340                  BRA         op_SIGN_MD
00002360                          1341                  
00002360  4BF9 00003F23           1342  op_MULS         LEA         MULSW_STR,A5        * add the operation to the output
00002366  2CCD                    1343                  MOVE.L      A5,(A6)+
00002368  6000 0002               1344                  BRA         op_SIGN_MD
0000236C                          1345                  
0000236C                          1346  op_SIGN_MD
0000236C  4EB9 0000323E           1347                  JSR         PRINT_ALI_1
00002372  3005                    1348                  MOVE.W      D5,D0               * copy the EA bits into D0
00002374  0240 0038               1349                  ANDI.W      #$38,D0             * Separate the mode
00002378  B07C 0008               1350                  CMP.W       #$08,D0             * check if its mode 1
0000237C  6700 034C               1351                  BEQ         op_DATA             * if it is, it's invalid
00002380                          1352                  
00002380  7C01                    1353                  MOVE.L      #$00000001,D6       * set the flag bit
00002382  544A                    1354                  ADD.W       #$02,A2             * increment the current operation address
00002384  4EB9 00003266           1355                  JSR         FIND_EAMODE         * create the left side of the operation
0000238A                          1356                  
0000238A  4EB9 0000321A           1357                  JSR         PRINT_COMMA
00002390                          1358                  
00002390  7800                    1359                  MOVE.L      #$00000000,D4       * Move our Dn mode to D4
00002392  4EB9 0000327A           1360                  JSR         FIND_OPMODE         * Now move to our mode
00002398                          1361                  
00002398  4EB9 00002C68           1362                  JSR         PRINT_init          * print the output string
0000239E                          1363                  
0000239E  6000 11B0               1364                  BRA         loop_exit           * address has been processed
000023A2                          1365  
000023A2                          1366  
000023A2  3012                    1367  SHIFT_ea        MOVE.W      (A2),D0             * move original op into D0
000023A4  3412                    1368                  MOVE.W      (A2),D2             * move the original op into D2
000023A6                          1369  
000023A6  0240 0E00               1370                  ANDI.W      #$0E00,D0           * mask to find out which shift it is
000023AA                          1371                  *LSL/LSR
000023AA  B07C 0200               1372                  CMP.W       #$0200,D0           * check for LSL/LSR
000023AE  6700 013E               1373                  BEQ         op_LS
000023B2                          1374                  
000023B2                          1375                  *ASL/ASR
000023B2  B07C 0000               1376                  CMP.W       #$0000,D0           * check for ASL/ASR
000023B6  6700 011E               1377                  BEQ         op_AS
000023BA                          1378                  
000023BA                          1379                  *ROL/ROR
000023BA  B07C 0600               1380                  CMP.W       #$0600,D0           * check for ROL/ROR
000023BE  6700 00FC               1381                  BEQ         op_RO
000023C2                          1382                  
000023C2  6000 0306               1383                  BRA         op_DATA
000023C6                          1384                  
000023C6  3012                    1385  SHIFT_no_ea     MOVE.W      (A2),D0             * move the original op into D0
000023C8  3212                    1386                  MOVE.W      (A2),D1             * move the original op into D1
000023CA  3412                    1387                  MOVE.W      (A2),D2             * move the original op into D2
000023CC  3612                    1388                  MOVE.W      (A2),D3             * move the original op into D3
000023CE  3812                    1389                  MOVE.W      (A2),D4             * move the original op into D4
000023D0  3A12                    1390                  MOVE.W      (A2),D5             * move the original op into D5
000023D2  3C12                    1391                  MOVE.W      (A2),D6
000023D4  C2BC 00000E00           1392                  AND.L       #$0E00,D1           * move the count/register into D1
000023DA  C4BC 00000018           1393                  AND.L       #$0018,D2           * move the type of shift to D2
000023E0  C8BC 00000020           1394                  AND.L       #$0020,D4           * move the i/r field into D4
000023E6  CABC 00000007           1395                  AND.L       #$0007,D5           * move the register into D5
000023EC  C6BC 000000C0           1396                  AND.L       #$00C0,D3           * move the size into D3
000023F2                          1397                  
000023F2  B47C 0000               1398                  CMP.W       #$0000,D2           * check for Arithmetic shift
000023F6  6700 0016               1399                  BEQ         AS_NO_EA
000023FA                          1400                  
000023FA  B47C 0018               1401                  CMP.W       #$0018,D2           * check for Rotate
000023FE  6700 004A               1402                  BEQ         RO_NO_EA
00002402                          1403                  
00002402  B47C 0008               1404                  CMP.W       #$0008,D2           * check for Logical shift
00002406  6700 007E               1405                  BEQ         LS_NO_EA
0000240A                          1406                  
0000240A  6000 02BE               1407                  BRA         op_DATA
0000240E                          1408                  
0000240E  4EB9 0000241C           1409  AS_NO_EA        JSR         AS_FIND_DIR
00002414  4EB9 00002508           1410                  JSR         SHIFT_IR
0000241A  4E75                    1411                  RTS
0000241C                          1412                  
0000241C  CCBC 00000100           1413  AS_FIND_DIR     AND.L       #$0100,D6           * move the direction into D2
00002422  BCBC 00000100           1414                  CMP.L       #$0100,D6           * check for left rotate
00002428  6700 000C               1415                  BEQ         op_ASL_STR
0000242C  BCBC 00000000           1416                  CMP.L       #$0000,D6           * check for right rotate
00002432  6700 000C               1417                  BEQ         op_ASR_STR
00002436                          1418  
00002436  4BF9 00003EDA           1419  op_ASL_STR      LEA         ASL_STR,A5
0000243C  2CCD                    1420                  MOVE.L      A5,(A6)+            * add the op to the string
0000243E  4E75                    1421                  RTS
00002440                          1422                  
00002440  4BF9 00003EE4           1423  op_ASR_STR      LEA         ASR_STR,A5
00002446  2CCD                    1424                  MOVE.L      A5,(A6)+            * add the op to the string
00002448  4E75                    1425                  RTS
0000244A                          1426  
0000244A  4EB9 00002458           1427  RO_NO_EA        JSR         RO_FIND_DIR
00002450  4EB9 00002508           1428                  JSR         SHIFT_IR
00002456  4E75                    1429                  RTS
00002458                          1430                  
00002458  CCBC 00000100           1431  RO_FIND_DIR     AND.L       #$0100,D6           * move the direction into D3
0000245E  BCBC 00000100           1432                  CMP.L       #$0100,D6           * check for left rotate
00002464  6700 000C               1433                  BEQ         op_ROL_STR
00002468  BCBC 00000000           1434                  CMP.L       #$0000,D6           * check for right rotate
0000246E  6700 000C               1435                  BEQ         op_ROR_STR
00002472                          1436  
00002472  4BF9 00003EC6           1437  op_ROL_STR      LEA         ROL_STR,A5
00002478  2CCD                    1438                  MOVE.L      A5,(A6)+            * add the op to the string
0000247A  4E75                    1439                  RTS
0000247C                          1440                  
0000247C  4BF9 00003ED0           1441  op_ROR_STR      LEA         ROR_STR,A5
00002482  2CCD                    1442                  MOVE.L      A5,(A6)+            * add the op to the string
00002484  4E75                    1443                  RTS
00002486                          1444  
00002486  4EB9 00002494           1445  LS_NO_EA        JSR         LS_FIND_DIR
0000248C  4EB9 00002508           1446                  JSR         SHIFT_IR
00002492  4E75                    1447                  RTS
00002494                          1448  
00002494  0246 0100               1449  LS_FIND_DIR     ANDI.W      #$0100,D6
00002498  BC7C 0100               1450                  CMP.W       #$0100,D6
0000249C  6700 000A               1451                  BEQ         op_LSL_STR
000024A0  BC7C 0000               1452                  CMP.W       #$0000,D6
000024A4  6700 000C               1453                  BEQ         op_LSR_STR
000024A8                          1454                  
000024A8  4BF9 00003E7F           1455  op_LSL_STR      LEA         LSL_STR,A5
000024AE  2CCD                    1456                  MOVE.L      A5,(A6)+            * add the op to the string
000024B0  4E75                    1457                  RTS
000024B2                          1458                  
000024B2  4BF9 00003E89           1459  op_LSR_STR      LEA         LSR_STR,A5
000024B8  2CCD                    1460                  MOVE.L      A5,(A6)+            * add the op to the string
000024BA  4E75                    1461                  RTS
000024BC                          1462                  
000024BC  3012                    1463  op_RO           MOVE.W      (A2),D0             * move the original op into D0
000024BE  3212                    1464                  MOVE.W      (A2),D1             * move the original op into D1
000024C0  3412                    1465                  MOVE.W      (A2),D2             * move the original op into D2
000024C2  3612                    1466                  MOVE.W      (A2),D3             * move the original op into D3
000024C4  3812                    1467                  MOVE.W      (A2),D4             * move the original op into D4
000024C6  3A12                    1468                  MOVE.W      (A2),D5             * move the original op into D5
000024C8  3C12                    1469                  MOVE.W      (A2),D6             * move the original op into D6
000024CA  4EB8 2458               1470                  JSR         RO_FIND_DIR         * find the direction of the operation
000024CE                          1471  
000024CE  4EB9 0000251E           1472                  JSR         op_SHIFT_EA
000024D4                          1473                  
000024D4  4E75                    1474                  RTS
000024D6                          1475                  
000024D6  3012                    1476  op_AS           MOVE.W      (A2),D0             * move the original op into D0
000024D8  3212                    1477                  MOVE.W      (A2),D1             * move the original op into D1
000024DA  3412                    1478                  MOVE.W      (A2),D2             * move the original op into D2
000024DC  3612                    1479                  MOVE.W      (A2),D3             * move the original op into D3
000024DE  3812                    1480                  MOVE.W      (A2),D4             * move the original op into D4
000024E0  3A12                    1481                  MOVE.W      (A2),D5             * move the original op into D5
000024E2  4EB8 241C               1482                  JSR         AS_FIND_DIR         * find the direction of the operation
000024E6                          1483                 
000024E6  4EB9 0000251E           1484                  JSR         op_SHIFT_EA
000024EC                          1485                  
000024EC  4E75                    1486                  RTS
000024EE                          1487                  
000024EE  3012                    1488  op_LS           MOVE.W      (A2),D0             * move the original op into D0
000024F0  3212                    1489                  MOVE.W      (A2),D1             * move the original op into D1
000024F2  3412                    1490                  MOVE.W      (A2),D2             * move the original op into D2
000024F4  3612                    1491                  MOVE.W      (A2),D3             * move the original op into D3
000024F6  3812                    1492                  MOVE.W      (A2),D4             * move the original op into D4
000024F8  3A12                    1493                  MOVE.W      (A2),D5             * move the original op into D5
000024FA  3C12                    1494                  MOVE.W      (A2),D6
000024FC  4EB8 2494               1495                  JSR         LS_FIND_DIR         * find the direction of the operation
00002500                          1496                 
00002500  4EB9 0000251E           1497                  JSR         op_SHIFT_EA
00002506                          1498                  
00002506  4E75                    1499                  RTS
00002508                          1500              
00002508                          1501                  
00002508  4EB9 00002C30           1502  SHIFT_IR        JSR         opcode_size_str     * add the size to the string
0000250E  B87C 0000               1503                  CMP.W       #$0000,D4           * check for count shift
00002512  6700 004E               1504                  BEQ         SHIFT_count
00002516  B87C 0020               1505                  CMP.W       #$0020,D4           * check for register shift
0000251A  6700 00A4               1506                  BEQ         SHIFT_reg
0000251E                          1507                  
0000251E  4EB9 0000325C           1508  op_SHIFT_EA     JSR         PRINT_ALI_4
00002524                          1509                  
00002524  BA7C 003C               1510                  CMP.W       #%00111100,D5       ; mode 7, reg 4 invalid
00002528  6700 01A0               1511                  BEQ         op_DATA
0000252C                          1512                  
0000252C  48E7 8400               1513                  MOVEM.L     D0/D5,-(SP)         ; store D0 on the stack
00002530  2005                    1514                  MOVE.L      D5,D0               ; move D5 to D0 to change it
00002532  0280 00000038           1515                  ANDI.L      #%00111000,D0       ; separate the mode
00002538  B07C 0000               1516                  CMP.W       #%00000000,D0       ; check if its mode 0
0000253C  6700 018C               1517                  BEQ         op_DATA             * if it is, it's invalid
00002540  B07C 0008               1518                  CMP.W       #%00001000,D0       ; check if its mode 1
00002544  6700 0184               1519                  BEQ         op_DATA             * if it is, it's invalid
00002548  4CDF 0021               1520                  MOVEM.L     (SP)+,D0/D5
0000254C                          1521                  
0000254C  0245 003F               1522                  ANDI.W      #$003F,D5           * mask D5 for the op mode
00002550  544A                    1523                  ADD.W       #$02,A2             ; move to the next instruction
00002552  4EB9 00003266           1524                  JSR         FIND_EAMODE
00002558                          1525                  
00002558  4EB9 00002C68           1526                  JSR         PRINT_init
0000255E  6000 0FF0               1527                  BRA         loop_exit
00002562                          1528  
00002562  4EB9 0000323E           1529  SHIFT_count     JSR         PRINT_ALI_1
00002568                          1530  
00002568  4BF9 00003DA6           1531                  LEA         POUND,A5
0000256E  2CCD                    1532                  MOVE.L      A5,(A6)+            ; add # to the string
00002570                          1533              
00002570  3212                    1534                  MOVE.W      (A2),D1
00002572  0241 0E00               1535                  ANDI.W      #$0E00,D1
00002576  E089                    1536                  LSR.L       #8,D1
00002578  E289                    1537                  LSR.L       #1,D1               ; shift to get the register
0000257A  0641 0030               1538                  ADD.W       #$30,D1             ; convert ascii number to hex
0000257E                          1539              
0000257E  18C1                    1540                  MOVE.B      D1,(A4)+            ; move the register to A4
00002580  18FC 0000               1541                  MOVE.B      #$00,(A4)+          ; add the string terminating character
00002584  200C                    1542                  MOVE.L      A4,D0
00002586  5540                    1543                  SUB.W       #$02,D0
00002588  2A40                    1544                  MOVE.L      D0,A5
0000258A  2CCD                    1545                  MOVE.L      A5,(A6)+            ; add the register to the string
0000258C                          1546              
0000258C  4BF9 00003D90           1547                  LEA         COMMA,A5            ; add a comma to the string
00002592  2CCD                    1548                  MOVE.L      A5,(A6)+
00002594                          1549              
00002594  4BF9 00003FB3           1550                  LEA         DATA_REG,A5
0000259A  2CCD                    1551                  MOVE.L      A5,(A6)+            ; add a 'D' to the string
0000259C                          1552                          
0000259C  3212                    1553                  MOVE.W      (A2),D1
0000259E  0241 0007               1554                  ANDI.W      #$0007,D1
000025A2  0641 0030               1555                  ADD.W       #$30,D1             ; convert the register to hex
000025A6                          1556  
000025A6  18C1                    1557                  MOVE.B      D1,(A4)+            ; move the register to A4
000025A8  18FC 0000               1558                  MOVE.B      #$00,(A4)+          ; add the string terminating character
000025AC  200C                    1559                  MOVE.L      A4,D0
000025AE  5540                    1560                  SUB.W       #$02,D0
000025B0  2A40                    1561                  MOVE.L      D0,A5
000025B2  2CCD                    1562                  MOVE.L      A5,(A6)+            ; add the register to the string
000025B4                          1563              
000025B4  4EB9 00002C68           1564                  JSR         PRINT_init          ; print the string
000025BA  544A                    1565                  ADD.W       #$02,A2
000025BC  6000 0F92               1566                  BRA         loop_exit
000025C0                          1567  
000025C0  4EB9 0000323E           1568  SHIFT_reg       JSR         PRINT_ALI_1
000025C6                          1569  
000025C6  4BF9 00003FB3           1570                  LEA         DATA_REG,A5
000025CC  2CCD                    1571                  MOVE.L      A5,(A6)+            ; add 'D'y to the string
000025CE                          1572              
000025CE  3212                    1573                  MOVE.W      (A2),D1
000025D0  0241 0E00               1574                  ANDI.W      #$0E00,D1
000025D4  E089                    1575                  LSR.L       #8,D1
000025D6  E289                    1576                  LSR.L       #1,D1               ; shift to get the register
000025D8  0641 0030               1577                  ADD.W       #$30,D1             ; convert ascii number to hex
000025DC                          1578              
000025DC  18C1                    1579                  MOVE.B      D1,(A4)+            ; move the register to A4
000025DE  18FC 0000               1580                  MOVE.B      #$00,(A4)+          ; add the string terminating character
000025E2  200C                    1581                  MOVE.L      A4,D0
000025E4  5540                    1582                  SUB.W       #$02,D0
000025E6  2A40                    1583                  MOVE.L      D0,A5
000025E8  2CCD                    1584                  MOVE.L      A5,(A6)+            ; add the register to the string
000025EA                          1585              
000025EA  4BF9 00003D90           1586                  LEA         COMMA,A5            ; add a comma to the string
000025F0  2CCD                    1587                  MOVE.L      A5,(A6)+
000025F2                          1588              
000025F2  4BF9 00003FB3           1589                  LEA         DATA_REG,A5
000025F8  2CCD                    1590                  MOVE.L      A5,(A6)+            ; add a 'D' to the string
000025FA                          1591                          
000025FA  3212                    1592                  MOVE.W      (A2),D1
000025FC  0241 0007               1593                  ANDI.W      #$0007,D1
00002600  0641 0030               1594                  ADD.W       #$30,D1             ; convert the register to hex
00002604                          1595  
00002604  18C1                    1596                  MOVE.B      D1,(A4)+            ; move the register to A4
00002606  18FC 0000               1597                  MOVE.B      #$00,(A4)+          ; add the string terminating character
0000260A  200C                    1598                  MOVE.L      A4,D0
0000260C  5540                    1599                  SUB.W       #$02,D0
0000260E  2A40                    1600                  MOVE.L      D0,A5
00002610  2CCD                    1601                  MOVE.L      A5,(A6)+            ; add the register to the string
00002612                          1602              
00002612  4EB9 00002C68           1603                  JSR         PRINT_init          ; print the string
00002618  544A                    1604                  ADD.W       #$02,A2
0000261A  6000 0F34               1605                  BRA         loop_exit
0000261E                          1606  
0000261E  B87C 0004               1607  EOR_opmode      CMP.W       #%0100,D4           ; check if byte
00002622  6700 0626               1608                  BEQ         print_B_str         ; go add .B to string
00002626  B87C 0005               1609                  CMP.W       #%0101,D4           ; check if word
0000262A  6700 0628               1610                  BEQ         print_W_str         ; go add .W to string
0000262E  B87C 0006               1611                  CMP.W       #%0110,D4           ; check if long
00002632  6700 062A               1612                  BEQ         print_L_str         ; go add .L to string
00002636  6000 0092               1613                  BRA         op_DATA
0000263A                          1614  
0000263A  B87C 0000               1615  CMP_opmode      CMP.W       #%0000,D4           ; check if byte
0000263E  6700 060A               1616                  BEQ         print_B_str         ; go add .B to string
00002642  B87C 0001               1617                  CMP.W       #%0001,D4           ; check if word
00002646  6700 060C               1618                  BEQ         print_W_str         ; go add .W to string
0000264A  B87C 0002               1619                  CMP.W       #%0010,D4           ; check if long
0000264E  6700 060E               1620                  BEQ         print_L_str         ; go add .L to string
00002652  6000 0076               1621                  BRA         op_DATA
00002656                          1622                  
00002656                          1623  
00002656  B87C 0000               1624  OR_opmode       CMP.W       #%0000,D4
0000265A  6700 05EE               1625                  BEQ         print_B_str
0000265E  B87C 0004               1626                  CMP.W       #%0100,D4
00002662  6700 05E6               1627                  BEQ         print_B_str
00002666  B87C 0001               1628                  CMP.W       #%0001,D4
0000266A  6700 05E8               1629                  BEQ         print_W_str
0000266E  B87C 0005               1630                  CMP.W       #%0101,D4
00002672  6700 05E0               1631                  BEQ         print_W_str
00002676  B87C 0002               1632                  CMP.W       #%0010,D4
0000267A  6700 05E2               1633                  BEQ         print_L_str
0000267E  B87C 0006               1634                  CMP.W       #%0110,D4
00002682  6700 05DA               1635                  BEQ         print_L_str
00002686  B87C 0007               1636                  CMP.W       #%0111,D4
0000268A  6700 003E               1637                  BEQ         op_DATA
0000268E                          1638  
0000268E  48E7 FF00               1639  print_add       MOVEM.L     D0-D7,-(SP)         ; Save the state
00002692  204C                    1640                  MOVE.L      A4,A0               Clear the output address location
00002694  200A                    1641                  MOVE.L      A2,D0
00002696  7204                    1642                  MOVE.L      #$00000004,D1
00002698  7400                    1643                  MOVE.L      #$00000000,D2
0000269A  7600                    1644                  MOVE.L      #$00000000,D3
0000269C  4EB8 20BE               1645                  JSR         HEXTOASCII
000026A0                          1646                                  
000026A0  508C                    1647                  ADD.L       #$08,A4
000026A2  18FC 0000               1648                  MOVE.B      #$00,(A4)+          Add the string terminating character
000026A6  200C                    1649                  MOVE.L      A4,D0
000026A8  0480 00000009           1650                  SUB.L       #$09,D0
000026AE  2A40                    1651                  MOVE.L      D0,A5
000026B0  2CCD                    1652                  MOVE.L      A5,(A6)+            Add the register to the output string
000026B2                          1653                  
000026B2  4CDF 00FF               1654                  MOVEM.L     (SP)+,D0-D7         ; restore the state
000026B6  4E75                    1655                  RTS
000026B8                          1656              
000026B8  4BF9 00003DF4           1657  op_NOP          LEA         NOP_STR,A5
000026BE  2CCD                    1658                  MOVE.L      A5,(A6)+            ; add the operation to the string
000026C0  4EB9 00002C68           1659                  JSR         PRINT_init          ; print the string
000026C6  6000 0E88               1660                  BRA         loop_exit
000026CA                          1661              
000026CA  4EB8 1F40               1662  op_DATA         JSR         clearTempVars
000026CE  4EB8 1F5E               1663                  JSR         clearOutputStr
000026D2  287C 00009010           1664                  MOVE.L      #$00009010,A4
000026D8  2C7C 000090A0           1665                  MOVE.L      #$000090A0,A6
000026DE  4EB8 268E               1666                  JSR         print_add
000026E2                          1667  
000026E2  4BF9 00003DE0           1668                  LEA         DATA_STR,A5
000026E8  2CCD                    1669                  MOVE.L      A5,(A6)+            ; add DATA to string
000026EA                          1670  
000026EA  204C                    1671                  MOVE.L      A4,A0               Clear the output address location
000026EC  3012                    1672                  MOVE.W      (A2),D0
000026EE  7202                    1673                  MOVE.L      #$00000002,D1
000026F0  7400                    1674                  MOVE.L      #$00000000,D2
000026F2  7600                    1675                  MOVE.L      #$00000000,D3
000026F4  4EB8 20BE               1676                  JSR         HEXTOASCII
000026F8                          1677                  
000026F8  4CDF 00FF               1678                  MOVEM.L     (SP)+,D0-D7         Restore state
000026FC                          1679                  
000026FC                          1680                  ***
000026FC  588C                    1681                  ADD.L       #$04,A4
000026FE  18FC 0000               1682                  MOVE.B      #$00,(A4)+          Add the string terminating character
00002702  200C                    1683                  MOVE.L      A4,D0
00002704  5B80                    1684                  SUB.L       #$05,D0
00002706  2A40                    1685                  MOVE.L      D0,A5
00002708  2CCD                    1686                  MOVE.L      A5,(A6)+            Add the register to the output string
0000270A                          1687                  
0000270A  4EB9 00002C68           1688                  JSR         PRINT_init
00002710                          1689                  
00002710  544A                    1690                  ADD.W       #$02,A2
00002712                          1691                  
00002712  6000 0E3C               1692                  BRA         loop_exit
00002716                          1693              
00002716  4BF9 00003E25           1694  op_BRA          LEA         BRA_STR,A5
0000271C  2CCD                    1695                  MOVE.L      A5,(A6)+
0000271E  4EB9 0000325C           1696                  JSR         PRINT_ALI_4
00002724  4EB9 0000272E           1697                  JSR         FIND_DISP
0000272A  6000 0E24               1698                  BRA         loop_exit
0000272E                          1699               
0000272E  4BF9 00003DA8           1700  FIND_DISP       LEA         DOLLAH,A5
00002734  2CCD                    1701                  MOVE.L      A5,(A6)+
00002736                          1702                  
00002736  B23C 0000               1703                  CMP.B       #$00,D1             ; check the value of the last 8 bits against $00
0000273A  6700 0046               1704                  BEQ         op_DISP16           ; if equal, it's a 16 bit displacement
0000273E                          1705              
0000273E  B23C 00FF               1706                  CMP.B       #$FF,D1             ; check the value of the last 8 bits against $FF
00002742  6700 0076               1707                  BEQ         op_DISP32           ; if equal, it's a 32 bit displacement
00002746                          1708              
00002746  6000 0004               1709                  BRA         op_DISP8            ; otherwise, it's an 8 bit displacement
0000274A                          1710                  
0000274A  4E75                    1711                  RTS
0000274C                          1712  
0000274C  48E7 FF00               1713  op_DISP8        MOVEM.L     D0-D7,-(SP)         * Save the state
00002750                          1714  
00002750  200A                    1715                  MOVE.L      A2,D0               * Move current address in
00002752  D081                    1716                  ADD.L       D1,D0               * Add our displacement to current address
00002754                          1717                  
00002754  204C                    1718                  MOVE.L      A4,A0               * Move temp value pointer to A0
00002756  7204                    1719                  MOVE.L      #$00000004,D1       * prepare for ASCII output
00002758  4242                    1720                  CLR         D2
0000275A  4243                    1721                  CLR         D3
0000275C  4EB8 20BE               1722                  JSR         HEXTOASCII
00002760                          1723                  
00002760  4CDF 00FF               1724                  MOVEM.L     (SP)+,D0-D7         * Restore previous state
00002764  508C                    1725                  ADD.L       #$08,A4             * Prep temp variables
00002766  18FC 0000               1726                  MOVE.B      #$00,(A4)+          * Add terminating character
0000276A  200C                    1727                  MOVE.L      A4,D0               * Print displacement
0000276C  0480 00000009           1728                  SUB.L       #$09,D0
00002772  2A40                    1729                  MOVE.L      D0,A5
00002774  2CCD                    1730                  MOVE.L      A5,(A6)+
00002776  4EB9 00002C68           1731                  JSR         PRINT_init
0000277C  548A                    1732                  ADD.L       #%10,A2
0000277E  6000 0DD0               1733                  BRA         loop_exit
00002782                          1734              
00002782  48E7 FF00               1735  op_DISP16       MOVEM.L     D0-D7,-(SP)         * Save the state
00002786                          1736  
00002786  200A                    1737                  MOVE.L      A2,D0               * Move current address in
00002788  544A                    1738                  ADD.W       #$02,A2             * Advance the pointer
0000278A  321A                    1739                  MOVE.W      (A2)+,D1            * Advance pointer beyond data
0000278C  D081                    1740                  ADD.L       D1,D0               * Add our displacement to current address
0000278E                          1741                  
0000278E  204C                    1742                  MOVE.L      A4,A0               * Move temp value pointer to A0
00002790  7204                    1743                  MOVE.L      #$00000004,D1       * prepare for ASCII output
00002792  4242                    1744                  CLR         D2
00002794  4243                    1745                  CLR         D3
00002796  4EB8 20BE               1746                  JSR         HEXTOASCII
0000279A                          1747                  
0000279A  4CDF 00FF               1748                  MOVEM.L     (SP)+,D0-D7         * Restore previous state
0000279E  508C                    1749                  ADD.L       #$08,A4             * Prep temp variables
000027A0  18FC 0000               1750                  MOVE.B      #$00,(A4)+          * Add terminating character
000027A4  200C                    1751                  MOVE.L      A4,D0               * Print displacement
000027A6  0480 00000009           1752                  SUB.L       #$09,D0
000027AC  2A40                    1753                  MOVE.L      D0,A5
000027AE  2CCD                    1754                  MOVE.L      A5,(A6)+
000027B0  4EB9 00002C68           1755                  JSR         PRINT_init
000027B6  6000 0D98               1756                  BRA         loop_exit
000027BA                          1757  
000027BA  48E7 FF00               1758  op_DISP32       MOVEM.L     D0-D7,-(SP)         * Save the state
000027BE                          1759  
000027BE  200A                    1760                  MOVE.L      A2,D0               * Move current address in
000027C0  544A                    1761                  ADD.W       #$02,A2             * Advance the pointer
000027C2  221A                    1762                  MOVE.L      (A2)+,D1            * Advance pointer beyond data
000027C4  D081                    1763                  ADD.L       D1,D0               * Add our displacement to current address
000027C6                          1764                  
000027C6  204C                    1765                  MOVE.L      A4,A0               * Move temp value pointer to A0
000027C8  7204                    1766                  MOVE.L      #$00000004,D1       * prepare for ASCII output
000027CA  4242                    1767                  CLR         D2
000027CC  4243                    1768                  CLR         D3
000027CE  4EB8 20BE               1769                  JSR         HEXTOASCII
000027D2                          1770                  
000027D2  4CDF 00FF               1771                  MOVEM.L     (SP)+,D0-D7         * Restore previous state
000027D6  508C                    1772                  ADD.L       #$08,A4             * Prep temp variables
000027D8  18FC 0000               1773                  MOVE.B      #$00,(A4)+          * Add terminating character
000027DC  200C                    1774                  MOVE.L      A4,D0               * Print displacement
000027DE  0480 00000009           1775                  SUB.L       #$09,D0
000027E4  2A40                    1776                  MOVE.L      D0,A5
000027E6  2CCD                    1777                  MOVE.L      A5,(A6)+
000027E8  4EB9 00002C68           1778                  JSR         PRINT_init
000027EE                          1779                  *ADD.L       #%100,A2
000027EE  6000 0D60               1780                  BRA         loop_exit
000027F2                          1781  
000027F2  4BF9 00003E9E           1782  op_BCS          LEA         BCS_STR,A5
000027F8  2CCD                    1783                  MOVE.L      A5,(A6)+
000027FA  4EB9 0000325C           1784                  JSR         PRINT_ALI_4
00002800  4EB8 272E               1785                  JSR         FIND_DISP
00002804  6000 0D4A               1786                  BRA         loop_exit                * eventually should jump to a repeat loop
00002808                          1787                  
00002808  4BF9 00003EA8           1788  op_BGE          LEA         BGE_STR,A5
0000280E  2CCD                    1789                  MOVE.L      A5,(A6)+
00002810  4EB9 0000325C           1790                  JSR         PRINT_ALI_4
00002816  4EB8 272E               1791                  JSR         FIND_DISP
0000281A  6000 0D34               1792                  BRA         loop_exit                * eventually should jump to a repeat loop
0000281E                          1793  
0000281E  4BF9 00003EB2           1794  op_BLT          LEA         BLT_STR,A5
00002824  2CCD                    1795                  MOVE.L      A5,(A6)+
00002826  4EB9 0000325C           1796                  JSR         PRINT_ALI_4
0000282C  4EB8 272E               1797                  JSR         FIND_DISP
00002830  6000 0D1E               1798                  BRA         loop_exit                * eventually should jump to a repeat loop
00002834                          1799  
00002834  4BF9 00003EBC           1800  op_BVC          LEA         BVC_STR,A5
0000283A  2CCD                    1801                  MOVE.L      A5,(A6)+
0000283C  4EB9 0000325C           1802                  JSR         PRINT_ALI_4
00002842  4EB8 272E               1803                  JSR         FIND_DISP
00002846  6000 0D08               1804                  BRA         loop_exit                * eventually should jump to a repeat loop
0000284A                          1805  
0000284A  4BF9 00003F3D           1806  op_CMP          LEA         CMP_STR,A5               * load op string
00002850  2CCD                    1807                  MOVE.L      A5,(A6)+                 * Add op string to output string
00002852  4EB8 263A               1808                  JSR         CMP_opmode               * find the size and add it to the string
00002856  4EB9 0000323E           1809                  JSR         PRINT_ALI_1              * 
0000285C                          1810  
0000285C                          1811                  ****Test for .B of An,Dn (invalid)
0000285C  0281 000001F8           1812                  ANDI.L      #$01F8,D1           * mask size and mode bits  
00002862  B2BC 00000008           1813                  CMP.L       #$0008,D1           * compare to invalid
00002868  6700 FE60               1814                  BEQ         op_DATA             * invalid op, print DATA
0000286C                          1815                  
0000286C  0281 000001C0           1816                  ANDI.L      #$01C0,D1           * mask the size bits
00002872  EC09                    1817                  LSR.B       #6,D1               * rotate the bits to get size 
00002874  2C01                    1818                  MOVE.L      D1,D6               * move size bits into flag             
00002876  2005                    1819                  MOVE.L      D5,D0               * load the op              
00002878  0240 0038               1820                  ANDI.W      #$0038,D0           * mask the mode
0000287C  544A                    1821                  ADD.W       #$0002,A2           * increment the current address
0000287E  4EB9 00003266           1822                  JSR         FIND_EAMODE         * create the left side of the operation
00002884  4EB9 0000321A           1823                  JSR         PRINT_COMMA         * print a comma
0000288A  7800                    1824                  MOVE.L      #$00000000,D4       * set mode to 0 for Dn
0000288C  4EB9 0000327A           1825                  JSR         FIND_OPMODE         * create left side of operation
00002892                          1826  
00002892  4EB9 00002C68           1827                  JSR         PRINT_init          * print the output string
00002898  6000 0CB6               1828                  BRA         loop_exit           * enter loop exit
0000289C                          1829  
0000289C                          1830  *--------------------------------------------------------------*
0000289C                          1831  * OP-Section for L_oad E_ffective A_ddress
0000289C                          1832  * D5 - has the EA bits (6 bits)
0000289C                          1833  * D4 - has the REGISTER NUMBER (A-N)
0000289C                          1834  *         
0000289C  48E7 8040               1835  op_LEA          MOVEM.L     D0/A1,-(SP)         Save A1 & D0 to stack
000028A0                          1836              
000028A0  4BF9 00003E2F           1837                  LEA         LEA_STR,A5
000028A6  2CCD                    1838                  MOVE.L      A5,(A6)+
000028A8  4EB9 0000325C           1839                  JSR         PRINT_ALI_4           Print the tab
000028AE  4CDF 0201               1840                  MOVEM.L     (SP)+,D0/A1         restore from stack
000028B2                          1841              
000028B2                          1842                  * Since we know that in this case, LEA always moves
000028B2                          1843                  * something to an address register An we can pass
000028B2                          1844                  * our mode as 010 in D4 for Address Reg Direct
000028B2                          1845              
000028B2                          1846                  *---NEED TO INSERT INCORRECT EA-MODE CHECKS HERE---*
000028B2  BA7C 003C               1847                  CMP.W       #%00111100,D5       Check for illegal #(data) mode
000028B6  6700 FE12               1848                  BEQ         op_DATA         
000028BA                          1849                  
000028BA  48E7 8000               1850                  MOVEM.L     D0,-(SP)            Just in case store whatever is in D)
000028BE  4240                    1851                  CLR         D0
000028C0  3005                    1852                  MOVE.W      D5,D0               Move D5 to D0
000028C2  0240 0038               1853                  ANDI.W      #%00111000,D0       Mask EA mode-bits
000028C6  B07C 0000               1854                  CMP.W       #%00000000,D0       Check for illegal Dn mode
000028CA  6700 FDFE               1855                  BEQ         op_DATA
000028CE  B07C 0008               1856                  CMP.W       #%00001000,D0       Check for illegal An mode
000028D2  6700 FDF6               1857                  BEQ         op_DATA 
000028D6  B07C 0018               1858                  CMP.W       #%00011000,D0       Check for illegal (An)+ mode
000028DA  6700 FDEE               1859                  BEQ         op_DATA 
000028DE  B07C 0020               1860                  CMP.W       #%00100000,D0       Check for illegal -(An) mode
000028E2  6700 FDE6               1861                  BEQ         op_DATA 
000028E6                          1862                  
000028E6  4CDF 0001               1863                  MOVEM.L     (SP)+,D0            Pop off the stack
000028EA                          1864  
000028EA  544A                    1865                  ADD.W       #$02,A2             MOVE TO JUST AHEAD OF THE INSTRUCTION (this is important for correct EA mode 7)
000028EC                          1866                  
000028EC  4EB9 00003266           1867                  JSR         FIND_EAMODE         We have our EA-bits in D5
000028F2                          1868  
000028F2  4EB9 0000321A           1869                  JSR         PRINT_COMMA         Print the comma
000028F8                          1870  
000028F8  48E7 0800               1871                  MOVEM.L     D4,-(SP)            save contents of D4 on stack
000028FC  4244                    1872                  CLR         D4
000028FE  183C 0001               1873                  MOVE.B      #1,D4               Move our An mode to D4
00002902  4EB9 0000327A           1874                  JSR         FIND_OPMODE         Now move to our mode
00002908                          1875              
00002908  4EB9 00002C68           1876                  JSR         PRINT_init          Print the output string
0000290E                          1877              
0000290E  4CDF 0010               1878                  MOVEM.L     (SP)+,D4            restore D4 before we go back
00002912                          1879              
00002912  6000 0C3C               1880                  BRA         loop_exit
00002916                          1881              
00002916                          1882  *--------------------------------------------------------------*
00002916                          1883  * Jump to Subroutine 
00002916                          1884  *
00002916                          1885  *
00002916                          1886  
00002916  4BF9 00003E39           1887  op_JSR          LEA         JSR_STR,A5
0000291C  2CCD                    1888                  MOVE.L      A5,(A6)+            ; add the op to the string
0000291E                          1889                  
0000291E  BA7C 003C               1890                  CMP.W       #%00111100,D5       Check for illegal #(data) mode
00002922  6700 FDA6               1891                  BEQ         op_DATA         
00002926                          1892                  
00002926  48E7 8000               1893                  MOVEM.L     D0,-(SP)            Just in case store whatever is in D)
0000292A  4240                    1894                  CLR         D0
0000292C  3005                    1895                  MOVE.W      D5,D0               Move D5 to D0
0000292E  0240 0038               1896                  ANDI.W      #%00111000,D0       Mask EA mode-bits
00002932  B07C 0000               1897                  CMP.W       #%00000000,D0       Check for illegal Dn mode
00002936  6700 FD92               1898                  BEQ         op_DATA
0000293A  B07C 0008               1899                  CMP.W       #%00001000,D0       Check for illegal An mode
0000293E  6700 FD8A               1900                  BEQ         op_DATA 
00002942  B07C 0018               1901                  CMP.W       #%00011000,D0       Check for illegal (An)+ mode
00002946  6700 FD82               1902                  BEQ         op_DATA 
0000294A  B07C 0020               1903                  CMP.W       #%00100000,D0       Check for illegal -(An) mode
0000294E  6700 FD7A               1904                  BEQ         op_DATA 
00002952                          1905                  
00002952  4CDF 0001               1906                  MOVEM.L     (SP)+,D0            Pop off the stack
00002956                          1907                  
00002956  544A                    1908                  ADD.W       #$02,A2             Advance pointer beyond instruction
00002958  4EB9 0000325C           1909                  JSR         PRINT_ALI_4
0000295E  4EB9 00003266           1910                  JSR         FIND_EAMODE         Find EA mode
00002964                          1911                  
00002964  4EB9 00002C68           1912                  JSR         PRINT_init          ; print the string
0000296A  6000 0BE4               1913                  BRA         loop_exit
0000296E                          1914  
0000296E                          1915  *---------------------------------------------------------------*
0000296E  4BF9 00003E43           1916  op_EOR          LEA         EOR_STR,A5
00002974  2CCD                    1917                  MOVE.L      A5,(A6)+
00002976  4EB8 261E               1918                  JSR         EOR_opmode          ; find the size and add it to the string
0000297A                          1919                  
0000297A  2005                    1920                  MOVE.L      D5,D0
0000297C  0240 0038               1921                  ANDI.W      #$0038,D0         ; mask the mode
00002980                          1922                  ** CHECK IF MODE IS INVALID **
00002980  0C40 0008               1923                  CMPI.W      #$0008,D0           ; check for invalid mode 1   
00002984  6700 FD44               1924                  BEQ         op_DATA             ; mode 1, An, is invalid
00002988  0C40 003C               1925                  CMPI.W      #$003C,D0           ; check for invalid mode 7 reg 4
0000298C  6700 FD3C               1926                  BEQ         op_DATA             ; mode 7 reg 4, #<data>, is invalid
00002990                          1927                  
00002990  7800                    1928                  MOVE.L      #$00000000,D4       * set mode to 0
00002992  4EB9 0000327A           1929                  JSR         FIND_OPMODE
00002998  4EB9 0000321A           1930                  JSR         PRINT_COMMA
0000299E                          1931  
0000299E  544A                    1932                  ADD.W       #$0002,A2           * increment the current address
000029A0  4EB9 00003266           1933                  JSR         FIND_EAMODE         * create the right side of the operation
000029A6  4EB9 00002C68           1934                  JSR         PRINT_init
000029AC  6000 0BA2               1935                  BRA         loop_exit
000029B0                          1936                  
000029B0                          1937  
000029B0  4BF9 00003E4D           1938  op_OR           LEA         OR_STR,A5
000029B6  2CCD                    1939                  MOVE.L      A5,(A6)+            ; add the op to the string
000029B8  4EB8 2656               1940                  JSR         OR_opmode           ; find the size and add it to the string
000029BC  4EB9 00003248           1941                  JSR         PRINT_ALI_2
000029C2                          1942              
000029C2                          1943                  ** CHECK IF EA IS THE DESTINATION **
000029C2  0C44 0000               1944                  CMPI.W      #$0000,D4
000029C6  6700 0072               1945                  BEQ         op_OR_SRC
000029CA  0C44 0001               1946                  CMPI.W      #$0001,D4
000029CE  6700 006A               1947                  BEQ         op_OR_SRC
000029D2  0C44 0002               1948                  CMPI.W      #$0002,D4
000029D6  6700 0062               1949                  BEQ         op_OR_SRC
000029DA                          1950                  
000029DA                          1951                  ** CHECK IF EA IS THE SOURCE **
000029DA  0C44 0004               1952                  CMPI.W      #$0004,D4
000029DE  6700 001C               1953                  BEQ         op_OR_DEST
000029E2  0C44 0005               1954                  CMPI.W      #$0005,D4
000029E6  6700 0014               1955                  BEQ         op_OR_DEST
000029EA  0C44 0006               1956                  CMPI.W      #$0006,D4
000029EE  6700 000C               1957                  BEQ         op_OR_DEST
000029F2                          1958              
000029F2  4EB9 00002C68           1959                  JSR         PRINT_init          * print the string
000029F8  6000 0B56               1960                  BRA         loop_exit
000029FC                          1961                  
000029FC  0C45 003C               1962  op_OR_DEST      CMPI.W      #$003C,D5           * mode 7, register 4 is invalid
00002A00  6700 FCC8               1963                  BEQ         op_DATA
00002A04  2005                    1964                  MOVE.L      D5,D0
00002A06  0240 0038               1965                  ANDI.W      #$0038,D0           * mask the mode
00002A0A  0C40 0000               1966                  CMPI.W      #$0000,D0           * mode 0 is invalid
00002A0E  6700 FCBA               1967                  BEQ         op_DATA
00002A12  0C40 0008               1968                  CMPI.W      #$0008,D0           * mode 1 is invalid
00002A16  6700 FCB2               1969                  BEQ         op_DATA
00002A1A                          1970                  
00002A1A  7800                    1971                  MOVE.L      #$00000000,D4       * set mode to 0
00002A1C  4EB9 0000327A           1972                  JSR         FIND_OPMODE         * create the LEFT side of the operation
00002A22                          1973                  
00002A22  4EB9 0000321A           1974                  JSR         PRINT_COMMA
00002A28                          1975  
00002A28  544A                    1976                  ADD.W       #$0002,A2           * increment the current address
00002A2A  4EB9 00003266           1977                  JSR         FIND_EAMODE         * create the RIGHT side of the operation
00002A30                          1978                  
00002A30  4EB9 00002C68           1979                  JSR         PRINT_init
00002A36                          1980                  
00002A36  6000 0B18               1981                  BRA         loop_exit
00002A3A                          1982  
00002A3A  2005                    1983  op_OR_SRC       MOVE.L      D5,D0
00002A3C  0240 0038               1984                  ANDI.W      #$0038,D0           * mask the mode
00002A40  0C40 0008               1985                  CMPI.W      #$0008,D0           * mode 1 is invalid
00002A44  6700 FC84               1986                  BEQ         op_DATA
00002A48                          1987                  
00002A48  0C40 0000               1988                  CMPI.W      #$0000,D0           * mode 0 is invalid
00002A4C  6700 FC7C               1989                  BEQ         op_DATA
00002A50                          1990                  
00002A50  544A                    1991                  ADD.W       #$0002,A2           * increment the current address
00002A52  4EB9 00003266           1992                  JSR         FIND_EAMODE         * create the left side of the operation
00002A58                          1993  
00002A58  4EB9 0000321A           1994                  JSR         PRINT_COMMA
00002A5E                          1995                  
00002A5E  7800                    1996                  MOVE.L      #$00000000,D4       * set mode to 0                
00002A60  4EB9 0000327A           1997                  JSR         FIND_OPMODE         * create the right side of the operation    
00002A66  4EB9 00002C68           1998                  JSR         PRINT_init
00002A6C                          1999                  
00002A6C  6000 0AE2               2000                  BRA         loop_exit
00002A70                          2001  
00002A70  4BF9 00003E56           2002  op_ORI          LEA         ORI_STR,A5
00002A76  2CCD                    2003                  MOVE.L      A5,(A6)+            ; add the op to the string
00002A78  3612                    2004                  MOVE.W      (A2),D3
00002A7A  0283 000000C0           2005                  ANDI.L      #$00C0,D3           * move the size into D3  
00002A80  4EB9 00002C30           2006                  JSR         opcode_size_str     ; find the size and add it to the string
00002A86                          2007                  
00002A86  3212                    2008                  MOVE.W      (A2),D1
00002A88  EC89                    2009                  LSR.L       #6,D1               ; shift the size bits to get the flag 
00002A8A  2C01                    2010                  MOVE.L      D1,D6               ; move size bit to D6 to set flag
00002A8C                          2011                  **** CHECK FOR INVALID
00002A8C  BA7C 003C               2012                  CMP.W       #%00111100,D5       ; Mode 7, Register 4 is invalid
00002A90  6700 FC38               2013                  BEQ         op_DATA
00002A94                          2014                  
00002A94  4280                    2015                  CLR.L       D0
00002A96  3005                    2016                  MOVE.W      D5,D0               ; Move the EA into D0
00002A98  0240 0038               2017                  ANDI.W      #%00111000,D0       ; Separate the EA Mode into D0
00002A9C  B07C 0008               2018                  CMP.W       #%00001000,D0       ; Compare the An Addressing mode
00002AA0  6700 FC28               2019                  BEQ         op_DATA             ; invalid
00002AA4                          2020                  
00002AA4  383C 0007               2021                  MOVE.W      #%111,D4            ; set mode to 7 for mode 7
00002AA8  363C 0004               2022                  MOVE.W      #%100,D3            ; set register to 4 for Immediate Data
00002AAC  548A                    2023                  ADD.L       #$00000002,A2       ; move the current address forward by a word
00002AAE                          2024                  
00002AAE  4EB9 0000327A           2025                  JSR         FIND_OPMODE         ; create the left side of the operation
00002AB4  4EB9 0000321A           2026                  JSR         PRINT_COMMA         ; find the comma
00002ABA                          2027                  
00002ABA  3A11                    2028                  MOVE.W      (A1),D5             ; Move the original operation into D5
00002ABC  0285 0000003F           2029                  ANDI.L      #$003F,D5           ; mask the last 6 bits
00002AC2  4EB9 00003266           2030                  JSR         FIND_EAMODE         ; create the right side of the operation
00002AC8                          2031  
00002AC8                          2032                  **** FINDING/ADDING EA TO STRING HERE
00002AC8                          2033              
00002AC8  4EB9 00002C68           2034                  JSR         PRINT_init          ; print the string
00002ACE  6000 0A80               2035                  BRA         loop_exit
00002AD2                          2036              
00002AD2  4BF9 00003E74           2037  op_BCLR_STAT    LEA         BCLR_STR,A5         * add the op to the string
00002AD8  2CCD                    2038                  MOVE.L      A5,(A6)+
00002ADA                          2039                  
00002ADA  BA7C 003C               2040                  CMP.W       #$3C,D5             * check for mode 7 register 4
00002ADE  6700 FBEA               2041                  BEQ         op_DATA             * invalid EA mode
00002AE2                          2042                  
00002AE2  3005                    2043                  MOVE.W      D5,D0
00002AE4  0240 0038               2044                  ANDI.W      #$38,D0             * mask for EA mode
00002AE8  B07C 0008               2045                  CMP.W       #$08,D0             * check for mode 2
00002AEC  6700 FBDC               2046                  BEQ         op_DATA             * invalid EA mode
00002AF0                          2047                  
00002AF0  3C1A                    2048                  MOVE.W      (A2)+,D6            * store the original op in D6 and move to the next half of it
00002AF2  3012                    2049                  MOVE.W      (A2),D0             * move the second half to D0
00002AF4  3212                    2050                  MOVE.W      (A2),D1             * and D1
00002AF6  0240 FF00               2051                  ANDI.W      #$FF00,D0           * mask for the first byte in D0
00002AFA  0241 00FF               2052                  ANDI.W      #$00FF,D1           * and the second byte in D1
00002AFE                          2053                  
00002AFE  B07C 0000               2054                  CMP.W       #$0000,D0           * check for the valid bits in D0
00002B02  6600 0066               2055                  BNE         REWIND_add          * if they're invalid, rewind the current address and branch to op_DATA
00002B06                          2056                  
00002B06  4EB9 00003252           2057                  JSR         PRINT_ALI_3
00002B0C                          2058                  
00002B0C  4BF9 00003DA6           2059                  LEA         POUND,A5            * add the pound to the output
00002B12  2CCD                    2060                  MOVE.L      A5,(A6)+
00002B14                          2061                  
00002B14  204C                    2062                  MOVE.L      A4,A0
00002B16  3001                    2063                  MOVE.W      D1,D0
00002B18  7201                    2064                  MOVE.L      #$00000001,D1       * prepare for ASCII output
00002B1A  4242                    2065                  CLR         D2
00002B1C  4243                    2066                  CLR         D3
00002B1E  4EB8 20BE               2067                  JSR         HEXTOASCII
00002B22                          2068                  
00002B22  548C                    2069                  ADD.L       #$02,A4
00002B24  18FC 0000               2070                  MOVE.B      #$00,(A4)+          Add the string terminating character
00002B28  200C                    2071                  MOVE.L      A4,D0
00002B2A  5780                    2072                  SUB.L       #$03,D0
00002B2C  2A40                    2073                  MOVE.L      D0,A5
00002B2E  2CCD                    2074                  MOVE.L      A5,(A6)+            Add the number to the output string
00002B30                          2075                  
00002B30  4EB9 0000321A           2076                  JSR         PRINT_COMMA
00002B36                          2077                  
00002B36  BA7C 0038               2078                  CMP.W       #$38,D5
00002B3A  6700 001C               2079                  BEQ         op_BCLR_STAT_ADD
00002B3E                          2080                  
00002B3E  BA7C 0039               2081                  CMP.W       #$39,D5
00002B42  6700 0014               2082                  BEQ         op_BCLR_STAT_ADD
00002B46                          2083                  
00002B46  4EB9 00003266           2084                  JSR         FIND_EAMODE
00002B4C                          2085                  
00002B4C  544A                    2086                  ADD.W       #$02,A2             * Increment the current address
00002B4E                          2087                  
00002B4E  4EB9 00002C68           2088                  JSR         PRINT_init
00002B54  6000 09FA               2089                  BRA         loop_exit
00002B58                          2090                  
00002B58                          2091  op_BCLR_STAT_ADD
00002B58  544A                    2092                  ADD.W       #$02,A2
00002B5A  4EB9 00003266           2093                  JSR         FIND_EAMODE
00002B60                          2094                                  
00002B60  4EB9 00002C68           2095                  JSR         PRINT_init
00002B66  6000 09E8               2096                  BRA         loop_exit
00002B6A                          2097                  
00002B6A  554A                    2098  REWIND_add      SUB.W       #$02,A2
00002B6C  6000 FB5C               2099                  BRA         op_DATA
00002B70                          2100                  
00002B70  4BF9 00003E74           2101  op_BCLR_DYN     LEA         BCLR_STR,A5         * add the op to the string
00002B76  2CCD                    2102                  MOVE.L      A5,(A6)+
00002B78                          2103              
00002B78  BA7C 003C               2104                  CMP.W       #$3C,D5             * check for mode 7 register 4
00002B7C  6700 FB4C               2105                  BEQ         op_DATA             * invalid EA mode
00002B80                          2106                  
00002B80  3005                    2107                  MOVE.W      D5,D0
00002B82  0240 0038               2108                  ANDI.W      #$38,D0             * mask for EA mode
00002B86  B07C 0008               2109                  CMP.W       #$08,D0             * check for mode 2
00002B8A  6700 FB3E               2110                  BEQ         op_DATA             * invalid EA mode
00002B8E                          2111                  
00002B8E  4EB9 00003252           2112                  JSR         PRINT_ALI_3         * align last column
00002B94                          2113                  
00002B94  4BF9 00003FB3           2114                  LEA         DATA_REG,A5         * add the D to the output
00002B9A  2CCD                    2115                  MOVE.L      A5,(A6)+
00002B9C                          2116                  
00002B9C  2003                    2117                  MOVE.L      D3,D0
00002B9E  0640 0030               2118                  ADD.W       #$30,D0
00002BA2  18C0                    2119                  MOVE.B      D0,(A4)+
00002BA4  18FC 0000               2120                  MOVE.B      #$00,(A4)+          Add the string terminating character
00002BA8  200C                    2121                  MOVE.L      A4,D0
00002BAA  5580                    2122                  SUB.L       #$02,D0
00002BAC  2A40                    2123                  MOVE.L      D0,A5
00002BAE  2CCD                    2124                  MOVE.L      A5,(A6)+            Add the register to the output string
00002BB0                          2125                  
00002BB0  4EB9 0000321A           2126                  JSR         PRINT_COMMA         * print the comma
00002BB6                          2127                  
00002BB6  544A                    2128                  ADD.W       #$02,A2             * increment the current address pointer
00002BB8                          2129                  
00002BB8  4EB9 00003266           2130                  JSR         FIND_EAMODE         * print the right side of the output
00002BBE                          2131                  
00002BBE                          2132                  
00002BBE  4EB9 00002C68           2133                  JSR         PRINT_init
00002BC4  6000 098A               2134                  BRA         loop_exit
00002BC8                          2135                  
00002BC8                          2136  op_MOVEA        
00002BC8  EC89                    2137                  LSR.L       #6,D1               * shift the size bits to get the flag 
00002BCA  EC89                    2138                  LSR.L       #6,D1               * shift the size bits to get the flag
00002BCC  2CCD                    2139                  MOVE.L      A5,(A6)+
00002BCE  4EB9 0000322C           2140                  JSR         PRINT_TAB           * print space for alignment
00002BD4  2C01                    2141                  MOVE.L      D1,D6               * move size bit to D6 to set flag
00002BD6  544A                    2142                  ADD.W       #$02,A2             * increment the current address
00002BD8  4EB9 00003266           2143                  JSR         FIND_EAMODE         * add the left side of operation to output string
00002BDE  4EB9 0000321A           2144                  JSR         PRINT_COMMA         * add a comma to output string
00002BE4  383C 0001               2145                  MOVE.W      #%001,D4            * set mode to 1 for An
00002BE8  4EB9 0000327A           2146                  JSR         FIND_OPMODE         * add right operand to output string
00002BEE  4EB9 00002C68           2147                  JSR         PRINT_init          * print the output string
00002BF4  6000 095A               2148                  BRA         loop_exit           * exit the loop    
00002BF8                          2149              
00002BF8                          2150  ***************************************************************************    
00002BF8                          2151  * op_MOVE Generic move method for all moves
00002BF8                          2152  *
00002BF8                          2153  *
00002BF8                          2154  
00002BF8  2CCD                    2155  op_MOVE         MOVE.L      A5,(A6)+           * Move our op-sufix to str
00002BFA                          2156                  
00002BFA  4EB9 0000323E           2157                  JSR         PRINT_ALI_1        * Spacer
00002C00                          2158                  
00002C00  544A                    2159                  ADD.W       #$02,A2            * advance pointer
00002C02  4EB9 00003266           2160                  JSR         FIND_EAMODE        * Get the source operand
00002C08                          2161                  
00002C08  B83C 0007               2162                  CMP.B       #7,D4              * If mode is 7 check reg 
00002C0C  6700 0018               2163                  BEQ         CHECK_MOVEREG
00002C10                          2164  
00002C10                          2165  
00002C10  4EB9 0000321A           2166  MOVE_DONE       JSR         PRINT_COMMA        * Print comma
00002C16  4EB9 0000327A           2167                  JSR         FIND_OPMODE        * Get Destination Operand
00002C1C  4EB9 00002C68           2168                  JSR         PRINT_init
00002C22  6000 092C               2169                  BRA         loop_exit
00002C26                          2170  
00002C26                          2171  
00002C26  B63C 0004               2172  CHECK_MOVEREG   CMP.B       #4,D3              * Prevent IM-DATA destination
00002C2A  6700 FA9E               2173                  BEQ         op_DATA            * error
00002C2E  60E0                    2174                  BRA         MOVE_DONE          * otherwise continue
00002C30                          2175  
00002C30                          2176  ***************************************************************************   
00002C30  B67C 0000               2177  opcode_size_str CMP.W       #$0000,D3
00002C34  6700 0014               2178                  BEQ         print_B_str         ; its a byte
00002C38  B67C 0040               2179                  CMP.W       #$0040,D3
00002C3C  6700 0016               2180                  BEQ         print_W_str         ; its a word
00002C40  B67C 0080               2181                  CMP.W       #$0080,D3
00002C44  6700 0018               2182                  BEQ         print_L_str         ; its a long
00002C48  4E75                    2183                  RTS
00002C4A                          2184              
00002C4A  4BF9 00003D92           2185  print_B_str     LEA         B_STR,A5            ; Add the address of .B to the string
00002C50  2CCD                    2186                  MOVE.L      A5,(A6)+
00002C52  4E75                    2187                  RTS
00002C54                          2188  
00002C54  4BF9 00003D96           2189  print_W_str     LEA         W_STR,A5            ; Add the address of .W to the string
00002C5A  2CCD                    2190                  MOVE.L      A5,(A6)+
00002C5C  4E75                    2191                  RTS
00002C5E                          2192  
00002C5E  4BF9 00003D9A           2193  print_L_str     LEA         L_STR,A5            ; Add the address of .L to the string
00002C64  2CCD                    2194                  MOVE.L      A5,(A6)+
00002C66  4E75                    2195                  RTS
00002C68                          2196              
00002C68  4BF9 000090A0           2197  PRINT_init      LEA         $000090A0,A5            ; load the beginning of the string
00002C6E  6000 0002               2198                  BRA         PRINT_loop          ; enter the print loop
00002C72                          2199  
00002C72                          2200              
00002C72  0C95 FFFFFFFF           2201  PRINT_loop      CMP.L       #$FFFFFFFF,(A5)     ; if the value at A5 is all F's, you've reached the end
00002C78  6700 000E               2202                  BEQ         PRINT_exit          ; exit
00002C7C  700E                    2203                  MOVE.L      #14,D0
00002C7E  2255                    2204                  MOVE.L      (A5),A1             ; load the address pointed at by A5 to A1
00002C80  4E4F                    2205                  TRAP        #15                 ; print what the address points to
00002C82  588D                    2206                  ADDA.L      #$00000004,A5       ; increment A5 by a long
00002C84  60EC                    2207                  BRA         PRINT_loop          ; loop
00002C86  4E75                    2208                  RTS
00002C88                          2209  
00002C88  103C 000E               2210  PRINT_exit      MOVE.B      #14,D0
00002C8C  43F9 00003D8D           2211                  LEA         new_line,A1
00002C92  4E4F                    2212                  TRAP        #15
00002C94  4E75                    2213                  RTS
00002C96                          2214  ***************************************************************************
00002C96  4BF9 00003E60           2215  op_NEG          LEA         NEG_STR,A5
00002C9C  2CCD                    2216                  MOVE.L      A5,(A6)+            ; add the op to the string
00002C9E  3612                    2217                  MOVE.W      (A2),D3
00002CA0  0283 000000C0           2218                  ANDI.L      #$00C0,D3           * move the size into D3  
00002CA6  4EB8 2C30               2219                  JSR         opcode_size_str     ; find the size and add it to the string            
00002CAA  4EB9 0000323E           2220                  JSR         PRINT_ALI_1
00002CB0                          2221                  **** ADD TESTING
00002CB0  48E7 0400               2222                  MOVEM.L     D5,-(SP)            ; save the state of D5
00002CB4  0205 0038               2223                  ANDI.B      #%00111000,D5       ; separate the EA mode
00002CB8  BA3C 0008               2224                  CMP.B       #%00001000,D5       ; check if it's mode 1
00002CBC  6700 FA0C               2225                  BEQ         op_DATA             ; if is, it's invalid
00002CC0  4CDF 0020               2226                  MOVEM.L     (SP)+,D5            ; restore D5 if it isn't
00002CC4                          2227                  
00002CC4  544A                    2228                  ADD.W       #$02,A2             Advance just ahead of instruction
00002CC6  4EB9 00003266           2229                  JSR         FIND_EAMODE
00002CCC                          2230              
00002CCC  4EB8 2C68               2231                  JSR         PRINT_init          ; print the string
00002CD0  6000 087E               2232                  BRA         loop_exit
00002CD4                          2233  *---------------------------------------------------------------------------------*
00002CD4                          2234  * RTS: Return From Subroutine
00002CD4                          2235  *
00002CD4                          2236  *
00002CD4  4BF9 00003E6A           2237  op_RTS          LEA         RTS_STR,A5
00002CDA  2CCD                    2238                  MOVE.L      A5,(A6)+            ; add the op to the string            
00002CDC  4EB8 2C68               2239                  JSR         PRINT_init          ; print the string
00002CE0  544A                    2240                  ADD.W       #02,A2              Advance pointer just after instruction
00002CE2  6000 086C               2241                  BRA         loop_exit
00002CE6                          2242  
00002CE6                          2243  *---------------------------------------------------------------------------------*
00002CE6                          2244  
00002CE6  4BF9 00003E7F           2245  op_LSL          LEA         LSL_STR,A5
00002CEC  2CCD                    2246                  MOVE.L      A5,(A6)+            ; add the op to the string
00002CEE  3612                    2247                  MOVE.W      (A2),D3
00002CF0  0283 000000C0           2248                  ANDI.L      #$00C0,D3           * move the size into D3         
00002CF6  4EB8 2C30               2249                  JSR         opcode_size_str     ; find the size and add it to the string            
00002CFA  4E75                    2250                  RTS
00002CFC                          2251            
00002CFC  4BF9 00003E89           2252  op_LSR          LEA         LSR_STR,A5
00002D02  2CCD                    2253                  MOVE.L      A5,(A6)+            ; add the op to the string
00002D04  3612                    2254                  MOVE.W      (A2),D3
00002D06  0283 000000C0           2255                  ANDI.L      #$00C0,D3           * move the size into D3  
00002D0C  4EB8 2C30               2256                  JSR         opcode_size_str     ; find the size and add it to the string            
00002D10  4E75                    2257                  RTS
00002D12                          2258              
00002D12                          2259              
00002D12  4BF9 00003E93           2260  op_CMPI         LEA         CMPI_STR,A5
00002D18  2CCD                    2261                  MOVE.L      A5,(A6)+            ; add the op to the string
00002D1A  3612                    2262                  MOVE.W      (A2),D3
00002D1C  0283 000000C0           2263                  ANDI.L      #$00C0,D3           * move the size into D3  
00002D22  4EB8 2C30               2264                  JSR         opcode_size_str     ; find the size and add it to the string            
00002D26                          2265              
00002D26                          2266                  **** FINDING/ADDING EA TO STRING HERE
00002D26                          2267              
00002D26  4EB8 2C68               2268                  JSR         PRINT_init          ; print the string
00002D2A  4E75                    2269                  RTS
00002D2C                          2270                  
00002D2C  4BF9 00003F63           2271  op_MOVEM        LEA         MOVEM_STR,A5
00002D32  2CCD                    2272                  MOVE.L      A5,(A6)+
00002D34  0282 00000040           2273                  ANDI.L      #$0040,D2           * mask for size bit
00002D3A  4EB9 00002D60           2274                  JSR         MOVEM_SIZE          * get size of instruction
00002D40  4BF9 00003DAD           2275                  LEA         SMALL_TAB,A5
00002D46  2CCD                    2276                  MOVE.L      A5,(A6)+            * align the third column
00002D48  3412                    2277                  MOVE.W      (A2),D2             * load instruction
00002D4A  0282 00000400           2278                  ANDI.L      #$0400,D2           * mask for direction
00002D50  B47C 0000               2279                  CMP.W       #$0000,D2           * check for reg to mem
00002D54  6700 001C               2280                  BEQ         REG_TO_MEM          * branch to reg_to_mem
00002D58  B47C 0400               2281                  CMP.W       #$0400,D2           * check for mem to reg
00002D5C  6700 009E               2282                  BEQ         MEM_TO_REG          * branch to mem_to_reg
00002D60                          2283  
00002D60  B47C 0000               2284  MOVEM_SIZE      CMP.W       #$00,D2             * check if size is 0
00002D64  6700 FEEE               2285                  BEQ         PRINT_W_STR         * add .W to string
00002D68  B47C 0040               2286                  CMP.W       #$40,D2             * check if size is 1
00002D6C  6700 FEF0               2287                  BEQ         PRINT_L_STR         * add .L to string
00002D70  4E75                    2288                  RTS
00002D72                          2289  
00002D72  BA7C 003C               2290  REG_TO_MEM      CMP.W       #$3C,D5             ***test for mode 7 reg 4 INVALID
00002D76  6700 F952               2291                  BEQ         op_DATA
00002D7A                          2292                  
00002D7A  3005                    2293                  MOVE.W      D5,D0               * move instruction to D0
00002D7C  0240 0038               2294                  ANDI.W      #$38,D0             * mask for the mode
00002D80  B07C 0000               2295                  CMP.W       #$00,D0             * check for mode 0 (INVALID)
00002D84  6700 F944               2296                  BEQ         op_DATA
00002D88  B07C 0008               2297                  CMP.W       #$08,D0             * check for mode 1 (INVALID)
00002D8C  6700 F93C               2298                  BEQ         op_DATA
00002D90  B07C 0018               2299                  CMP.W       #$18,D0             * check for mode 3 (INVALID)
00002D94  6700 F934               2300                  BEQ         op_DATA
00002D98  B07C 0020               2301                  CMP.W       #$20,D0             * check for predec
00002D9C  6700 0038               2302                  BEQ         RTM_PREDEC
00002DA0  B07C 0028               2303                  CMP.W       #$28,D0             * compare to mode 5
00002DA4  6700 F924               2304                  BEQ         op_DATA
00002DA8  B07C 0030               2305                  CMP.W       #$30,D0             * compare to mode 6
00002DAC  6700 F91C               2306                  BEQ         op_DATA
00002DB0                          2307                  
00002DB0  43F9 00003F6F           2308                  LEA         MOVEM_POST_STR,A1   * load address of REG string into A1
00002DB6  544A                    2309                  ADD.W       #$02,A2             * move the current pointer to the next half of the op
00002DB8  3412                    2310                  MOVE.W      (A2),D2             * move the second half of the op to D2
00002DBA  4EB9 00002E5A           2311                  JSR         PARSE_STR           * set up the registers
00002DC0                          2312                  
00002DC0  4EB9 0000321A           2313                  JSR         PRINT_COMMA         * add the comma
00002DC6                          2314                  
00002DC6  544A                    2315                  ADD.W       #$02,A2             * move the current address pointer forward a word
00002DC8  4EB9 00003266           2316                  JSR         FIND_EAMODE         * set up the second half
00002DCE  4EB8 2C68               2317                  JSR         PRINT_init          * print the output
00002DD2  6000 077C               2318                  BRA         loop_exit
00002DD6                          2319  
00002DD6                          2320  
00002DD6  43F9 00003F90           2321  RTM_PREDEC      LEA         MOVEM_PRE_STR,A1    * load address of REG string into A1
00002DDC  544A                    2322                  ADD.W       #$02,A2             * move the current pointer to the next half of the op
00002DDE  3412                    2323                  MOVE.W      (A2),D2             * move the second half of the op to D2
00002DE0  4EB9 00002E5A           2324                  JSR         PARSE_STR           * set up the registers
00002DE6                          2325                  
00002DE6  4EB9 0000321A           2326                  JSR         PRINT_COMMA         * add the comma
00002DEC                          2327                  
00002DEC  544A                    2328                  ADD.W       #$02,A2             * move the current address pointer forward a word
00002DEE  4EB9 00003266           2329                  JSR         FIND_EAMODE         * set up the second half
00002DF4  4EB8 2C68               2330                  JSR         PRINT_init          * print the output
00002DF8  6000 0756               2331                  BRA         loop_exit
00002DFC                          2332  
00002DFC  BA7C 003C               2333  MEM_TO_REG      CMP.W       #$3C,D5             ***test for mode 7 reg 4 INVALID
00002E00  6700 F8C8               2334                  BEQ         op_DATA
00002E04                          2335                  
00002E04  3005                    2336                  MOVE.W      D5,D0
00002E06  0240 0038               2337                  ANDI.W      #$38,D0             * mask for the mode
00002E0A  B07C 0000               2338                  CMP.W       #$00,D0             * compare to mode 0
00002E0E  6700 F8BA               2339                  BEQ         op_DATA
00002E12  B07C 0008               2340                  CMP.W       #$08,D0             * compare to mode 1
00002E16  6700 F8B2               2341                  BEQ         op_DATA
00002E1A  B07C 0020               2342                  CMP.W       #$20,D0             * compare to mode 4
00002E1E  6700 F8AA               2343                  BEQ         op_DATA             
00002E22  B07C 0028               2344                  CMP.W       #$28,D0             * compare to mode 5
00002E26  6700 F8A2               2345                  BEQ         op_DATA
00002E2A  B07C 0030               2346                  CMP.W       #$30,D0             * compare to mode 6
00002E2E  6700 F89A               2347                  BEQ         op_DATA
00002E32                          2348                 
00002E32  544A                    2349                  ADD.W       #$02,A2             * move the current address pointer forward a word
00002E34  3C12                    2350                  MOVE.W      (A2),D6             * store the second word of the op in D6
00002E36  544A                    2351                  ADD.W       #$02,A2             * move to the third word of the op
00002E38  4EB9 00003266           2352                  JSR         FIND_EAMODE         * set up the second half
00002E3E                          2353  
00002E3E  4EB9 0000321A           2354                  JSR         PRINT_COMMA         * add the comma
00002E44                          2355                  
00002E44  43F9 00003F6F           2356                  LEA         MOVEM_POST_STR,A1   * load address of REG string into A1
00002E4A  3406                    2357                  MOVE.W      D6,D2               * move the second word of the op to D2
00002E4C  4EB9 00002E5A           2358                  JSR         PARSE_STR           * set up the registers
00002E52                          2359                  
00002E52  4EB8 2C68               2360                  JSR         PRINT_init          * print the output
00002E56  6000 06F8               2361                  BRA         loop_exit
00002E5A                          2362  
00002E5A                          2363  
00002E5A                          2364  *****Assumes second half of op is in D2, and assumes A1 has the address of the string
00002E5A  48E7 FF00               2365  PARSE_STR       MOVEM.L     D0-D7,-(SP)         * save all data registers
00002E5E  7C00                    2366                  MOVE.L      #$00000000,D6       * clear D6 - the counter
00002E60                          2367               
00002E60  4EB9 00002E72           2368                  JSR         PS_loop             * jump to PS_loop
00002E66  4EB9 00002EAC           2369                  JSR         PS_exit_loop        * jump to PS_exit_loop
00002E6C  4CDF 00FF               2370                  MOVEM.L     (SP)+,D0-D7         * restore the data registers
00002E70  4E75                    2371                  RTS                             * return to the calling sub routine
00002E72                          2372                  
00002E72  1219                    2373  PS_loop         MOVE.B      (A1)+,D1            * load the first word of the string into D1
00002E74  E149                    2374                  LSL.W       #8,D1
00002E76  1219                    2375                  MOVE.B      (A1)+,D1
00002E78  3002                    2376                  MOVE.W      D2,D0               * copy the second half of the op into D0
00002E7A  0240 8000               2377                  ANDI.W      #$8000,D0           * mask for the first bit of the word
00002E7E  B07C 8000               2378                  CMP.W       #$8000,D0           * check if the first bit is a 1
00002E82  6700 0006               2379                  BEQ         PS_valid_add        * add it to the output if it is
00002E86  6000 0018               2380                  BRA         PS_inc_count        * increment the counter
00002E8A                          2381                  
00002E8A  204C                    2382  PS_valid_add    MOVE.L      A4,A0               * copy the current pointer of the temp string into A0
00002E8C  18C1                    2383                  MOVE.B      D1,(A4)+
00002E8E  E049                    2384                  LSR.W       #8,D1
00002E90  18C1                    2385                  MOVE.B      D1,(A4)+            * copy the current pointer to the register string into A4
00002E92  18FC 002F               2386                  MOVE.B      #$2F,(A4)+
00002E96  18FC 0000               2387                  MOVE.B      #$00,(A4)+          * add '/' and the terminating character to the temp string
00002E9A  2CC8                    2388                  MOVE.L      A0,(A6)+            * add the starting address to the output list
00002E9C  6000 0002               2389                  BRA         PS_inc_count        * increment the counter
00002EA0                          2390                  
00002EA0  E38A                    2391  PS_inc_count    LSL.L       #1,D2               * shift the second half of the op by 1 bit
00002EA2  5206                    2392                  ADD.B       #%1,D6              * add 1 bit to the counter
00002EA4  BC7C 0010               2393                  CMP.W       #$10,D6             * check if the counter has reached 16
00002EA8  66C8                    2394                  BNE         PS_loop
00002EAA  4E75                    2395                  RTS                             * return to PARSE_STR if the loop is complete
00002EAC                          2396                  
00002EAC  204C                    2397  PS_exit_loop    MOVE.L      A4,A0               * copy A4 into A0
00002EAE  5548                    2398                  SUB.W       #$02,A0             * move A0 back by 2
00002EB0  10FC 0000               2399                  MOVE.B      #$00,(A0)+
00002EB4  10FC 00FF               2400                  MOVE.B      #$FF,(A0)+          * overwrite the current data in A0 with 00FF
00002EB8  2848                    2401                  MOVE.L      A0,A4               * copy A0 back into A4
00002EBA  4E75                    2402                  RTS
00002EBC                          2403          
00002EBC                          2404  *------------------------------------------------------------------*
00002EBC                          2405  * op_SUB & op_ADDA
00002EBC                          2406  *
00002EBC  4BF9 00003F0E           2407  op_SUB         LEA      SUB_STR,A5      Go to SUB mode
00002EC2  2CCD                    2408                 MOVE.L   A5,(A6)+        Load SUB String
00002EC4                          2409  
00002EC4                          2410  
00002EC4  B83C 0003               2411                 CMP.B    #3,D4           ADDA.W
00002EC8  6700 0082               2412                 BEQ      OP_ADDRESS     Go to SUBA.W Mode
00002ECC                          2413                                  
00002ECC  B83C 0007               2414                 CMP.B    #7,D4           ADDA.L
00002ED0  6700 007A               2415                 BEQ      OP_ADDRESS     Go to SUBA.L Mode
00002ED4                          2416    
00002ED4                          2417  
00002ED4  B83C 0000               2418                 CMP.B    #0,D4           FIND OUT THE MODE for SUB
00002ED8  6700 00CA               2419                 BEQ      ARITH_MODE_1    <EA> -> Dn Byte
00002EDC  B83C 0001               2420                 CMP.B    #1,D4
00002EE0  6700 00C2               2421                 BEQ      ARITH_MODE_1    <EA> -> Dn Word 
00002EE4  B83C 0002               2422                 CMP.B    #2,D4
00002EE8  6700 00BA               2423                 BEQ      ARITH_MODE_1    <EA> -> Dn Long
00002EEC                          2424                 
00002EEC                          2425  
00002EEC  B83C 0004               2426                 CMP.B    #4,D4
00002EF0  6700 011E               2427                 BEQ      ARITH_MODE_2    Dn -> <EA> Byte
00002EF4  B83C 0005               2428                 CMP.B    #5,D4
00002EF8  6700 0116               2429                 BEQ      ARITH_MODE_2    Dn -> <EA> Word
00002EFC  B83C 0006               2430                 CMP.B    #6,D4
00002F00  6700 010E               2431                 BEQ      ARITH_MODE_2    Dn -> <EA> Long
00002F04                          2432  
00002F04                          2433  
00002F04                          2434  
00002F04                          2435              
00002F04                          2436  *------------------------------------------------------------------*
00002F04                          2437  * op_ADD also op_ADDA
00002F04                          2438  *
00002F04                          2439  
00002F04  4BF9 00003EF9           2440  op_ADD         LEA      ADD_STR,A5      Go to ADD mode
00002F0A  2CCD                    2441                 MOVE.L   A5,(A6)+        Load ADD String
00002F0C                          2442  
00002F0C                          2443  
00002F0C  B83C 0003               2444                 CMP.B    #3,D4           ADDA.W
00002F10  6700 003A               2445                 BEQ      OP_ADDRESS     Go to ADDA.W Mode
00002F14                          2446                                  
00002F14  B83C 0007               2447                 CMP.B    #7,D4           ADDA.L
00002F18  6700 0032               2448                 BEQ      OP_ADDRESS     Go to ADDA.L Mode
00002F1C                          2449    
00002F1C                          2450  
00002F1C  B83C 0000               2451                 CMP.B    #0,D4           FIND OUT THE MODE for ADD
00002F20  6700 0082               2452                 BEQ      ARITH_MODE_1    <EA> -> Dn Byte
00002F24  B83C 0001               2453                 CMP.B    #1,D4
00002F28  6700 007A               2454                 BEQ      ARITH_MODE_1    <EA> -> Dn Word 
00002F2C  B83C 0002               2455                 CMP.B    #2,D4
00002F30  6700 0072               2456                 BEQ      ARITH_MODE_1    <EA> -> Dn Long
00002F34                          2457                 
00002F34                          2458  
00002F34  B83C 0004               2459                 CMP.B    #4,D4
00002F38  6700 00D6               2460                 BEQ      ARITH_MODE_2    Dn -> <EA> Byte
00002F3C  B83C 0005               2461                 CMP.B    #5,D4
00002F40  6700 00CE               2462                 BEQ      ARITH_MODE_2    Dn -> <EA> Word
00002F44  B83C 0006               2463                 CMP.B    #6,D4
00002F48  6700 00C6               2464                 BEQ      ARITH_MODE_2    Dn -> <EA> Long
00002F4C                          2465  
00002F4C                          2466  
00002F4C                          2467  *------------------------------------------------------------*
00002F4C                          2468  * OP_ADDRESS is Specifically for methods like SUBA or ADDA
00002F4C                          2469  * that have the 'A' Suffix and similar addressing behavior
00002F4C                          2470  * 
00002F4C                          2471  *
00002F4C                          2472  *                            
00002F4C  4BF9 00003FB7           2473  OP_ADDRESS     LEA      ADDR_A,A5       Load the ADDA String
00002F52  2CCD                    2474                 MOVE.L   A5,(A6)+     
00002F54                          2475                 
00002F54  B83C 0003               2476                 CMP.B    #3,D4           Is this a long operation?
00002F58  6600 0012               2477                 BNE      LONG_ADD
00002F5C                          2478  
00002F5C  4EB8 2C54               2479  WORD_ADD       JSR      print_W_str     Then it's a word operation
00002F60  2F06                    2480                 MOVE.L   D6,-(SP)        Save D6, just in case
00002F62  4246                    2481                 CLR      D6
00002F64  1C3C 0001               2482                 MOVE.B   #1,D6           Set Word flag (in case immediate data is used)
00002F68  6000 000E               2483                 BRA      OP_ADDR_CONT    Continue operation
00002F6C                          2484  
00002F6C  4EB8 2C5E               2485  LONG_ADD       JSR      print_L_str
00002F70  2F06                    2486                 MOVE.L   D6,-(SP)        Save D6, just in case
00002F72  4246                    2487                 CLR      D6
00002F74  1C3C 0002               2488                 MOVE.B   #2,D6           Set Long flag (in case immediate data is used)
00002F78                          2489  
00002F78                          2490  
00002F78  4EB9 0000322C           2491  OP_ADDR_CONT   JSR      PRINT_TAB
00002F7E                          2492  
00002F7E  544A                    2493                 ADD.W    #$02,A2         Advance the pointer past the instruction
00002F80  4EB9 00003266           2494                 JSR      FIND_EAMODE     Get EA MODE
00002F86                          2495                 
00002F86  4EB9 0000321A           2496                 JSR      PRINT_COMMA     Comma
00002F8C                          2497                 
00002F8C  2F04                    2498                 MOVE.L   D4,-(SP)        Save D4 for a minute
00002F8E  4244                    2499                 CLR      D4              
00002F90  7801                    2500                 MOVE.L   #1,D4
00002F92                          2501                 
00002F92  4EB9 0000327A           2502                 JSR      FIND_OPMODE
00002F98                          2503              
00002F98  4CDF 0050               2504                 MOVEM.L  (SP)+,D6/D4     Restore D6 & D4
00002F9C                          2505  
00002F9C  4EB8 2C68               2506                 JSR      PRINT_init      Print the string
00002FA0                          2507                  
00002FA0  6000 05AE               2508                 BRA      loop_exit            Done
00002FA4                          2509                 
00002FA4                          2510                 
00002FA4                          2511                 
00002FA4                          2512                 
00002FA4                          2513  **************************************************************
00002FA4                          2514  * Arithmetic Mode 1 is for <EA> -> Dn Effective Addressing              
00002FA4                          2515  * This modal behavior is used by Add, and Sub alike
00002FA4                          2516  * D3: Should have the Dn register number.
00002FA4                          2517  * D4: Should contain the OPMode bits to determine the 
00002FA4                          2518  * D5: Should contain the EA-Bits (6 total)
00002FA4                          2519  * D6: Is the expected flag value for immediate data usage
00002FA4                          2520  * Operation size. (000)Byte, (001) Word, (010) Long
00002FA4                          2521  *
00002FA4  2F06                    2522  ARITH_MODE_1   MOVE.L   D6,-(SP)        Save D6, just in case
00002FA6  4246                    2523                 CLR      D6              Clear it out
00002FA8                          2524  
00002FA8  B83C 0001               2525                 CMP.B    #1,D4           FIND OUT THE SIZE
00002FAC  6700 001C               2526                 BEQ      ARITH1_WORD     <EA> -> Dn Word
00002FB0  B83C 0002               2527                 CMP.B    #2,D4
00002FB4  6700 0026               2528                 BEQ      ARITH1_LONG     <EA> -> Dn Long 
00002FB8                          2529                 
00002FB8  4EB8 2C4A               2530  ARITH1_BYTE    JSR      print_B_str     Set the '.B' Suffix
00002FBC  4EB9 0000323E           2531                 JSR      PRINT_ALI_1
00002FC2  1C3C 0000               2532                 MOVE.B   #0,D6           Set the byte flag (for immediate data useage)
00002FC6  6000 0022               2533                 BRA      ARITH_ONE_CONT  Continue
00002FCA                          2534  
00002FCA  4EB8 2C54               2535  ARITH1_WORD    JSR      print_W_str     Set the '.W' Suffix
00002FCE  4EB9 0000323E           2536                 JSR      PRINT_ALI_1
00002FD4  1C3C 0001               2537                 MOVE.B   #1,D6           Set the word flag (for immediate data useage)
00002FD8  6000 0010               2538                 BRA      ARITH_ONE_CONT  Continue
00002FDC                          2539  
00002FDC  4EB8 2C5E               2540  ARITH1_LONG    JSR      print_L_str     Set the '.L' Suffix
00002FE0  4EB9 0000323E           2541                 JSR      PRINT_ALI_1
00002FE6  1C3C 0002               2542                 MOVE.B   #2,D6           Set the Long flag (for immediate data useage)
00002FEA                          2543  
00002FEA                          2544  
00002FEA  544A                    2545  ARITH_ONE_CONT ADD.W    #$02,A2         Advance the pointer past the instruction
00002FEC                          2546                 
00002FEC  4EB9 00003266           2547                 JSR      FIND_EAMODE     Get EA MODE 
00002FF2  4EB9 0000321A           2548                 JSR      PRINT_COMMA     Comma
00002FF8                          2549                 
00002FF8  2F04                    2550                 MOVE.L   D4,-(SP)        Save D4 for a minute
00002FFA  4244                    2551                 CLR      D4              
00002FFC  7800                    2552                 MOVE.L   #0,D4           Manually set Dn for Destination
00002FFE                          2553                 
00002FFE  4EB9 0000327A           2554                 JSR      FIND_OPMODE
00003004                          2555              
00003004  4CDF 0010               2556                 MOVEM.L  (SP)+,D4       Restore  D4
00003008                          2557  
00003008  4EB8 2C68               2558                 JSR      PRINT_init      Print the string
0000300C  6000 0542               2559                 BRA      loop_exit
00003010                          2560  
00003010                          2561  
00003010                          2562  **************************************************************
00003010                          2563  * Arithmetic Mode 2 is for Dn -> <EA> Effective Addressing              
00003010                          2564  * This modal behavior is used by Add, and Sub alike
00003010                          2565  * D3: Should have the Dn register number.
00003010                          2566  * D4: Should contain the OPMode bits to determine the 
00003010                          2567  * D5: Should contain the EA-Bits (6 total)
00003010                          2568  * D6: Is the expected flag value for immediate data usage 
00003010                          2569  * (not used here)
00003010                          2570  * Operation size. (100)Byte, (101) Word, (110) Long
00003010                          2571  *
00003010  B83C 0005               2572  ARITH_MODE_2    CMP.B    #5,D4           FIND OUT THE SIZE
00003014  6700 0018               2573                  BEQ      ARITH2_WORD     Dn -> <EA> Word
00003018  B83C 0006               2574                  CMP.B    #6,D4
0000301C  6700 001E               2575                  BEQ      ARITH2_LONG     Dn -> <EA> Long 
00003020                          2576                 
00003020  4EB8 2C4A               2577  ARITH2_BYTE     JSR      print_B_str     Set the '.B' Suffix
00003024  4EB9 0000323E           2578                  JSR      PRINT_ALI_1
0000302A  6000 001A               2579                  BRA      ARITH_TWO_CONT  Continue
0000302E                          2580  
0000302E  4EB8 2C54               2581  ARITH2_WORD     JSR      print_W_str     Set the '.W' Suffix
00003032  4EB9 0000323E           2582                  JSR      PRINT_ALI_1
00003038  6000 000C               2583                  BRA      ARITH_TWO_CONT  Continue
0000303C                          2584  
0000303C  4EB8 2C5E               2585  ARITH2_LONG     JSR      print_L_str     Set the '.L' Suffix
00003040  4EB9 0000323E           2586                  JSR      PRINT_ALI_1
00003046                          2587  
00003046                          2588  
00003046  48E7 C000               2589  ARITH_TWO_CONT  MOVEM.L     D0/D1,-(SP) Save the D0,D1 Register
0000304A                          2590  
0000304A  1005                    2591                  MOVE.B      D5,D0
0000304C  1205                    2592                  MOVE.B      D5,D1
0000304E  0201 0007               2593                  ANDI.B      #EA_REG,D1  Get the EA Reg        
00003052  0200 0038               2594                  ANDI.B      #EA_MODE,D0 Get the EA Mode
00003056  E608                    2595                  LSR.B       #3,D0           
00003058                          2596  
00003058  B03C 0000               2597                  CMP.B       #0,D0       Check for illegal Dn mode
0000305C  6700 F66C               2598                  BEQ         op_DATA
00003060  B03C 0001               2599                  CMP.B       #1,D0       Check for illegal An mode
00003064  6700 F664               2600                  BEQ         op_DATA
00003068                          2601      
00003068  B03C 0007               2602                  CMP.B       #7,D0       Check for mode 7 Reg 4
0000306C  6700 002C               2603                  BEQ         CHECK_REG
00003070                          2604  
00003070                          2605  
00003070  4CDF 0003               2606  ARITH2_RESUME   MOVEM.L    (SP)+,D0/D1     Release D0,D1 from stack
00003074                          2607  
00003074  2F04                    2608                  MOVE.L     D4,-(SP)        Save D4 for a minute
00003076  4244                    2609                  CLR        D4              
00003078  7800                    2610                  MOVE.L     #0,D4           Manually set Dn for Source
0000307A                          2611                     
0000307A  4EB9 0000327A           2612                  JSR        FIND_OPMODE     Get Dn register
00003080  4EB9 0000321A           2613                  JSR        PRINT_COMMA     Get Comma
00003086                          2614          
00003086  544A                    2615                  ADD.W      #$02,A2         Advance the pointer past the instruction
00003088  4EB9 00003266           2616                  JSR        FIND_EAMODE     Get <EA> operand  
0000308E                          2617  
0000308E  4CDF 0010               2618                  MOVEM.L    (SP)+,D4        Restore  D4
00003092                          2619  
00003092  4EB8 2C68               2620                  JSR        PRINT_init      Print the string
00003096  6000 04B8               2621                  BRA        loop_exit 
0000309A                          2622  
0000309A                          2623  
0000309A  B23C 0002               2624  CHECK_REG       CMP.B       #2,D1          Check for illegal reg (d16,PC)
0000309E  6700 F62A               2625                  BEQ         op_DATA
000030A2  B23C 0003               2626                  CMP.B       #3,D1          Check for illegal reg (d8,PC,Xn)
000030A6  6700 F622               2627                  BEQ         op_DATA
000030AA  B23C 0004               2628                  CMP.B       #4,D1          Check for illegal reg #(data) immediate data
000030AE  6700 F61A               2629                  BEQ         op_DATA
000030B2  60BC                    2630                  BRA         ARITH2_RESUME  Otherwise continue.
000030B4                          2631  
000030B4                          2632  *---------------------------------------------------------------------*                 
000030B4                          2633  * SUBQ OPCODE Subtracts Immediate data (1-8) from dest operand.
000030B4                          2634  *
000030B4                          2635  *
000030B4  4EB9 0000314C           2636  op_SUBQ         JSR         NA_ADDR_CHECK  Check for illegal submodes of mode 7 
000030BA                          2637  
000030BA                          2638  
000030BA  4BF9 00003F18           2639                  LEA         SUBQ_STR,A5    Load the SUBQ Str
000030C0  2CCD                    2640                  MOVE.L      A5,(A6)+   
000030C2                          2641                 
000030C2  48E7 D000               2642                  MOVEM.L     D0/D1/D3,-(SP) Save state of D0/D1/D3  
000030C6  4240                    2643                  CLR         D0             Clear out D0
000030C8  3012                    2644                  MOVE.W      (A2),D0        Move the size bits into d0
000030CA  0240 00C0               2645                  ANDI.W      #%0000000011000000,D0  Isolate Size bits
000030CE                          2646                  
000030CE  B03C 0000               2647                  CMP.B       #$00000000,D0  Check for byte size
000030D2  6700 0066               2648                  BEQ         CHECK_SA_MODE  Check for illegal EA mode
000030D6                          2649                  
000030D6                          2650                  
000030D6                          2651  SUBQ_CONT       
000030D6  4243                    2652                  CLR         D3
000030D8  3600                    2653                  MOVE.W      D0,D3            
000030DA  4EB8 2C30               2654                  JSR         opcode_size_str  Get the size suffix
000030DE                          2655                  
000030DE  4EB9 0000322C           2656                  JSR         PRINT_TAB
000030E4                          2657                  
000030E4  4241                    2658                  CLR         D1
000030E6  3212                    2659                  MOVE.W      (A2),D1          Get the data bits
000030E8  0241 0E00               2660                  ANDI.W      #%0000111000000000,D1 Isolate data number
000030EC  E649                    2661                  LSR.W       #3,D1            Shift the bits over
000030EE  EC49                    2662                  LSR.W       #6,D1
000030F0                          2663                  
000030F0  4BF9 00003DA6           2664                  LEA         POUND,A5         Load the '#' symbol
000030F6  2CCD                    2665                  MOVE.L      A5,(A6)+  
000030F8                          2666  
000030F8  B23C 0000               2667                  CMP.B       #0,D1            Check for zero
000030FC  6600 000E               2668                  BNE         SKIP_8           Skip if not number 8 (i.e. 0)
00003100                          2669      
00003100  4BF9 00003FB1           2670                  LEA         NO_EIGHT,A5      Place the number 8 in the string
00003106  2CCD                    2671                  MOVE.L      A5,(A6)+    
00003108  6000 0016               2672                  BRA         SUBQ_DONE
0000310C                          2673                  
0000310C  0641 0030               2674  SKIP_8          ADD.W       #$30,D1          convert ascii number to hex
00003110  18C1                    2675                  MOVE.B      D1,(A4)+         Move the register to A4
00003112  18FC 0000               2676                  MOVE.B      #$00,(A4)+       Add the string terminating character
00003116  4243                    2677                  CLR         D3
00003118  260C                    2678                  MOVE.L      A4,D3
0000311A  5583                    2679                  SUB.L       #$02,D3
0000311C  2A43                    2680                  MOVE.L      D3,A5
0000311E  2CCD                    2681                  MOVE.L      A5,(A6)+         Move the number to the string
00003120                          2682                
00003120                          2683  
00003120                          2684  SUBQ_DONE       
00003120  4EB9 0000321A           2685                  JSR         PRINT_COMMA      Print the Comma
00003126  544A                    2686                  ADD.W       #$02,A2          Advance pointer past instruction
00003128  4EB9 00003266           2687                  JSR         FIND_EAMODE      Get EA
0000312E  4EB8 2C68               2688                  JSR         PRINT_init       Display the string
00003132                          2689                  
00003132  4CDF 000B               2690                  MOVEM.L     (SP)+,D3/D1/D0   Restore the stack
00003136                          2691                  
00003136  6000 0418               2692                  BRA         loop_exit        EXIT
0000313A                          2693          
0000313A  4241                    2694  CHECK_SA_MODE   CLR         D1               Check SUBQ Address mode
0000313C  2205                    2695                  MOVE.L      D5,D1
0000313E  0201 0038               2696                  ANDI.B      #%00111000,D1    Isolate EA MODE BITS
00003142  B23C 0008               2697                  CMP.B       #%00001000,D1    Compare for An mode
00003146  6700 F582               2698                  BEQ         op_DATA          ILLEGAL EA MODE FOR SIZE BYTE
0000314A  608A                    2699                  BRA         SUBQ_CONT        Otherwise continue
0000314C                          2700                  
0000314C                          2701  *---------------------------------------------------------------------*   
0000314C                          2702  
0000314C                          2703  *--------------------------------------------------------------   
0000314C                          2704  * Non-Alterable Address Check
0000314C                          2705  * This ancillary method checks for non-alteralble addressing
0000314C                          2706  * modes such as immediated data, etc that cannot be used
0000314C                          2707  * addressing modes.
0000314C                          2708  * D5: Expected to contain operation EA bits.   
0000314C                          2709  *
0000314C  2F00                    2710  NA_ADDR_CHECK   MOVE.L   D0,-(SP)       Save the state of D0
0000314E  4240                    2711                  CLR      D0
00003150  3005                    2712                  MOVE.W   D5,D0          Move in EA bits
00003152                          2713                      
00003152  B03C 0038               2714                  CMP.B    #%00111000,D0  Look for Mode 7                
00003156  6700 0006               2715                  BEQ      NON_MEM_REG
0000315A                          2716    
0000315A                          2717                    
0000315A  201F                    2718  NAAC_CONT       MOVE.L   (SP)+,D0       Restore D0 from stack
0000315C  4E75                    2719                  RTS                     Return
0000315E                          2720  
0000315E                          2721  
0000315E  4240                    2722  NON_MEM_REG     CLR      D0             Clear D0    
00003160  3005                    2723                  MOVE.W   D5,D0          Move in EA bits
00003162  B03C 0002               2724                  CMP.B    #%00000010,D0  Check for REG 2
00003166  6700 F562               2725                  BEQ      op_DATA        Illegal Mode Displacement PC
0000316A  B03C 0003               2726                  CMP.B    #%00000011,D0  Check for REG 3
0000316E  6700 F55A               2727                  BEQ      op_DATA        Illegal Mode Displacement PC bit Xtended
00003172  B03C 0004               2728                  CMP.B    #%00000100,D0  Check for REG 4
00003176  6700 F552               2729                  BEQ      op_DATA        Illegal Mode Immediate Data
0000317A  60DE                    2730                  BRA      NAAC_CONT      Continue to exit
0000317C                          2731  *--------------------------------------------------------------   
0000317C                          2732  *---------------------------------------------------------------------*
0000317C                          2733  * Prints the intro
0000317C                          2734  *  
0000317C  103C 000E               2735  PRINT_INTRO     MOVE.B      #14,D0
00003180  43F9 000035B0           2736                  LEA         INTRO_STR1,A1
00003186  4E4F                    2737                  TRAP #15                             
00003188  43F9 000035E3           2738                  LEA         INTRO_STR2,A1
0000318E  4E4F                    2739                  TRAP #15 
00003190  43F9 00003620           2740                  LEA         INTRO_STR3,A1
00003196  4E4F                    2741                  TRAP #15 
00003198  43F9 0000365E           2742                  LEA         INTRO_STR4,A1
0000319E  4E4F                    2743                  TRAP #15 
000031A0  43F9 00003692           2744                  LEA         INTRO_STR5,A1
000031A6  4E4F                    2745                  TRAP #15 
000031A8  43F9 000036DB           2746                  LEA         INTRO_STR6,A1
000031AE  4E4F                    2747                  TRAP #15 
000031B0  43F9 00003728           2748                  LEA         INTRO_STR7,A1
000031B6  4E4F                    2749                  TRAP #15
000031B8  43F9 00003776           2750                  LEA         INTRO_STR8,A1
000031BE  4E4F                    2751                  TRAP #15                             
000031C0  43F9 000037C6           2752                  LEA         INTRO_STR9,A1
000031C6  4E4F                    2753                  TRAP #15 
000031C8  43F9 00003815           2754                  LEA         INTRO_STR10,A1
000031CE  4E4F                    2755                  TRAP #15 
000031D0  43F9 00003863           2756                  LEA         INTRO_STR11,A1
000031D6  4E4F                    2757                  TRAP #15 
000031D8  43F9 000038B1           2758                  LEA         INTRO_STR12,A1
000031DE  4E4F                    2759                  TRAP #15 
000031E0  43F9 000038FF           2760                  LEA         INTRO_STR13,A1
000031E6  4E4F                    2761                  TRAP #15 
000031E8  43F9 0000394B           2762                  LEA         INTRO_STR14,A1
000031EE  4E4F                    2763                  TRAP #15
000031F0  43F9 00003999           2764                  LEA         INTRO_STR15,A1
000031F6  4E4F                    2765                  TRAP #15
000031F8  43F9 00003D8D           2766                  LEA         new_line,A1
000031FE  4E4F                    2767                  TRAP #15
00003200  43F9 000039E6           2768                  LEA         INTRO_STR16,A1
00003206  4E4F                    2769                  TRAP #15
00003208  43F9 00003A32           2770                  LEA         INTRO_STR17,A1
0000320E  4E4F                    2771                  TRAP #15
00003210  43F9 00003D8D           2772                  LEA         new_line,A1
00003216  4E4F                    2773                  TRAP #15
00003218  4E75                    2774                  RTS
0000321A                          2775     
0000321A                          2776  *---------------------------------------------------------------------*
0000321A                          2777  * Prints a comma
0000321A                          2778  *         
0000321A  48E7 8040               2779  PRINT_COMMA     MOVEM.L     A1/D0,-(SP)         save what we change (ALWAYS!)
0000321E                          2780  
0000321E  4BF9 00003D90           2781                  LEA         COMMA,A5
00003224  2CCD                    2782                  MOVE.L      A5,(A6)+            ; add the comma to the output string
00003226                          2783                  
00003226  4CDF 0201               2784                  MOVEM.L     (SP)+,A1/D0         restore it
0000322A                          2785                  
0000322A  4E75                    2786                  RTS
0000322C                          2787  
0000322C                          2788  *----------------------------------------*
0000322C                          2789  * Prints a tab
0000322C                          2790  *
0000322C  48E7 8040               2791  PRINT_TAB       MOVEM.L     A1/D0,-(SP)         save what we change (ALWAYS!)
00003230                          2792                  
00003230  4BF9 00003DB3           2793                  LEA         TAB,A5  
00003236  2CCD                    2794                  MOVE.L      A5,(A6)+            ; add the tab to the output string
00003238                          2795                  
00003238  4CDF 0201               2796                  MOVEM.L     (SP)+,A1/D0         restore it
0000323C                          2797                  
0000323C  4E75                    2798                  RTS     
0000323E                          2799  
0000323E                          2800  *----------------------------------------*
0000323E                          2801  * Prints a space
0000323E                          2802  *               
0000323E  4BF9 00003DBA           2803  PRINT_ALI_1     LEA         ONE_SPACE,A5    * Load one space
00003244  2CCD                    2804                  MOVE.L      A5,(A6)+        * Add one space to string
00003246  4E75                    2805                  RTS
00003248                          2806  *----------------------------------------*
00003248                          2807  * Prints two spaces
00003248                          2808  *               
00003248  4BF9 00003DC2           2809  PRINT_ALI_2     LEA         TWO_SPACE,A5    * Load two spaces
0000324E  2CCD                    2810                  MOVE.L      A5,(A6)+        * Add spaces to string
00003250  4E75                    2811                  RTS
00003252                          2812  
00003252                          2813  *----------------------------------------*
00003252                          2814  * Prints three spaces
00003252                          2815  *               
00003252  4BF9 00003DCB           2816  PRINT_ALI_3     LEA         THREE_SPACE,A5  * Load three spaces
00003258  2CCD                    2817                  MOVE.L      A5,(A6)+        * Add spaces to string
0000325A  4E75                    2818                  RTS
0000325C                          2819  *----------------------------------------*
0000325C                          2820  * Prints four spaces
0000325C                          2821  *               
0000325C  4BF9 00003DD5           2822  PRINT_ALI_4     LEA         FOUR_SPACE,A5   * Load four spaces
00003262  2CCD                    2823                  MOVE.L      A5,(A6)+        * Add spaces to string
00003264  4E75                    2824                  RTS
00003266                          2825                  
00003266                          2826  
00003266                          2827  *------------------------------------------------------------------*
00003266                          2828  * Determine EA MODE 
00003266                          2829  * This will deterine what effective addressing mode to do
00003266                          2830  *
00003266                          2831  * 
00003266                          2832  * D5 - Contains the EA bits
00003266                          2833  * 
00003266                          2834  * D7 Contains the instruction
00003266                          2835  * 
00003266                          2836  * FIND_MODE(D5:EA Bits, D7:Current instruction)
00003266                          2837  * D2 - Contains the Register
00003266                          2838  
00003266  2405                    2839  FIND_EAMODE     MOVE.L      D5,D2
00003268  0202 0007               2840                  ANDI.B      #EA_REG,D2          Get the EA register    
0000326C  0205 0038               2841                  ANDI.B      #EA_MODE,D5         Get the EA Mode
00003270  E60D                    2842                  LSR.B       #3,D5
00003272  4EB9 0000328E           2843                  JSR         MODE_SELECT
00003278  4E75                    2844                  RTS    
0000327A                          2845  
0000327A                          2846  *------------------------------------------------------------------------*
0000327A                          2847  * This Subroutine performs the same way as EA, only we get the 
0000327A                          2848  * Desination reg and mode (mainly for testing simpler commands where
0000327A                          2849  * we know the what register and mode are, 
0000327A                          2850  * D4 - is expected to carry an the op-mode
0000327A                          2851  * D3 - has the appropriate register
0000327A                          2852  *             
0000327A  48E7 2400               2853  FIND_OPMODE     MOVEM.L     D2/D5,-(SP)         Save the state of Registers D2 & D5
0000327E  1A04                    2854                  MOVE.B      D4,D5               Get OPMODE (this is for destination mode, reg testing)
00003280  1403                    2855                  MOVE.B      D3,D2               Get reg number then go to appropriate mode
00003282  4EB9 0000328E           2856                  JSR         MODE_SELECT
00003288  4CDF 0024               2857                  MOVEM.L     (SP)+,D2/D5         Restore before we jump back
0000328C  4E75                    2858                  RTS
0000328E                          2859  
0000328E                          2860  *-----------------------------------------------------------------------
0000328E                          2861  * This goes to the appropriate mode whether we start with FIND_EAMODE
0000328E                          2862  * or FIND_OPMODE
0000328E                          2863  * D5 - is the mode
0000328E                          2864  * D2 - is expected to have the reg number
0000328E                          2865  *
0000328E                          2866  
0000328E                          2867  
0000328E  BA3C 0000               2868  MODE_SELECT     CMP.B       #0,D5               MODE ZERO Goes to DATA REG DIRECT
00003292  6700 0040               2869                  BEQ         M_ZERO
00003296  BA3C 0001               2870                  CMP.B       #1,D5
0000329A  6700 005C               2871                  BEQ         M_ONE               Address Reg Direct
0000329E  BA3C 0002               2872                  CMP.B       #2,D5
000032A2  6700 0078               2873                  BEQ         M_TWO               Address Reg Indirect
000032A6  BA3C 0003               2874                  CMP.B       #3,D5
000032AA  6700 00A4               2875                  BEQ         M_THREE             Address Reg Indirect Post Inc
000032AE  BA3C 0004               2876                  CMP.B       #4,D5
000032B2  6700 00D8               2877                  BEQ         M_FOUR              Address Reg Indirect Pre Dec
000032B6  BA3C 0005               2878                  CMP.B       #5,D5
000032BA  6700 0012               2879                  BEQ         M_INV
000032BE  BA3C 0006               2880                  CMP.B       #6,D5
000032C2  6700 000A               2881                  BEQ         M_INV
000032C6  BA3C 0007               2882                  CMP.B       #7,D5
000032CA  6700 00FC               2883                  BEQ         M_SEVEN             Auxillary EA modes (ABS Short,Long,Immed...)
000032CE                          2884  
000032CE                          2885  *-------------------------------------
000032CE                          2886  * Mode invalid 
000032CE                          2887  * Handler for invalid EA modes
000032CE                          2888  * 
000032CE  554A                    2889  M_INV           SUB.W       #$02,A2             * roll back the address pointer
000032D0  6000 F3F8               2890                  BRA         op_DATA
000032D4                          2891  
000032D4                          2892  
000032D4                          2893  *-------------------------------------
000032D4                          2894  * Mode zero is data register direct mode
000032D4                          2895  * D2 - has the Register
000032D4                          2896  * 
000032D4  48E7 FFF0               2897  M_ZERO          MOVEM.L     D0-D7/A0-A3,-(SP)   Save our stuff real quick
000032D8                          2898                  
000032D8  4BF9 00003FB3           2899                  LEA         DATA_REG,A5
000032DE  2CCD                    2900                  MOVE.L      A5,(A6)+            Add the 'D' to the output string
000032E0                          2901                  
000032E0                          2902                  *CLR         D1                  Get EA Register
000032E0                          2903                  *MOVE.B      D2,D1
000032E0  0642 0030               2904                  ADD.W       #$30,D2             ; convert ascii number to hex
000032E4  18C2                    2905                  MOVE.B      D2,(A4)+            Move the register to A4
000032E6  18FC 0000               2906                  MOVE.B      #$00,(A4)+          Add the string terminating character
000032EA  200C                    2907                  MOVE.L      A4,D0
000032EC  5580                    2908                  SUB.L       #$02,D0
000032EE  2A40                    2909                  MOVE.L      D0,A5
000032F0  2CCD                    2910                  MOVE.L      A5,(A6)+            Add the register to the output string
000032F2                          2911                  
000032F2                          2912                  *MOVE.B      #3,D0               EA REG in D1
000032F2                          2913                  *TRAP        #15                 Display it
000032F2                          2914  
000032F2  4CDF 0FFF               2915                  MOVEM.L     (SP)+,D0-D7/A0-A3   Restore registers
000032F6                          2916           
000032F6  4E75                    2917                  RTS                             Leave this place 
000032F8                          2918  
000032F8                          2919  *------------------------------------------- 
000032F8                          2920  * Mode One is Address Register Direct
000032F8                          2921  * D2 has the register
000032F8                          2922  *
000032F8  48E7 FFF0               2923  M_ONE           MOVEM.L     D0-D7/A0-A3,-(SP)   Save our stuff real quick
000032FC                          2924                  
000032FC  4BF9 00003FB5           2925                  LEA         ADDR_REG,A5         
00003302  2CCD                    2926                  MOVE.L      A5,(A6)+            Add the 'A' to the output string
00003304                          2927                  
00003304                          2928                  
00003304                          2929                  
00003304  0642 0030               2930                  ADD.W       #$30,D2             ; convert ascii number to hex
00003308  18C2                    2931                  MOVE.B      D2,(A4)+            Move the register to A4
0000330A  18FC 0000               2932                  MOVE.B      #$00,(A4)+          Add the string terminating character
0000330E  200C                    2933                  MOVE.L      A4,D0
00003310  5580                    2934                  SUB.L       #$02,D0
00003312  2A40                    2935                  MOVE.L      D0,A5
00003314  2CCD                    2936                  MOVE.L      A5,(A6)+            Add the register to the output string
00003316                          2937  
00003316  4CDF 0FFF               2938                  MOVEM.L     (SP)+,D0-D7/A0-A3   Restore registers
0000331A                          2939           
0000331A  4E75                    2940                  RTS                             Leave this place 
0000331C                          2941  
0000331C                          2942  
0000331C                          2943  *---------------------------------------------
0000331C                          2944  * Mode Two is Address Register Indirect
0000331C                          2945  * (A2)
0000331C                          2946  *
0000331C  48E7 FFF0               2947  M_TWO           MOVEM.L     D0-D7/A0-A3,-(SP)   Save our stuff real quick
00003320  4BF9 00003D9E           2948                  LEA         L_PAREN,A5
00003326  2CCD                    2949                  MOVE.L      A5,(A6)+            Add the '(' to the output string
00003328                          2950              
00003328  4BF9 00003FB5           2951                  LEA         ADDR_REG,A5
0000332E  2CCD                    2952                  MOVE.L      A5,(A6)+            Add the 'A' to the output string
00003330                          2953  
00003330  0642 0030               2954                  ADD.W       #$30,D2             ; convert ascii number to hex
00003334  18C2                    2955                  MOVE.B      D2,(A4)+            Move the register to A4
00003336  18FC 0000               2956                  MOVE.B      #$00,(A4)+          Add the string terminating character
0000333A  200C                    2957                  MOVE.L      A4,D0
0000333C  5580                    2958                  SUB.L       #$02,D0
0000333E  2A40                    2959                  MOVE.L      D0,A5
00003340  2CCD                    2960                  MOVE.L      A5,(A6)+            Add the register to the output string
00003342                          2961              
00003342  4BF9 00003DA0           2962                  LEA         R_PAREN,A5
00003348  2CCD                    2963                  MOVE.L      A5,(A6)+            Add the ')' to the output string
0000334A                          2964              
0000334A  4CDF 0FFF               2965                  MOVEM.L     (SP)+,D0-D7/A0-A3   Restore registers
0000334E                          2966           
0000334E  4E75                    2967                  RTS                             Leave this place 
00003350                          2968  
00003350                          2969  
00003350                          2970  *--------------------------------------------------------*
00003350                          2971  * Mode is Register Indirect Post Increment Mode
00003350                          2972  *
00003350                          2973  *
00003350                          2974  *    
00003350  48E7 FFF0               2975  M_THREE         MOVEM.L     D0-D7/A0-A3,-(SP)   Save our stuff real quick
00003354                          2976  
00003354  4BF9 00003D9E           2977                  LEA         L_PAREN,A5
0000335A  2CCD                    2978                  MOVE.L      A5,(A6)+            Add the '(' to the output string
0000335C                          2979              
0000335C  4BF9 00003FB5           2980                  LEA         ADDR_REG,A5        
00003362  2CCD                    2981                  MOVE.L      A5,(A6)+            Add the 'A' to the output string
00003364                          2982  
00003364  0642 0030               2983                  ADD.W       #$30,D2             ; convert ascii number to hex
00003368  18C2                    2984                  MOVE.B      D2,(A4)+            Move the register to A4
0000336A  18FC 0000               2985                  MOVE.B      #$00,(A4)+          Add the string terminating character
0000336E  200C                    2986                  MOVE.L      A4,D0
00003370  5580                    2987                  SUB.L       #$02,D0
00003372  2A40                    2988                  MOVE.L      D0,A5
00003374  2CCD                    2989                  MOVE.L      A5,(A6)+            Add the register to the output string
00003376                          2990             
00003376  4BF9 00003DA0           2991                  LEA         R_PAREN,A5
0000337C  2CCD                    2992                  MOVE.L      A5,(A6)+            Add the ')' to the output string
0000337E                          2993  
0000337E  4BF9 00003DA2           2994                  LEA         INCREMENT,A5
00003384  2CCD                    2995                  MOVE.L      A5,(A6)+            Add the '+' to the output string
00003386                          2996  
00003386  4CDF 0FFF               2997                  MOVEM.L     (SP)+,D0-D7/A0-A3   Restore registers
0000338A                          2998           
0000338A  4E75                    2999                  RTS                             Leave this place 
0000338C                          3000  
0000338C                          3001  
0000338C                          3002  *--------------------------------------------------------------
0000338C                          3003  * Mode is Register Indirect Pre-Decrement Mode
0000338C                          3004  *
0000338C                          3005  *            
0000338C                          3006  
0000338C  48E7 FFF0               3007  M_FOUR          MOVEM.L     D0-D7/A0-A3,-(SP)   Save our stuff real quick
00003390                          3008              
00003390  4BF9 00003DA4           3009                  LEA         DECREMENT,A5
00003396  2CCD                    3010                  MOVE.L      A5,(A6)+            Add the '-' to the output string
00003398                          3011      
00003398  4BF9 00003D9E           3012                  LEA         L_PAREN,A5
0000339E  2CCD                    3013                  MOVE.L      A5,(A6)+            Add the '(' to the output string
000033A0                          3014              
000033A0  4BF9 00003FB5           3015                  LEA         ADDR_REG,A5         
000033A6  2CCD                    3016                  MOVE.L      A5,(A6)+            Add the 'A' to the output string
000033A8                          3017  
000033A8  0642 0030               3018                  ADD.W       #$30,D2             ; convert ascii number to hex
000033AC  18C2                    3019                  MOVE.B      D2,(A4)+            Move the register to A4
000033AE  18FC 0000               3020                  MOVE.B      #$00,(A4)+          Add the string terminating character
000033B2  200C                    3021                  MOVE.L      A4,D0
000033B4  5580                    3022                  SUB.L       #$02,D0
000033B6  2A40                    3023                  MOVE.L      D0,A5
000033B8  2CCD                    3024                  MOVE.L      A5,(A6)+            Add the register to the output string
000033BA                          3025              
000033BA  4BF9 00003DA0           3026                  LEA         R_PAREN,A5
000033C0  2CCD                    3027                  MOVE.L      A5,(A6)+            Add the ')' to the output string
000033C2                          3028  
000033C2  4CDF 0FFF               3029                  MOVEM.L     (SP)+,D0-D7/A0-A3   Restore registers
000033C6                          3030           
000033C6  4E75                    3031                  RTS                             Leave this place 
000033C8                          3032  
000033C8                          3033  
000033C8                          3034  
000033C8                          3035  
000033C8                          3036  
000033C8                          3037  *--------------------------------------------*
000033C8                          3038  * Mode seven is special, it does stuff
000033C8                          3039  * like absolute addressing and immediate 
000033C8                          3040  * data.
000033C8                          3041  * D2 - is the register data
000033C8                          3042  * D5 - the mode data
000033C8                          3043  * D6 - value to determine size of operation for 
000033C8                          3044  *      Immediate data operation: For instance,
000033C8                          3045  *      if the immediate data is a byte or a word,
000033C8                          3046  *      then we are going to grab a word's-worth of
000033C8                          3047  *      displacement from memory, otherwise we 
000033C8                          3048  *      grab a longword's-worth
000033C8                          3049  *
000033C8                          3050  * NOTE!!! Assuming now, that the current location
000033C8                          3051  * that we are at in memory is in A2, so we will be
000033C8                          3052  * advancing from this point in memory. A2 should 
000033C8                          3053  * be left at the next instruction by the time we
000033C8                          3054  * are DONE!
000033C8                          3055  *
000033C8                          3056  *
000033C8  B43C 0000               3057  M_SEVEN         CMP.B       #0,D2
000033CC  6700 0022               3058                  BEQ         ABS_SHORTADDR
000033D0  B43C 0001               3059                  CMP.B       #1,D2
000033D4  6700 0052               3060                  BEQ         ABS_LONGADDR
000033D8  B43C 0002               3061                  CMP.B       #2,D2
000033DC  6700 F2EC               3062                  BEQ         op_DATA
000033E0  B43C 0003               3063                  CMP.B       #3,D2
000033E4  6700 F2E4               3064                  BEQ         op_DATA
000033E8  B43C 0004               3065                  CMP.B       #4,D2       
000033EC  6700 0076               3066                  BEQ         IMMED_DATA
000033F0                          3067  
000033F0                          3068              
000033F0                          3069  
000033F0                          3070  *--------------------------------------------*
000033F0                          3071  *  Absolute Short Addressing Mode
000033F0                          3072  *  Grabs the word address from memory
000033F0                          3073  *  and shows it like $XXXX,
000033F0                          3074  *  Assumptions - 1) needed value is just after instruction
000033F0                          3075  *
000033F0                          3076  
000033F0  48E7 C040               3077  ABS_SHORTADDR   MOVEM.L     A1/D0-D1,-(SP)      Save our state
000033F4                          3078    
000033F4                          3079                  *CMP.W       (A2)+,A1            MOVE just after the instruction in memory
000033F4                          3080      
000033F4  4BF9 00003DA8           3081                  LEA         DOLLAH,A5
000033FA  2CCD                    3082                  MOVE.L      A5,(A6)+            Add '$' to the output string
000033FC                          3083      
000033FC  341A                    3084                  MOVE.W      (A2)+,D2
000033FE                          3085                  *** NEED TO CONVERT D2 TO ASCII
000033FE                          3086                  
000033FE  48E7 FF00               3087                  MOVEM.L     D0-D7,-(SP)         Save state
00003402                          3088                  
00003402  204C                    3089                  MOVE.L      A4,A0               Clear the output address location
00003404  3002                    3090                  MOVE.W      D2,D0
00003406  7202                    3091                  MOVE.L      #$00000002,D1
00003408  7400                    3092                  MOVE.L      #$00000000,D2
0000340A  7600                    3093                  MOVE.L      #$00000000,D3
0000340C  4EB8 20BE               3094                  JSR         HEXTOASCII
00003410                          3095                  
00003410  4CDF 00FF               3096                  MOVEM.L     (SP)+,D0-D7         Restore state
00003414                          3097                  
00003414                          3098                  ***
00003414  588C                    3099                  ADD.L       #$04,A4
00003416  18FC 0000               3100                  MOVE.B      #$00,(A4)+          Add the string terminating character
0000341A  200C                    3101                  MOVE.L      A4,D0
0000341C  5B80                    3102                  SUB.L       #$05,D0
0000341E  2A40                    3103                  MOVE.L      D0,A5
00003420  2CCD                    3104                  MOVE.L      A5,(A6)+            Add the register to the output string
00003422                          3105     
00003422                          3106      
00003422  4CDF 0203               3107                  MOVEM.L     (SP)+,A1/D0-D1      Restore the state!
00003426                          3108  
00003426                          3109  
00003426  4E75                    3110                  RTS                             Leave this foreboding place
00003428                          3111  
00003428                          3112  *--------------------------------------------*
00003428                          3113      
00003428                          3114      
00003428                          3115  *--------------------------------------------*
00003428                          3116  * Absolute Long Addressing
00003428                          3117  * Gets the long-word address from memory
00003428                          3118  * for EA
00003428                          3119  *
00003428                          3120  *    
00003428                          3121      
00003428  48E7 C040               3122  ABS_LONGADDR    MOVEM.L     A1/D0-D1,-(SP)      Save our state
0000342C                          3123    
0000342C                          3124                  
0000342C                          3125      
0000342C  4BF9 00003DA8           3126                  LEA         DOLLAH,A5
00003432  2CCD                    3127                  MOVE.L      A5,(A6)+            Add '$' to the output string
00003434                          3128                  
00003434  241A                    3129                  MOVE.L      (A2)+,D2
00003436                          3130                  **** NEED TO CONVERT D2 to ASCII
00003436  48E7 FF00               3131                  MOVEM.L     D0-D7,-(SP)         Save state
0000343A                          3132                  
0000343A  204C                    3133                  MOVE.L      A4,A0               Clear the output address location
0000343C  2002                    3134                  MOVE.L      D2,D0
0000343E  7204                    3135                  MOVE.L      #$00000004,D1
00003440  7400                    3136                  MOVE.L      #$00000000,D2
00003442  7600                    3137                  MOVE.L      #$00000000,D3
00003444  4EB8 20BE               3138                  JSR         HEXTOASCII
00003448                          3139                  
00003448  4CDF 00FF               3140                  MOVEM.L     (SP)+,D0-D7         Restore state
0000344C                          3141  
0000344C                          3142                  ***
0000344C  508C                    3143                  ADD.L       #$08,A4
0000344E  18FC 0000               3144                  MOVE.B      #$00,(A4)+          Add the string terminating character
00003452  200C                    3145                  MOVE.L      A4,D0
00003454  0480 00000009           3146                  SUB.L       #$09,D0
0000345A  2A40                    3147                  MOVE.L      D0,A5
0000345C  2CCD                    3148                  MOVE.L      A5,(A6)+            Add the register to the output string
0000345E                          3149     
0000345E                          3150      
0000345E  4CDF 0203               3151                  MOVEM.L     (SP)+,A1/D0-D1      Restore the state!
00003462                          3152  
00003462                          3153  
00003462  4E75                    3154                  RTS                             Leave this foreboding place
00003464                          3155  
00003464                          3156  *---------------------------------------------------------*
00003464                          3157  * Immediate Data
00003464                          3158  * Gets the immediate data value from memory
00003464                          3159  * D6 - is the flag that determines whether to grab
00003464                          3160  *      a word or long amount of data from memory.
00003464                          3161  *      (0: for byte & Words, 1: long
00003464                          3162  *
00003464                          3163  *
00003464                          3164  
00003464  48E7 C040               3165  IMMED_DATA      MOVEM.L     A1/D0-D1,-(SP)      Save our state
00003468                          3166                  
00003468                          3167                  *Find size to determine the data amount to be processed
00003468  BC3C 0000               3168                  CMP.B       #%00,D6
0000346C  6700 0012               3169                  BEQ         GET_BYTE            
00003470  BC3C 0001               3170                  CMP.B       #%01,D6
00003474  6700 0038               3171                  BEQ         GET_WORD
00003478  BC3C 0002               3172                  CMP.B       #%10,D6
0000347C  6700 005E               3173                  BEQ         GET_LONG 
00003480                          3174                  
00003480                          3175                             
00003480                          3176  
00003480                          3177           
00003480  4BF9 00003DAA           3178  GET_BYTE        LEA         IMMED_PREFIX,A5
00003486  2CCD                    3179                  MOVE.L      A5,(A6)+            Add '#$' to the output string
00003488                          3180                  *** NEED TO CONVERT D2 TO ASCII
00003488  341A                    3181                  MOVE.W      (A2)+,D2            Read the word (only looking at byte amount)
0000348A                          3182                  
0000348A  48E7 FF00               3183                  MOVEM.L     D0-D7,-(SP)         Save state
0000348E                          3184                  
0000348E  204C                    3185                  MOVE.L      A4,A0               Clear the output address location
00003490  3002                    3186                  MOVE.W      D2,D0               Move the word to D0 for HEXTOASCII
00003492  7201                    3187                  MOVE.L      #1,D1               1 byte for a byte
00003494  4EB8 20BE               3188                  JSR         HEXTOASCII
00003498                          3189                  
00003498  548C                    3190                  ADD.L       #$02,A4
0000349A  18FC 0000               3191                  MOVE.B      #$00,(A4)+          Add the string terminating character
0000349E  200C                    3192                  MOVE.L      A4,D0
000034A0  5780                    3193                  SUB.L       #$03,D0             Number of hex characters to display (zero based)
000034A2  2A40                    3194                  MOVE.L      D0,A5
000034A4  2CCD                    3195                  MOVE.L      A5,(A6)+            Add the register to the output string
000034A6                          3196  
000034A6                          3197                  
000034A6  4CDF 00FF               3198                  MOVEM.L     (SP)+,D0-D7         Restore state
000034AA  6000 0062               3199                  BRA         IM_EXIT             Exit this mode
000034AE                          3200  
000034AE                          3201                  
000034AE  4BF9 00003DAA           3202  GET_WORD        LEA         IMMED_PREFIX,A5
000034B4  2CCD                    3203                  MOVE.L      A5,(A6)+            Add '#$' to the output string
000034B6                          3204                  *** NEED TO CONVERT D2 TO ASCII
000034B6  341A                    3205                  MOVE.W      (A2)+,D2            Read the word
000034B8                          3206                  
000034B8  48E7 FF00               3207                  MOVEM.L     D0-D7,-(SP)         Save state
000034BC                          3208                  
000034BC  204C                    3209                  MOVE.L      A4,A0               Clear the output address location
000034BE  3002                    3210                  MOVE.W      D2,D0               Move the word to D0 for HEXTOASCII
000034C0  7202                    3211                  MOVE.L      #2,D1               2 bytes for a word
000034C2  4EB8 20BE               3212                  JSR         HEXTOASCII
000034C6                          3213                  
000034C6  588C                    3214                  ADD.L       #$04,A4
000034C8  18FC 0000               3215                  MOVE.B      #$00,(A4)+          Add the string terminating character
000034CC  200C                    3216                  MOVE.L      A4,D0
000034CE  5B80                    3217                  SUB.L       #$05,D0             Number of hex characters to display (zero based)
000034D0  2A40                    3218                  MOVE.L      D0,A5
000034D2  2CCD                    3219                  MOVE.L      A5,(A6)+            Add the register to the output string
000034D4                          3220  
000034D4                          3221                  
000034D4  4CDF 00FF               3222                  MOVEM.L     (SP)+,D0-D7         Restore state
000034D8  6000 0034               3223                  BRA         IM_EXIT             Exit this mode
000034DC                          3224      
000034DC  4BF9 00003DAA           3225  GET_LONG        LEA         IMMED_PREFIX,A5
000034E2  2CCD                    3226                  MOVE.L      A5,(A6)+            Add '#$' to the output string
000034E4                          3227                  *** NEED TO CONVERT D2 TO ASCII
000034E4  241A                    3228                  MOVE.L      (A2)+,D2            Read the long
000034E6                          3229                  
000034E6  48E7 FF00               3230                  MOVEM.L     D0-D7,-(SP)         Save state
000034EA                          3231                  
000034EA  204C                    3232                  MOVE.L      A4,A0               Clear the output address location
000034EC  2002                    3233                  MOVE.L      D2,D0               Move the long to D0 for HEXTOASCII
000034EE  7204                    3234                  MOVE.L      #4,D1               4 bytes for a long
000034F0  4EB8 20BE               3235                  JSR         HEXTOASCII
000034F4                          3236                  
000034F4  508C                    3237                  ADD.L       #$08,A4
000034F6  18FC 0000               3238                  MOVE.B      #$00,(A4)+          Add the string terminating character
000034FA  200C                    3239                  MOVE.L      A4,D0
000034FC  0480 00000009           3240                  SUB.L       #$09,D0             Number of hex characters to display (zero based)
00003502  2A40                    3241                  MOVE.L      D0,A5
00003504  2CCD                    3242                  MOVE.L      A5,(A6)+            Add the register to the output string
00003506                          3243  
00003506                          3244                  
00003506  4CDF 00FF               3245                  MOVEM.L     (SP)+,D0-D7         Restore state
0000350A  6000 0002               3246                  BRA         IM_EXIT             Exit this mode
0000350E                          3247          
0000350E  4CDF 0203               3248  IM_EXIT         MOVEM.L     (SP)+,A1/D0-D1      Restore the state!
00003512  4E75                    3249                  RTS                             Leave this place
00003514                          3250  
00003514                          3251  *-------------------------------------------*
00003514                          3252  * For replacing the current Register with 
00003514                          3253  * the SP register. EX (SP),D1...
00003514                          3254  *   
00003514                          3255  *   
00003514  48E7 8040               3256  STACK_REG       MOVEM.L     D0/A1,-(SP)
00003518                          3257  
00003518  4BF9 00003FB9           3258                  LEA         SP_REG,A5
0000351E  2CCD                    3259                  MOVE.L      A5,(A6)+
00003520                          3260                  
00003520  4CDF 0201               3261                  MOVEM.L     (SP)+,D0/A1 
00003524                          3262                  
00003524                          3263  *-------------------------------------------*
00003524                          3264  
00003524                          3265  
00003524  B5CB                    3266  next_page       CMP.L       A3,A2               ; check if end address has been reached
00003526  6700 0062               3267                  BEQ         exit                ; exit the program
0000352A                          3268                  
0000352A  103C 000E               3269                  MOVE.B      #14,D0
0000352E  43F9 00003C25           3270                  LEA         prompt_new,A1
00003534  4E4F                    3271                  TRAP #15                        ; prompt user to press enter
00003536                          3272                  
00003536  103C 0002               3273                  MOVE.B      #2,D0
0000353A  43F9 00003C87           3274                  LEA         input,A1
00003540  4E4F                    3275                  TRAP #15                        ; input used to wait for enter
00003542                          3276                  
00003542  23FC 00000000 00009000  3277                  MOVE.L      #$0000,$00009000        ; set counter to 0
0000354C  6000 E9C0               3278                  BRA         loop_start          ; go back to start of the loop
00003550                          3279                  
00003550                          3280                  
00003550                          3281                  
00003550                          3282                  
00003550                          3283  
00003550  227C 00000000           3284  loop_exit       MOVE.L      #$000000,A1
00003556  B5CB                    3285                  CMP.L       A3,A2               ; check to see if end address has been reached
00003558  6E00 0030               3286                  BGT         exit                ; if reached, end the program
0000355C                          3287                  
0000355C  4EB8 1F40               3288                  JSR         clearTempVars       ; clear the temporary variables for the output string
00003560  4EB8 1F5E               3289                  JSR         clearOutputStr      ; clear the output string
00003564  287C 00009010           3290                  MOVE.L      #$00009010,A4
0000356A  2A7C 000090A0           3291                  MOVE.L      #$000090A0,A5
00003570  2C7C 000090A0           3292                  MOVE.L      #$000090A0,A6
00003576  4280                    3293                  CLR.L       D0
00003578  4281                    3294                  CLR.L       D1
0000357A  4282                    3295                  CLR.L       D2
0000357C  4283                    3296                  CLR.L       D3
0000357E  4284                    3297                  CLR.L       D4
00003580  4285                    3298                  CLR.L       D5
00003582  4286                    3299                  CLR.L       D6
00003584  4287                    3300                  CLR.L       D7                  ; clear all of the registers
00003586  6000 E986               3301                  BRA         loop_start          ; go back to the start of the loop
0000358A                          3302      
0000358A                          3303  exit            
0000358A  103C 000E               3304                  MOVE.B      #14,D0              
0000358E  43F9 00003C3D           3305                  LEA         FINISHED_STR,A1      
00003594  4E4F                    3306                  TRAP        #15                 * print the finished statement
00003596                          3307                  
00003596  103C 0002               3308                  MOVE.B      #2,D0               * get user input to determine if retrying
0000359A  43F9 00003C87           3309                  LEA         input,A1
000035A0  4E4F                    3310                  TRAP #15                        
000035A2  B2BC 00000000           3311                  CMP.L       #0,D1               * check to see if user typed in 0 or enter
000035A8  6700 DA56               3312                  BEQ         START               * go to beginning if user typed in enter or 0
000035AC  FFFF FFFF               3313                  SIMHALT                         * halt simulator
000035B0                          3314  
000035B0                          3315  * strings for intro message                
000035B0= 5F 5F 5F 5F 5F 5F ...   3316  INTRO_STR1      DC.B        '_____________________________            _-----_',CR,LF,0
000035E3= 5C 5F 3D 3D 3D 3D ...   3317  INTRO_STR2      DC.B        '\_=====================__=__/  ____.----*-------`----.____',CR,LF,0
00003620= 20 20 20 20 20 20 ...   3318  INTRO_STR3      DC.B        '                  \_   \       \----._______________.----/ ',CR,LF,0
0000365E= 20 20 20 20 20 20 ...   3319  INTRO_STR4      DC.B        '                    \   \      /  /     `--___--*',CR,LF,0
00003692= 20 20 20 20 20 20 ...   3320  INTRO_STR5      DC.B        '               __,---`   `----*  *-_                _______    _______',CR,LF,0
000036DB= 20 20 20 20 20 20 ...   3321  INTRO_STR6      DC.B        '              /____                ||              / _____/|  / ___  /|  _',CR,LF,0
00003728= 20 20 20 20 20 20 ...   3322  INTRO_STR7      DC.B        '                   `--._________,--*              / /____ |/ / /__/ / / / /',CR,LF,0
00003776= 20 20 20 20 20 20 ...   3323  INTRO_STR8      DC.B        '                                                 / ___  /|  / ___  / / / /,-.',CR,LF,0
000037C6= 20 20 20 20 20 20 ...   3324  INTRO_STR9      DC.B        '                                                / /__/ / / / /__/ / / /   ,*',CR,LF,0
00003815= 20 20 20 20 20 20 ...   3325  INTRO_STR10     DC.B        '                                               /______/ / /______/ / /_/\_\',CR,LF,0
00003863= 20 20 20 20 20 20 ...   3326  INTRO_STR11     DC.B        '                                               |______|/  |______|/ |_| |_|',CR,LF,0
000038B1= 20 20 20 20 20 20 ...   3327  INTRO_STR12     DC.B        '                                              =============================',CR,LF,0
000038FF= 20 20 20 20 20 20 ...   3328  INTRO_STR13     DC.B        '                                               ENTERPRISE      DECOMPILER',CR,LF,0
0000394B= 20 20 20 20 20 20 ...   3329  INTRO_STR14     DC.B        '                                              =============================',CR,LF,0
00003999= 20 20 20 20 20 20 ...   3330  INTRO_STR15     DC.B        '                                               By Kaley, Cole, & Abby 2014',CR,LF,0               
000039E6= 57 65 6C 63 6F 6D ...   3331  INTRO_STR16     DC.B        'Welcome to the Enterprise Decompiler! Please load a range of addresses to',CR,LF,0 
00003A32= 64 69 73 61 73 73 ...   3332  INTRO_STR17     DC.B        'disassemble from and to by typing in their hex values followed by enter. ',CR,LF,0                
00003A7E                          3333  
00003A7E                          3334  * IO error messages
00003A7E= 41 6E 20 65 72 72 ...   3335  ERROR_STR               DC.B    'An error occured. Please try again.',0
00003AA2= 49 6E 76 61 6C 69 ...   3336  ERROR_INVALID_ADD_STR   DC.B    'Invalid address. Please try again.',0
00003AC5= 54 68 65 20 73 74 ...   3337  ERROR_2BYTE_STR         DC.B    'The start and end address need to be atleast 2 bytes apart. Please try again.',0
00003B13= 54 68 65 20 73 74 ...   3338  ERROR_SBOUND_STR        DC.B    'The start address is less than the minimum address. Please try again.',0
00003B59= 54 68 65 20 65 6E ...   3339  ERROR_EBOUND_STR        DC.B    'The end address is greater than the maximum address. Please try again.',0
00003BA0= 54 68 65 20 73 74 ...   3340  ERROR_SGREATER_STR      DC.B    'The start address is greater than the end address. Please try again.',0
00003BE5                          3341  
00003BE5                          3342  * variables and constants
00003BE5= 57 68 61 74 20 69 ...   3343  prompt_start    DC.B        'What is the starting address? $',0
00003C05= 20 20 57 68 61 74 ...   3344  prompt_end      DC.B        '  What is the ending address? $',0
00003C25= 50 72 65 73 73 20 ...   3345  prompt_new      DC.B        'Press enter to continue',0
00003C3D= 44 69 73 61 73 73 ...   3346  FINISHED_STR    DC.B        'Disassembly complete. Press enter to try again, or anything else to stop.',0
00003C87= 00 00 00 00 00 00 ...   3347  input           DCB.B       256,0
00003D87= 45 52 52 4F 52 00       3348  invalidAdd      DC.B        'ERROR',0
00003D8D= 0D 0A 00                3349  new_line        DC.B        '',CR,LF,0
00003D90= 2C 00                   3350  COMMA           DC.B        ',',0
00003D92= 2E 42 20 00             3351  B_STR           DC.B        '.B ',0
00003D96= 2E 57 20 00             3352  W_STR           DC.B        '.W ',0
00003D9A= 2E 4C 20 00             3353  L_STR           DC.B        '.L ',0
00003D9E= 28 00                   3354  L_PAREN         DC.B        '(',0
00003DA0= 29 00                   3355  R_PAREN         DC.B        ')',0
00003DA2= 2B 00                   3356  INCREMENT       DC.B        '+',0
00003DA4= 2D 00                   3357  DECREMENT       DC.B        '-',0
00003DA6= 23 00                   3358  POUND           DC.B        '#',0
00003DA8= 24 00                   3359  DOLLAH          DC.B        '$',0
00003DAA= 23 24 00                3360  IMMED_PREFIX    DC.B        '#$',0
00003DAD= 20 20 20 20 20 00       3361  SMALL_TAB       DC.B        '     ',0
00003DB3= 20 20 20 20 20 20 00    3362  TAB             DC.B        '      ',0
00003DBA= 20 20 20 20 20 20 ...   3363  ONE_SPACE       DC.B        '       ',0
00003DC2= 20 20 20 20 20 20 ...   3364  TWO_SPACE       DC.B        '        ',0
00003DCB= 20 20 20 20 20 20 ...   3365  THREE_SPACE     DC.B        '         ',0
00003DD5= 20 20 20 20 20 20 ...   3366  FOUR_SPACE      DC.B        '          ',0
00003DE0                          3367  *------------------------------------------------------------------*
00003DE0= 20 20 20 20 20 20 ...   3368  DATA_STR        DC.B        '      DATA         ',0
00003DF4= 20 20 20 20 20 20 ...   3369  NOP_STR         DC.B        '      NOP',0
00003DFE= 20 20 20 20 20 20 ...   3370  MOVEB_STR       DC.B        '      MOVE.B',0
00003E0B= 20 20 20 20 20 20 ...   3371  MOVEW_STR       DC.B        '      MOVE.W',0
00003E18= 20 20 20 20 20 20 ...   3372  MOVEL_STR       DC.B        '      MOVE.L',0
00003E25= 20 20 20 20 20 20 ...   3373  BRA_STR         DC.B        '      BRA',0
00003E2F= 20 20 20 20 20 20 ...   3374  LEA_STR         DC.B        '      LEA',0
00003E39= 20 20 20 20 20 20 ...   3375  JSR_STR         DC.B        '      JSR',0
00003E43= 20 20 20 20 20 20 ...   3376  EOR_STR         DC.B        '      EOR',0
00003E4D= 20 20 20 20 20 20 ...   3377  OR_STR          DC.B        '      OR',0
00003E56= 20 20 20 20 20 20 ...   3378  ORI_STR         DC.B        '      ORI',0
00003E60= 20 20 20 20 20 20 ...   3379  NEG_STR         DC.B        '      NEG',0
00003E6A= 20 20 20 20 20 20 ...   3380  RTS_STR         DC.B        '      RTS',0
00003E74= 20 20 20 20 20 20 ...   3381  BCLR_STR        DC.B        '      BCLR',0
00003E7F= 20 20 20 20 20 20 ...   3382  LSL_STR         DC.B        '      LSL',0
00003E89= 20 20 20 20 20 20 ...   3383  LSR_STR         DC.B        '      LSR',0
00003E93= 20 20 20 20 20 20 ...   3384  CMPI_STR        DC.B        '      CMPI',0
00003E9E= 20 20 20 20 20 20 ...   3385  BCS_STR         DC.B        '      BCS',0
00003EA8= 20 20 20 20 20 20 ...   3386  BGE_STR         DC.B        '      BGE',0
00003EB2= 20 20 20 20 20 20 ...   3387  BLT_STR         DC.B        '      BLT',0
00003EBC= 20 20 20 20 20 20 ...   3388  BVC_STR         DC.B        '      BVC',0
00003EC6= 20 20 20 20 20 20 ...   3389  ROL_STR         DC.B        '      ROL',0
00003ED0= 20 20 20 20 20 20 ...   3390  ROR_STR         DC.B        '      ROR',0
00003EDA= 20 20 20 20 20 20 ...   3391  ASL_STR         DC.B        '      ASL',0
00003EE4= 20 20 20 20 20 20 ...   3392  ASR_STR         DC.B        '      ASR',0
00003EEE= 20 20 20 20 20 20 ...   3393  ADDA_STR        DC.B        '      ADDA',0
00003EF9= 20 20 20 20 20 20 ...   3394  ADD_STR         DC.B        '      ADD',0
00003F03= 20 20 20 20 20 20 ...   3395  SUBA_STR        DC.B        '      SUBA',0
00003F0E= 20 20 20 20 20 20 ...   3396  SUB_STR         DC.B        '      SUB',0
00003F18= 20 20 20 20 20 20 ...   3397  SUBQ_STR        DC.B        '      SUBQ',0
00003F23= 20 20 20 20 20 20 ...   3398  MULSW_STR       DC.B        '      MULS.W',0
00003F30= 20 20 20 20 20 20 ...   3399  DIVSW_STR       DC.B        '      DIVS.W',0
00003F3D= 20 20 20 20 20 20 ...   3400  CMP_STR         DC.B        '      CMP',0
00003F47= 20 20 20 20 20 20 ...   3401  MOVEAL_STR      DC.B        '      MOVEA.L',0
00003F55= 20 20 20 20 20 20 ...   3402  MOVEAW_STR      DC.B        '      MOVEA.W',0
00003F63= 20 20 20 20 20 20 ...   3403  MOVEM_STR       DC.B        '      MOVEM',0
00003F6F= 37 41 36 41 35 41 ...   3404  MOVEM_POST_STR  DC.B        '7A','6A','5A','4A','3A','2A','1A','0A','7D','6D','5D','4D','3D','2D','1D','0D',0
00003F90= 30 44 31 44 32 44 ...   3405  MOVEM_PRE_STR   DC.B        '0D','1D','2D','3D','4D','5D','6D','7D','0A','1A','2A','3A','4A','5A','6A','7A',0
00003FB1                          3406  *------------------------------------------------------------------*
00003FB1                          3407  * EA REGISTERS
00003FB1                          3408  *------------------------------------------------------------------*
00003FB1                          3409  * DATA Register
00003FB1                          3410  
00003FB1= 38 00                   3411  NO_EIGHT        DC.B        '8',0
00003FB3= 44 00                   3412  DATA_REG        DC.B        'D',0
00003FB5= 41 00                   3413  ADDR_REG        DC.B        'A',0
00003FB7= 41 00                   3414  ADDR_A          DC.B        'A',0
00003FB9= 53 50 00                3415  SP_REG          DC.B        'SP',0
00003FBC                          3416  
00003FBC                          3417  *------------------------------------------------------------------*
00003FBC= 00 00 00 00 00 00 ...   3418  INST_LINE       DCB.B       256,0                   String for one line of instruction
000040BC                          3419  
000040BC                          3420                  END         START                   ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABS_LONGADDR        3428
ABS_SHORTADDR       33F0
ADDA_STR            3EEE
ADDR_A              3FB7
ADDR_REG            3FB5
ADD_STR             3EF9
ARITH1_BYTE         2FB8
ARITH1_LONG         2FDC
ARITH1_WORD         2FCA
ARITH2_BYTE         3020
ARITH2_LONG         303C
ARITH2_RESUME       3070
ARITH2_WORD         302E
ARITH_MODE_1        2FA4
ARITH_MODE_2        3010
ARITH_ONE_CONT      2FEA
ARITH_TWO_CONT      3046
ASCIITOHEXE         1FE6
ASCIITOHEXS         1F7C
ASL_STR             3EDA
ASR_STR             3EE4
AS_FIND_DIR         241C
AS_NO_EA            240E
ATHE_DONE           2046
ATHE_LETTER         2016
ATHE_LOOP           1FFA
ATHE_LOWER          203E
ATHS_DONE           1FDC
ATHS_LETTER         1FAC
ATHS_LOOP           1F90
ATHS_LOWER          1FD4
BCLR_STR            3E74
BCS_STR             3E9E
BGE_STR             3EA8
BLT_STR             3EB2
BRA_STR             3E25
BVC_STR             3EBC
B_STR               3D92
CHECK_MOVEREG       2C26
CHECK_REG           309A
CHECK_SA_MODE       313A
CLEAROUTPUTSTR      1F5E
CLEARTEMPVARS       1F40
CMPI_STR            3E93
CMP_OPMODE          263A
CMP_STR             3F3D
COMMA               3D90
COS_EXIT            1F7A
COS_LOOP            1F68
CR                  D
CTV_EXIT            1F5C
CTV_LOOP            1F4A
DATA_REG            3FB3
DATA_STR            3DE0
DECREMENT           3DA4
DEST_MODE           38
DEST_REG            7
DIVSW_STR           3F30
DOLLAH              3DA8
E1                  2080
E2                  208A
E3                  20A0
E4                  20AA
EA_MODE             38
EA_REG              7
EOR_OPMODE          261E
EOR_STR             3E43
ERROR_2BYTE_STR     3AC5
ERROR_EBOUND_STR    3B59
ERROR_INVALID_ADD_STR  3AA2
ERROR_SBOUND_STR    3B13
ERROR_SGREATER_STR  3BA0
ERROR_STR           3A7E
EXIT                358A
FIND_DISP           272E
FIND_EAMODE         3266
FIND_OPMODE         327A
FINISHED_STR        3C3D
FOUR_SPACE          3DD5
GET_BYTE            3480
GET_END             1E8E
GET_LONG            34DC
GET_START           1E4C
GET_WORD            34AE
HEXTOASCII          20BE
HTA_ERROR           210C
HTA_LETTER          20F4
HTA_LOOP            20DE
HTA_NEXT            20F8
HTA_STRING          2100
IMMED_DATA          3464
IMMED_PREFIX        3DAA
IM_EXIT             350E
INCREMENT           3DA2
INPUT               3C87
INPUT_ERROR         2056
INST_LINE           3FBC
INTRO_STR1          35B0
INTRO_STR10         3815
INTRO_STR11         3863
INTRO_STR12         38B1
INTRO_STR13         38FF
INTRO_STR14         394B
INTRO_STR15         3999
INTRO_STR16         39E6
INTRO_STR17         3A32
INTRO_STR2          35E3
INTRO_STR3          3620
INTRO_STR4          365E
INTRO_STR5          3692
INTRO_STR6          36DB
INTRO_STR7          3728
INTRO_STR8          3776
INTRO_STR9          37C6
INVALIDADD          3D87
INVALID_ADD         2050
JSR_STR             3E39
JUMPTABLE           214E
LEA_STR             3E2F
LF                  A
LONG_ADD            2F6C
LOOP_EXIT           3550
LOOP_START          1F0E
LSL_STR             3E7F
LSR_STR             3E89
LS_FIND_DIR         2494
LS_NO_EA            2486
L_PAREN             3D9E
L_STR               3D9A
MAXADDRESS          FFFFFF
MEM_TO_REG          2DFC
MINADDRESS          0
MODE_SELECT         328E
MOVEAL_STR          3F47
MOVEAW_STR          3F55
MOVEB_STR           3DFE
MOVEL_STR           3E18
MOVEM_POST_STR      3F6F
MOVEM_PRE_STR       3F90
MOVEM_SIZE          2D60
MOVEM_STR           3F63
MOVEW_STR           3E0B
MOVE_DONE           2C10
MULSW_STR           3F23
M_FOUR              338C
M_INV               32CE
M_ONE               32F8
M_SEVEN             33C8
M_THREE             3350
M_TWO               331C
M_ZERO              32D4
NAAC_CONT           315A
NA_ADDR_CHECK       314C
NEG_STR             3E60
NEW_LINE            3D8D
NEXT_PAGE           3524
NMASK               F
NON_MEM_REG         315E
NOP_STR             3DF4
NO_EIGHT            3FB1
OC_DECODE           212E
ONE_SPACE           3DBA
OP0000              21AE
OP0001              21EA
OP0010              21FC
OP0011              2224
OP0100              224C
OP0101              229E
OP0110              22A2
OP0111              22E0
OP1000              22E4
OP1001              22F6
OP1010              2308
OP1011              230C
OP1100              232E
OP1101              233A
OP1110              233E
OP1111              2350
OPCODE              2110
OPCODE_SIZE_STR     2C30
OP_ADD              2F04
OP_ADDRESS          2F4C
OP_ADDR_CONT        2F78
OP_AS               24D6
OP_ASL_STR          2436
OP_ASR_STR          2440
OP_BCLR_DYN         2B70
OP_BCLR_STAT        2AD2
OP_BCLR_STAT_ADD    2B58
OP_BCS              27F2
OP_BGE              2808
OP_BLT              281E
OP_BRA              2716
OP_BVC              2834
OP_CMP              284A
OP_CMPI             2D12
OP_DATA             26CA
OP_DISP16           2782
OP_DISP32           27BA
OP_DISP8            274C
OP_DIVS             2354
OP_EOR              296E
OP_JSR              2916
OP_LEA              289C
OP_LS               24EE
OP_LSL              2CE6
OP_LSL_STR          24A8
OP_LSR              2CFC
OP_LSR_STR          24B2
OP_MOVE             2BF8
OP_MOVEA            2BC8
OP_MOVEM            2D2C
OP_MULS             2360
OP_NEG              2C96
OP_NOP              26B8
OP_OR               29B0
OP_ORI              2A70
OP_OR_DEST          29FC
OP_OR_SRC           2A3A
OP_RO               24BC
OP_ROL_STR          2472
OP_ROR_STR          247C
OP_RTS              2CD4
OP_SHIFT_EA         251E
OP_SIGN_MD          236C
OP_SUB              2EBC
OP_SUBQ             30B4
ORI_STR             3E56
OR_OPMODE           2656
OR_STR              3E4D
PARSE_STR           2E5A
POUND               3DA6
PRINT_ADD           268E
PRINT_ALI_1         323E
PRINT_ALI_2         3248
PRINT_ALI_3         3252
PRINT_ALI_4         325C
PRINT_B_STR         2C4A
PRINT_COMMA         321A
PRINT_ERROR         20B4
PRINT_EXIT          2C88
PRINT_INIT          2C68
PRINT_INTRO         317C
PRINT_LOOP          2C72
PRINT_L_STR         2C5E
PRINT_TAB           322C
PRINT_W_STR         2C54
PROMPT_END          3C05
PROMPT_NEW          3C25
PROMPT_START        3BE5
PS_EXIT_LOOP        2EAC
PS_INC_COUNT        2EA0
PS_LOOP             2E72
PS_VALID_ADD        2E8A
REG_TO_MEM          2D72
REWIND_ADD          2B6A
ROL_STR             3EC6
ROR_STR             3ED0
RO_FIND_DIR         2458
RO_NO_EA            244A
RTM_PREDEC          2DD6
RTS_STR             3E6A
R_PAREN             3DA0
SHIFT_COUNT         2562
SHIFT_EA            23A2
SHIFT_IR            2508
SHIFT_NO_EA         23C6
SHIFT_REG           25C0
SKIP_8              310C
SMALL_TAB           3DAD
SP_REG              3FB9
STACK               8000
STACK_REG           3514
START               1000
SUBA_STR            3F03
SUBQ_CONT           30D6
SUBQ_DONE           3120
SUBQ_STR            3F18
SUB_STR             3F0E
TAB                 3DB3
THREE_SPACE         3DCB
TWO_SPACE           3DC2
WORD_ADD            2F5C
W_STR               3D96
